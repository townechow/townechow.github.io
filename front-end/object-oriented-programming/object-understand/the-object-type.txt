1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","object-oriented-programming","object-understand","the-object-type"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","object-oriented-programming/object-understand/the-object-type","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","object-oriented-programming/object-understand/the-object-type","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","XYfqun6t6z9Zse6YpnRtT",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T391b,<h1>对象类型</h1>
<p>JavaScript 的基本数据类型包括 <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>String</code>、<code>Number</code> 和 <code>Object</code>，以及 ES6 新增的 <code>Symbol</code> 类型。</p>
<p>对象和其他基本类型值不同的是，对象是一种复合值：它可以将多个原始值或者其他对象聚合在一起，可通过键名访问这些值。</p>
<p>对象也可看作是<strong>属性的无序集合</strong>，每个属性都是一个键值对。属性名是 <code>String</code> 类型或 <code>Symbol</code> 类型，因此我们可以把对象看成是从字符串到值的映射。</p>
<h2>对象创建</h2>
<p><strong>创建对象的方法：</strong></p>
<ul>
<li><a href="/front-end/object-oriented-programming/object-understand/#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F">对象字面量</a></li>
<li><a href="/front-end/object-oriented-programming/object-understand/#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li>
<li><a href="/front-end/object-oriented-programming/object-understand/#Object.create()"><code>Object.create()</code></a></li>
</ul>
<h3>对象字面量</h3>
<p>JavaScript 提供了叫做字面量的快捷方式，用于创建大多数原生对象值。使用字面量只是隐藏了与使用 <code>new</code> 操作符相同的基本过程，于是也可以叫做语法糖。</p>
<p>对象字面量是由若干键值对组成的映射表，键值对中间用冒号分隔，整个映射表用花括号括起来。</p>
<p>不同属性之间用逗号分隔，属性名可以是任意 <code>String</code> 类型或 <code>Symbol</code> 类型值，属性值可以是任意类型表达式，表达式的值是属性值。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> uzi = {
  name : <span class="hljs-string">&#x27;uzi&#x27;</span>,
  age : <span class="hljs-number">22</span>,
  <span class="hljs-number">5</span> : <span class="hljs-literal">true</span>
}
</code></pre>
<p><strong>对象键名字符化</strong>：使用对象字面量的方法来定义对象，属性名会自动转换成字符串。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> uzi = {
  <span class="hljs-string">&#x27;name&#x27;</span> : <span class="hljs-string">&#x27;uzi&#x27;</span>,
  <span class="hljs-string">&#x27;age&#x27;</span> : <span class="hljs-number">22</span>,
  <span class="hljs-string">&#x27;5&#x27;</span> : <span class="hljs-literal">true</span>,
}
</code></pre>
<h3>构造函数</h3>
<p>使用 <code>new</code> 操作符调用 Object 构造函数来初始化一个新创建的对象。<a href="/front-end/core-modules/executable-code-and-execution-contexts/execution/this#new-%E7%BB%91%E5%AE%9A">new 实现过程</a></p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> uzi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();

uzi.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Uzi&#x27;</span>;
uzi.<span class="hljs-property">age</span> = <span class="hljs-number">22</span>;
</code></pre>
<h4>参数为对象</h4>
<p>如果该参数是一个对象，则直接返回这个对象。</p>
<p>参数为对象：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> foo = { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> }

<span class="hljs-keyword">let</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(foo)

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo === bar)
<span class="hljs-comment">// true</span>
</code></pre>
<p>参数为函数（对象）：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){}

<span class="hljs-keyword">let</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(foo)

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo === bar)
<span class="hljs-comment">// true</span>
</code></pre>
<h4>参数为原始类型</h4>
<p>如果参数是一个原始类型的值，则返回该值对应的包装对象。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(<span class="hljs-string">&#x27;foo&#x27;</span>))
<span class="hljs-comment">// String {0: &quot;f&quot;, 1: &quot;o&quot;, 2: &quot;o&quot;, length: 3, [[PrimitiveValue]]: &quot;foo&quot;}</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(<span class="hljs-number">1</span>))
<span class="hljs-comment">// Number {[[PrimitiveValue]]: 1}</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(<span class="hljs-literal">true</span>))
<span class="hljs-comment">// Boolean {[[PrimitiveValue]]: true}</span>
</code></pre>
<h3>Object.create</h3>
<p><a href="/front-end/standard-built-in-objects/fundamental-objects/object-objects/properties-of-the-object-constructor/create">Object.create()</a> 方法用于创建指定对象为原型对象的新对象。</p>
<p>📖 <strong>语法</strong></p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(proto, properties)
</code></pre>
<p>&lt;br /&gt;</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">proto</td>
<td style="text-align:left">新创建对象指向的原型对象</td>
<td style="text-align:left">object</td>
</tr>
<tr>
<td style="text-align:left">properties</td>
<td style="text-align:left">可选参数。添加到新创建对象的可枚举属性（即自身定义的属性，而不是原型链上的枚举属性</td>
<td style="text-align:left">object</td>
</tr>
</tbody>
</table>
<p>&lt;br /&gt;</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> object = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>({ <span class="hljs-attr">x</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">y</span>:<span class="hljs-number">1</span> })
<span class="hljs-comment">// object 继承了属性 x 和 y</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object.<span class="hljs-property">x</span>);
<span class="hljs-comment">// 1</span>
</code></pre>
<p>可以通过传入参数 <code>null</code> 来创建一个没有原型的新对象，但通过这种方式创建的对象不会继承任何东西，甚至不包括基础方法，比如 <code>toString</code> 和 <code>valueOf</code>。</p>
<p>继承对象：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> foo = {}
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(foo));
<span class="hljs-comment">// NaN</span>
</code></pre>
<p>不继承任何属性和方法：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> bar = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);
<span class="hljs-comment">// bar 不继承任何属性和方法</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(bar));
<span class="hljs-comment">// Uncaught TypeError: Cannot convert object to primitive value</span>
</code></pre>
<p>如果想创建一个普通的空对象（比如通过 <code>{}</code> 或 <code>new Object()</code> 创建的对象），需要传入 <code>Object.prototype</code>。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-comment">// Example1</span>
<span class="hljs-keyword">const</span> foo = {};
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(foo))
<span class="hljs-comment">// NaN</span>

<span class="hljs-comment">// Example2</span>
<span class="hljs-keyword">const</span> bar = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);
<span class="hljs-comment">// bar 和 {} 和 new Object()一样</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Number</span>(bar) );
<span class="hljs-comment">// NaN</span>
</code></pre>
<p><code>Object.create()</code> 方法的第二个参数是属性描述符。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>({ <span class="hljs-attr">z</span>:<span class="hljs-number">3</span> }, {
  <span class="hljs-attr">x</span>:{
    <span class="hljs-attr">value</span>:<span class="hljs-number">1</span>,
    <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,
    <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>
  },
  <span class="hljs-attr">y</span>:{
    <span class="hljs-attr">value</span>:<span class="hljs-number">2</span>,
    <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,
    <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>
  }
})

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">x</span>, obj.<span class="hljs-property">y</span>, obj.<span class="hljs-property">z</span>);
<span class="hljs-comment">// 1 2 3</span>
</code></pre>
<h2>对象组成</h2>
<p>对象是属性的无序集合，由 <strong>键名</strong> 和 <strong>属性值</strong> 组成。</p>
<h3>键名</h3>
<p>对象的所有键名都是字符串，所以加不加引号都可以，如果不是字符串也会自动转换成字符串。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> foo = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-number">123</span>: <span class="hljs-string">&#x27;car&#x27;</span>}
</code></pre>
<h3>属性值</h3>
<p>属性值可以是任何类型的表达式，最终表达式的结果就是属性值的结果。</p>
<p>如果属性值为函数，则通常把这个属性称为&quot;方法&quot;。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> foo = {
  <span class="hljs-attr">run</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x;
  }
}

foo.<span class="hljs-title function_">run</span>(<span class="hljs-number">1</span>);
<span class="hljs-comment">// 2</span>
</code></pre>
<p>由于对象的方法就是函数，因此也有 <code>name</code> 属性。方法的 <code>name</code> 属性返回紧跟在 <code>function</code> 关键字后面的函数名。如果是匿名函数，ES5 环境会返回 <code>undefined</code>，ES6 环境会返回方法名。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> foo = {
  <span class="hljs-attr">mth1</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) {},
  <span class="hljs-attr">mth2</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {}
}

foo.<span class="hljs-property">mth1</span>.<span class="hljs-property">name</span>;
<span class="hljs-comment">// &quot;f&quot;</span>

foo.<span class="hljs-property">mth2</span>.<span class="hljs-property">name</span>;
<span class="hljs-comment">// ES5： undefined</span>

foo.<span class="hljs-property">mth2</span>.<span class="hljs-property">name</span>;
<span class="hljs-comment">// ES6： &quot;m2&quot;</span>
</code></pre>
<h2>引用对象</h2>
<p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> foo = {};
<span class="hljs-keyword">let</span> bar = foo;

foo.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-property">a</span>);
<span class="hljs-comment">// 1</span>

bar.<span class="hljs-property">b</span> = <span class="hljs-number">2</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">b</span>);
<span class="hljs-comment">// 2</span>
</code></pre>
<p>如果取消某一个变量对于原对象的引用，不会影响到另一个变量。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> foo = {};
<span class="hljs-keyword">let</span> bar = foo;

foo = <span class="hljs-number">1</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar);
<span class="hljs-comment">// {}</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

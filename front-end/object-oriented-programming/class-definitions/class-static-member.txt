1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","object-oriented-programming","class-definitions","class-static-member"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","object-oriented-programming/class-definitions/class-static-member","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","object-oriented-programming/class-definitions/class-static-member","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","dwplAla2fF_VBIw0eRSZr",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T19de,<h1>静态成员</h1>
<p>类的静态成员包括 <strong>静态方法</strong> 和 <strong>静态属性</strong>。</p>
<ul>
<li>静态方法定义在类的内部（不是定义在实例对象 <code>this</code> 上）</li>
<li>静态属性通过对象的属性访问器定义（新提案提供了关键字 <code>static</code> 用于定义）</li>
</ul>
<h2>静态方法</h2>
<p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。</p>
<p>如果在一个方法前，加上 <code>static</code> 关键字，就表示该方法不会被实例继承，而是需要直接通过类来调用，这就称为 <strong>静态方法</strong>。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> {
  <span class="hljs-keyword">static</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span>;
  }
}

<span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">sayHi</span>();
<span class="hljs-comment">// &#x27;Hello&#x27;</span>

<span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();

foo.<span class="hljs-title function_">sayHi</span>();
<span class="hljs-comment">// TypeError: foo.sayHi is not a function</span>
</code></pre>
<h3>动态作用域</h3>
<p>⚠️ <strong>注意</strong>： 如果静态方法包含 <code>this</code> 关键字，这个 <code>this</code> 指的是类，而不是实例。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> {
  <span class="hljs-keyword">static</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">baz</span>();
  }
  <span class="hljs-keyword">static</span> <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);
  }
  <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;World!&#x27;</span>);
  }
}

<span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">bar</span>();
<span class="hljs-comment">// &#x27;Hello&#x27;</span>
</code></pre>
<h3>子类继承</h3>
<p>父类的静态方法，可以被子类继承。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> {
  <span class="hljs-keyword">static</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span>;
  }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Foo</span> {}

<span class="hljs-title class_">Bar</span>.<span class="hljs-title function_">sayHi</span>();
<span class="hljs-comment">// &#x27;Hello&#x27;</span>
</code></pre>
<h2>静态属性</h2>
<p>由于在 ES6 中明文规定，类内部只有静态方法，没有静态属性。因此，类的静态属性无法直接在类内部直接定义。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-comment">// 以下写法无效</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> {
  <span class="hljs-comment">// 写法一</span>
  <span class="hljs-attr">prop</span>: <span class="hljs-number">2</span>;

  <span class="hljs-comment">// 写法二</span>
  <span class="hljs-keyword">static</span> <span class="hljs-attr">prop</span>: <span class="hljs-number">2</span>;
}
</code></pre>
<p>目前有一个静态属性提案，对实例属性和静态属性都规定了新的写法。</p>
<p>过去，需要在类的构造函数中定义实例属性。</p>
<p>现在，<strong>类的实例属性</strong>可以用等式，写入类的定义之中。这种写法比以前更清晰。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-comment">// Old</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> {
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = {
      <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,
    };
  }
}

<span class="hljs-comment">// New</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span> {
  state = {
    <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,
  };

  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">visible</span>); <span class="hljs-comment">// true</span>
  }
}
</code></pre>
<p><strong>为了可读性的目的，对于那些在构造函数中已经定义的实例属性，新写法允许直接在类中列出。</strong></p>
<p>类的静态属性只需在上述的实例属性写法前加上 <code>static</code> 关键字即可。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> {
  <span class="hljs-keyword">static</span> state = {
    <span class="hljs-attr">visible</span>: <span class="hljs-literal">true</span>,
  };
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">MyClass</span>.<span class="hljs-property">state</span>.<span class="hljs-property">visible</span>); <span class="hljs-comment">// true</span>
  }
}
</code></pre>
<p>新写法是显式声明（declarative），而非赋值处理，语义更好。</p>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

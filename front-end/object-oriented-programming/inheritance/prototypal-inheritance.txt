1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","object-oriented-programming","inheritance","prototypal-inheritance"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","object-oriented-programming/inheritance/prototypal-inheritance","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","object-oriented-programming/inheritance/prototypal-inheritance","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","ppahsqiF8M_F8Kzm0oOQH",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1493,<h1>原型式继承</h1>
<p>原型式继承是借助原型基于已有的对象创建新对象，同时还不必因此创建自定义类型。</p>
<p>🌰 <strong>示例：</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">friendship</span>) {
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Creator</span>(<span class="hljs-params"></span>) {}
  <span class="hljs-title class_">Creator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = friendship;
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Creator</span>();
}
</code></pre>
<p>在函数内部，先创建 <strong>临时性的构造函数</strong>，然后将传入的对象作为这个 <strong>构造函数的原型</strong>，最后返回这个临时构造函数的一个实例。从本质上，该函数对传入的对象执行了一次 <strong>浅拷贝</strong>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 作为另一个对象的基础</span>
<span class="hljs-keyword">const</span> friendship = {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;unamed&#x27;</span>,
  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;Amy&#x27;</span>, <span class="hljs-string">&#x27;Ben&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>],
};

<span class="hljs-comment">// 返回新实例对象，该实例对象原型为 Person</span>
<span class="hljs-keyword">let</span> uzi = <span class="hljs-title class_">Person</span>(friendship);
uzi.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Uzi&#x27;</span>;
uzi.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Peter&#x27;</span>);

<span class="hljs-keyword">let</span> kat = <span class="hljs-title class_">Person</span>(friendship);
kat.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Kat&#x27;</span>;
kat.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Sid&#x27;</span>);

<span class="hljs-comment">// 原型中的基本类型属性和引用类型属性被两个实例对象共享</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uzi.<span class="hljs-property">friends</span>);
<span class="hljs-comment">// [&quot;Amy&quot;, &quot;Ben&quot;, &quot;Tom&quot;, &quot;Peter&quot;, &quot;Sid&quot;]</span>
</code></pre>
<p>原型式继承需要有一个对象可以作为另一个对象的基础。如果有这么一个对象的话，可以把它传递给实例生成函数，然后再根据具体需求对得到的对象加以修改即可。</p>
<p>ECMAScript 5 通过新增  <code>Object.create()</code> 方法规范化了原型式继承。这个方法接收两个参数：一个用作新对象原型的对象和一个为新对象定义额外属性的对象（可选）。</p>
<p><strong>实际上就是将 Person 构造函数替换成<code>Object.create</code></strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> friendship = {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;unamed&#x27;</span>,
  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;Amy&#x27;</span>, <span class="hljs-string">&#x27;Ben&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>],
};

<span class="hljs-keyword">let</span> uzi = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(friendship);
uzi.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Uzi&#x27;</span>;
uzi.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Peter&#x27;</span>);

<span class="hljs-keyword">let</span> kat = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(friendship);
kat.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Kat&#x27;</span>;
kat.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Sid&#x27;</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uzi.<span class="hljs-property">__proto__</span>.<span class="hljs-property">friends</span>);
<span class="hljs-comment">// [&quot;Amy&quot;, &quot;Ben&quot;, &quot;Tom&quot;, &quot;Peter&quot;, &quot;Sid&quot;]</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(kat.<span class="hljs-property">__proto__</span>.<span class="hljs-property">friends</span>);
<span class="hljs-comment">// [&quot;Amy&quot;, &quot;Ben&quot;, &quot;Tom&quot;, &quot;Peter&quot;, &quot;Sid&quot;]</span>
</code></pre>
<h2>模式缺陷</h2>
<p>引用类型值的属性始终都会共享相应的值，多个实例对象对引用类型的操作会被篡改。</p>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

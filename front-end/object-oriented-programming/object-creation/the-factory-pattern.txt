1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","object-oriented-programming","object-creation","the-factory-pattern"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","object-oriented-programming/object-creation/the-factory-pattern","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","object-oriented-programming/object-creation/the-factory-pattern","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","lQuxDNglha3Txco52yN1f",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T13f6,<h1>工厂模式</h1>
<p><strong>工厂模式</strong> 是用来创建对象的一种最常用的设计模式。工厂模式不暴露创建对象的具体逻辑，而是将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂。工厂模式常见于大型项目，例如 jQuery 的 <code>$</code> 对象，我们创建选择器对象之所以没有 <code>new selector</code> 就是因为 <code>$()</code> 已经是一个工厂方法，其他例子例如 <code>React.createElement()</code>、<code>Vue.component()</code> 都是工厂模式的实现。</p>
<p>工厂模式根据抽象程度的不同可以分为三种：</p>
<ul>
<li>简单工厂：通过第三方的类完成松耦合的任务</li>
<li>复杂工厂：通过把实例化的任务交给子类来完成的，用以到达松耦合的目的</li>
<li>超级工厂：通过 <code>eval()</code> 来完成智能工厂</li>
</ul>
<p>工厂的目的：在于判断接口最终用哪个类实例化（故与接口密不可分）。</p>
<p>使用工厂最终达到的效果是：多态，和类与类之间的松耦合。</p>
<h2>应用场景</h2>
<h3>ES5 实现工厂模式</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name, age, job</span>) {
  <span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();
  person.<span class="hljs-property">name</span> = name;
  person.<span class="hljs-property">age</span> = age;
  person.<span class="hljs-property">job</span> = job;
  person.<span class="hljs-property">sayNam</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`I&#x27;m <span class="hljs-subst">${name}</span>`</span>);
  };

  <span class="hljs-keyword">return</span> person;
}

<span class="hljs-keyword">const</span> person1 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&#x27;Ben&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;student&#x27;</span>);
<span class="hljs-keyword">const</span> person2 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&#x27;Gray&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&#x27;Doctor&#x27;</span>);
</code></pre>
<p>函数 <code>createPerson()</code> 能够根据接受的参数来构建一个包含所有必要信息的 <code>Person</code> 对象。可以无数次调用这个函数，而每次它都会返回一个包含三个属性一个方法的对象。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p>
<h3>ES6 实现工厂模式</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> {
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, auth</span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">auth</span> = auth;
  }
}
<span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span> {
  <span class="hljs-keyword">static</span> <span class="hljs-title function_">createUser</span>(<span class="hljs-params">name, auth</span>) {
    <span class="hljs-comment">//工厂内部封装了创建对象的逻辑:</span>
    <span class="hljs-comment">//权限为 admin 时，auth=1；权限为 user 时，auth 为 2</span>
    <span class="hljs-comment">//使用者在外部创建对象时,不需要知道各个权限对应哪个字段, 不需要知道赋权的逻辑，只需要知道创建了一个管理员和用户</span>
    <span class="hljs-keyword">if</span> (auth === <span class="hljs-string">&#x27;admin&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(name, <span class="hljs-number">1</span>);
    <span class="hljs-keyword">if</span> (auth === <span class="hljs-string">&#x27;user&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(name, <span class="hljs-number">2</span>);
  }
}
<span class="hljs-keyword">const</span> admin = <span class="hljs-title class_">UserFactory</span>.<span class="hljs-title function_">createUser</span>(<span class="hljs-string">&#x27;cxk&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);
<span class="hljs-keyword">const</span> user = <span class="hljs-title class_">UserFactory</span>.<span class="hljs-title function_">createUser</span>(<span class="hljs-string">&#x27;xz&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>);
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"工厂模式"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

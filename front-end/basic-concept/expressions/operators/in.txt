1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","basic-concept","expressions","operators","in"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","basic-concept/expressions/operators/in","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","basic-concept/expressions/operators/in","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","rWBlc-J0fZSdFLjzcBDBd",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T16ed,<h1>in</h1>
<p><code>in</code> 运算符用于判断属性是否存在于对象中。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js">key <span class="hljs-keyword">in</span> obj;
</code></pre>
<h3>参数</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>key</code></td>
<td>一个字符串类型或者 Symbol 类型的属性名或者数组索引（非 Symbol 类型将会强制转为字符串）。</td>
</tr>
<tr>
<td><code>object</code></td>
<td>检查（或其原型链）是否包含具有指定名称的属性的对象。</td>
</tr>
</tbody>
</table>
<h2>示例</h2>
<h3>代码示例</h3>
<p><strong>数组</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> cars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&#x27;Toyota&#x27;</span>, <span class="hljs-string">&#x27;Nissan&#x27;</span>, <span class="hljs-string">&#x27;Mercedes&#x27;</span>, <span class="hljs-string">&#x27;Buick&#x27;</span>, <span class="hljs-string">&#x27;Porsche&#x27;</span>);
<span class="hljs-number">0</span> <span class="hljs-keyword">in</span> cars;
<span class="hljs-comment">// true</span>

<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> cars;
<span class="hljs-comment">// true</span>

<span class="hljs-number">6</span> <span class="hljs-keyword">in</span> cars;
<span class="hljs-comment">// false</span>

<span class="hljs-string">&#x27;Mercedes&#x27;</span> <span class="hljs-keyword">in</span> cars;
<span class="hljs-comment">// false（必须使用索引号，而不是数组元素的值）</span>

<span class="hljs-string">&#x27;length&#x27;</span> <span class="hljs-keyword">in</span> cars;
<span class="hljs-comment">// rue（length是一个数组属性）</span>

<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span> <span class="hljs-keyword">in</span> cars;
<span class="hljs-comment">// true（数组可迭代，只在 ES2015+ 上有效）</span>
</code></pre>
<p><strong>内置对象</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-string">&#x27;PI&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-title class_">Math</span>;
<span class="hljs-comment">//  true</span>
</code></pre>
<p><strong>自定义对象</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> myCar = { <span class="hljs-attr">make</span>: <span class="hljs-string">&#x27;Honda&#x27;</span>, <span class="hljs-attr">model</span>: <span class="hljs-string">&#x27;Accord&#x27;</span>, <span class="hljs-attr">year</span>: <span class="hljs-string">&#x27;1998&#x27;</span> };
<span class="hljs-string">&#x27;make&#x27;</span> <span class="hljs-keyword">in</span> myCar;
<span class="hljs-string">&#x27;model&#x27;</span> <span class="hljs-keyword">in</span> myCar;
</code></pre>
<p><code>in</code> 右操作数必须是一个对象值</p>
<p>例如：你可以指定使用 <code>String</code> 构造函数创建的字符串，但不能指定字符串文字。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> color1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;green&#x27;</span>);
<span class="hljs-string">&#x27;length&#x27;</span> <span class="hljs-keyword">in</span> color1;
<span class="hljs-comment">//   true</span>

<span class="hljs-keyword">var</span> color2 = <span class="hljs-keyword">new</span> <span class="hljs-string">&#x27;coral&#x27;</span>();
<span class="hljs-string">&#x27;length&#x27;</span> <span class="hljs-keyword">in</span> color2;
<span class="hljs-comment">// 报错(color2不是对象)</span>
</code></pre>
<h3>值为 <code>undefined</code> 的对象属性</h3>
<p>如果你使用 <code>delete</code> 运算符删除了一个属性，则 <code>in</code> 运算符对所删除属性返回 <code>false</code>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> cars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&#x27;Toyota&#x27;</span>, <span class="hljs-string">&#x27;Nissan&#x27;</span>, <span class="hljs-string">&#x27;Mercedes&#x27;</span>, <span class="hljs-string">&#x27;Buick&#x27;</span>, <span class="hljs-string">&#x27;Porsche&#x27;</span>);
<span class="hljs-keyword">delete</span> cars[<span class="hljs-number">3</span>];

<span class="hljs-number">3</span> <span class="hljs-keyword">in</span> cars;
<span class="hljs-comment">//   false</span>
</code></pre>
<p>如果你只是将一个属性的值赋值为 <code>undefined</code>，而没有删除它，则 <code>in</code> 运算仍然会返回 <code>true</code>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> cars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&#x27;Toyota&#x27;</span>, <span class="hljs-string">&#x27;Nissan&#x27;</span>, <span class="hljs-string">&#x27;Mercedes&#x27;</span>, <span class="hljs-string">&#x27;Buick&#x27;</span>, <span class="hljs-string">&#x27;Porsche&#x27;</span>);
cars[<span class="hljs-number">3</span>] = <span class="hljs-literal">undefined</span>;

<span class="hljs-number">3</span> <span class="hljs-keyword">in</span> cars;
<span class="hljs-comment">//  true</span>
</code></pre>
<h3>继承属性</h3>
<p>如果一个属性是
从原型链上继承来的，<code>in</code> 运算符也会返回 <code>true</code>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-string">&#x27;toString&#x27;</span> <span class="hljs-keyword">in</span> {};
<span class="hljs-comment">//  true</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"in"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

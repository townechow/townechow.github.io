1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","basic-concept","expressions","operators","bitwise-operators"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","basic-concept/expressions/operators/bitwise-operators","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","basic-concept/expressions/operators/bitwise-operators","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","FDBdpcX-0lqvVE7rON8fR",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T4d00,<h1>位运算移位运算符</h1>
<p>位运算符将它的操作数视为 32 位元的二进制串（0 和 1 组成）而非十进制、八进制或十六进制数。例如：十进制数字 <code>9</code> 用二进制表示为 <code>1001</code>，位运算符就是在这个二进制表示上执行运算，但是返回结果是标准的 JavaScript 数值。</p>
<ul>
<li>所有 JavaScript 数字存储为根为 10 的 64（8 比特）浮点数。JavaScript 不是类型语言。与许多其他编程语言不同，JavaScript 不定义不同类型的数字，比如整数、短、长、浮点等等。</li>
<li>整数精度（不使用小数点或指数计数法）最多为 15 位。小数精度的最大位数是 17，但是浮点运算并不总是 100% 准确。</li>
<li>位运算直接对二进制位进行计算，位运算直接处理每一个比特位，是非常底层的运算，好处是速度极快，缺点是很不直观，许多场合不能够使用。</li>
<li>位运算<strong>只对整数起作用</strong>，如果一个运算数不是整数，会自动转为整数后再运行。</li>
<li>在 JavaScript 内部，数值都是以 64 位浮点数的形式储存，但是做位运算的时候，是以 32 位带符号的整数进行运算的，并且返回值也是一个 32 位带符号的整数。</li>
</ul>
<h2>位运算符</h2>
<p>JavaScript 中共有 7 个位运算符。</p>
<h3>按位与</h3>
<p>按位与（AND）<code>&amp;</code> 以特定的方式组合操作二进制数中对应的位，如果对应的位都为 1，那么结果就是 1， 如果任意一个位是 0 则结果就是 0。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span>
<span class="hljs-comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span>
<span class="hljs-comment">// -----------------------------</span>
<span class="hljs-comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> &amp; <span class="hljs-number">3</span>);
<span class="hljs-comment">// 1</span>
</code></pre>
<h3>按位或</h3>
<p>按位或（OR）<code>|</code> 运算符与 <code>&amp;</code> 的区别在于如果对应的位中任一个操作数为 1 那么结果就是 1。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span>
<span class="hljs-comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span>
<span class="hljs-comment">// -----------------------------</span>
<span class="hljs-comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> | <span class="hljs-number">3</span>);
<span class="hljs-comment">// 3</span>
</code></pre>
<h3>按位异或</h3>
<p>按位异或（XOR）<code>^</code> 如果对应两个操作位有且仅有一个 1 时结果为 1，其他都是 0。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span>
<span class="hljs-comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span>
<span class="hljs-comment">// -----------------------------</span>
<span class="hljs-comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> ^ <span class="hljs-number">3</span>);
<span class="hljs-comment">// 2</span>
</code></pre>
<h3>按位非</h3>
<p>按位非（NOT）<code>~</code> 运算符是对位求反，1 变 0, 0 变 1，也就是求二进制的反码。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span>
<span class="hljs-comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span>
<span class="hljs-comment">// -----------------------------</span>
<span class="hljs-comment">// 1反码二进制表示: 11111111 11111111 11111111 11111110</span>
<span class="hljs-comment">// 由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去 1，再取一次反，然后加上负号，才能得到这个负数对应的 10 进制值。</span>
<span class="hljs-comment">// -----------------------------</span>
<span class="hljs-comment">// 1的反码减1：     11111111 11111111 11111111 11111101</span>
<span class="hljs-comment">// 反码取反：       00000000 00000000 00000000 00000010</span>
<span class="hljs-comment">// 表示为10进制加负号：-2</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(~<span class="hljs-number">1</span>);
<span class="hljs-comment">// -2</span>
</code></pre>
<p><strong>简单记忆：</strong> 一个数与自身的取反值相加等于 -1。</p>
<h3>左移</h3>
<p>左移（Left shift）<code>&lt;&lt;</code> 运算符使指定值的二进制数所有位都左移指定次数，其移动规则：<strong>丢弃高位，低位补 0</strong>，即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span>
<span class="hljs-comment">// -----------------------------</span>
<span class="hljs-comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>);
<span class="hljs-comment">// 2</span>
</code></pre>
<h3>有符号右移</h3>
<p>有符号右移 <code>&gt;&gt;</code> 会将指定操作数的二进制位向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作 <strong>符号传播</strong>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span>
<span class="hljs-comment">// -----------------------------</span>
<span class="hljs-comment">// 0的二进制表示为: 00000000 00000000 00000000 00000000</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>);
<span class="hljs-comment">// 0</span>
</code></pre>
<h3>无符号右移</h3>
<p>无符号右移 <code>&gt;&gt;&gt;</code> 会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用 0 填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。）
对于非负数，有符号右移和无符号右移总是返回相同的结果。例如，<code>9 &gt;&gt;&gt; 2</code> 得到 2 和 <code>9 &gt;&gt; 2</code> 相同。</p>
<h2>总结</h2>
<table>
<thead>
<tr>
<th>运算符</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>按位与</td>
<td><code>a &amp; b</code></td>
<td>在 <code>a</code> <code>b</code>的位表示中，每一个对应的位都为 1 则返回 1， 否则返回 0</td>
</tr>
<tr>
<td>按位或</td>
<td><code>a | b</code></td>
<td>在<code>a</code> <code>b</code>的位表示中，每一个对应的位，只要有一个为 1 则返回 1， 否则返回 0</td>
</tr>
<tr>
<td>按位异或</td>
<td><code>a ^ b</code></td>
<td>在<code>a</code> <code>b</code>的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0</td>
</tr>
<tr>
<td>按位非</td>
<td><code>~ a</code></td>
<td>反转被操作数的位</td>
</tr>
<tr>
<td>左移</td>
<td><code>a &lt;&lt; b</code></td>
<td>将 <code>a</code> 的二进制串向左移动 <code>b</code> 位,右边移入 0</td>
</tr>
<tr>
<td>算术右移</td>
<td><code>a &gt;&gt; b</code></td>
<td>把 <code>a</code> 的二进制表示向右移动 <code>b</code> 位，丢弃被移出的所有位</td>
</tr>
<tr>
<td>无符号右移</td>
<td><code>a &gt;&gt;&gt; b</code></td>
<td>把 <code>a</code> 的二进制表示向右移动 <code>b</code> 位，丢弃被移出的所有位，并把左边空出的位都填充为 0</td>
</tr>
</tbody>
</table>
<h2>最佳实践</h2>
<h3>取整</h3>
<p>使用 <code>~</code>、<code>&gt;&gt;</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;&gt;</code>、<code>|</code> 来取整。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(~~<span class="hljs-number">6.83</span>); <span class="hljs-comment">// 6</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6.83</span> &gt;&gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// 6</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6.83</span> &lt;&lt; <span class="hljs-number">0</span>); <span class="hljs-comment">// 6</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6.83</span> | <span class="hljs-number">0</span>); <span class="hljs-comment">// 6</span>
<span class="hljs-comment">// &gt;&gt;&gt;不可对负数取整</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6.83</span> &gt;&gt;&gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// 6</span>
</code></pre>
<h3>值交换</h3>
<p>使用按位异或 <code>^</code> 来完成值交换</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>;
<span class="hljs-keyword">var</span> b = <span class="hljs-number">8</span>;

a ^= b;
b ^= a;
a ^= b;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 8</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// 5</span>
</code></pre>
<p>异或还经常被用于加密。</p>
<h3>十进制转二进制</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> number = <span class="hljs-number">3</span>;
<span class="hljs-keyword">var</span> result = number.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>);

<span class="hljs-keyword">var</span> result2 = (<span class="hljs-number">14</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>);
<span class="hljs-comment">// &quot;1110&quot;</span>
</code></pre>
<h3>颜色值转换</h3>
<p>使用 <code>&amp;</code>、<code>&gt;&gt;</code>、<code>|</code> 来完成 RGB 值和 16 进制颜色值之间的转换</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">/**
 * 16进制颜色值转RGB
 * <span class="hljs-doctag">@param</span>  {<span class="hljs-type">String</span>} hex 16进制颜色字符串
 * <span class="hljs-doctag">@return</span> {<span class="hljs-type">String</span>}     RGB颜色字符串
 */</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">hexToRGB</span>(<span class="hljs-params">hex</span>) {
  <span class="hljs-keyword">var</span> hexx = hex.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;0x&#x27;</span>);
  <span class="hljs-keyword">var</span> r = hexx &gt;&gt; <span class="hljs-number">16</span>;
  <span class="hljs-keyword">var</span> g = (hexx &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>;
  <span class="hljs-keyword">var</span> b = hexx &amp; <span class="hljs-number">0xff</span>;
  <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">${r}</span>, <span class="hljs-subst">${g}</span>, <span class="hljs-subst">${b}</span>)`</span>;
}

<span class="hljs-comment">/**
 * RGB颜色转16进制颜色
 * <span class="hljs-doctag">@param</span>  {<span class="hljs-type">String</span>} rgb RGB进制颜色字符串
 * <span class="hljs-doctag">@return</span> {<span class="hljs-type">String</span>}     16进制颜色字符串
 */</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">RGBToHex</span>(<span class="hljs-params">rgb</span>) {
  <span class="hljs-keyword">var</span> rgbArr = rgb.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/[^\d]+/</span>);
  <span class="hljs-keyword">var</span> color = (rgbArr[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) | (rgbArr[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) | rgbArr[<span class="hljs-number">3</span>];
  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;#&#x27;</span> + color.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);
}

<span class="hljs-comment">// -------------------------------------------------</span>
<span class="hljs-title function_">hexToRGB</span>(<span class="hljs-string">&#x27;#ffffff&#x27;</span>); <span class="hljs-comment">// &#x27;rgb(255,255,255)&#x27;</span>
<span class="hljs-title class_">RGBToHex</span>(<span class="hljs-string">&#x27;rgb(255,255,255)&#x27;</span>); <span class="hljs-comment">// &#x27;#ffffff&#x27;</span>
</code></pre>
<h3>判断正负</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPos</span>(<span class="hljs-params">n</span>) {
  <span class="hljs-keyword">return</span> n === n &gt;&gt;&gt; <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;
}
<span class="hljs-title function_">isPos</span>(-<span class="hljs-number">1</span>); <span class="hljs-comment">// false</span>
<span class="hljs-title function_">isPos</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// true</span>
</code></pre>
<h3>判断符号是否相同</h3>
<p>通常, 比较两个数是否符号相同, 我们使用 <code>x * y &gt; 0</code> 来判断即可. 但如果利用按位异或 <code>^</code>, 运算速度将更快。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(-<span class="hljs-number">17</span> ^ (<span class="hljs-number">9</span> &gt; <span class="hljs-number">0</span>));
<span class="hljs-comment">// false</span>
</code></pre>
<h3>判断奇偶</h3>
<p>使用 <code>&amp;</code> 运算符判断一个数的奇偶</p>
<p>如果把 n 以二进制的形式展示的话，其实我们只需要判断最后一个二进制位是 1 还是 0 就行了。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 偶数 &amp; 1 = 0</span>
<span class="hljs-comment">// 奇数 &amp; 1 = 1</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span> &amp; <span class="hljs-number">1</span>); <span class="hljs-comment">// 0</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span> &amp; <span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span>
</code></pre>
<h3>判断索引是否存在</h3>
<p>这是一个很常用的技巧，如判断一个数是否在数组里面：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 如果url含有 ? 号，则后面拼上&amp;符号，否则加上?号</span>
url += ~url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) ? <span class="hljs-string">&#x27;&amp;&#x27;</span> : <span class="hljs-string">&#x27;?&#x27;</span>;
</code></pre>
<p>因为：<code>~-1 === 0</code></p>
<p>-1 在内存的表示的二进制符号全为 1，按位非之后就变成了 0. 进一步说明——1 在内存的表示为：<code>0000...0001</code>，第一位 0 表示符号位为正，如果是 -1 的话符号位为负用 1 表示 <code>1000...0001</code>，这个是 -1 的原码，然后符号位不动，其余位取反变成 <code>1111...1110</code>，这个就是 -1 的反码表示，反码再加 1 就变成了 <code>1111...1111</code>，这个就是 -1 的补码，负数在内存里面（机器数）使用补码表示，正数是用原码。所以全部都是 1 的机器数按位非之后就变成了全为 0。剩下的其它所有数按位非都不为 0，所以利用这个特性可以用来做 <code>indexOf</code> 的判断，这样代码看起来更简洁一点。</p>
<h3>标志位判断</h3>
<p>现在有个后台管理系统，操作权限分为一级、二级、三级管理员，其中一级管理员拥有最高的权限，二、三级较低，有些操作只允许一、二级管理员操作，有些操作只允许一、三级管理员操作。现在已经登陆的某权限的用户要进行某个操作，要用怎样的数据结构能很方便地判断他能不能进行这个操作呢？</p>
<p>我们用位来表示管理权限，一级用第 3 位，二级用第 2 位，三级用第 1 位，即一级的权限表示为 0b100 = 4，二级权限表示为 <code>0b010 = 2</code>，三级权限表示为 <code>0b001 = 1</code>。如果 A 操作只能由一级和二级操作，那么这个权限值表示为 <code>6 = 0b110</code>，它和一级权限与一下：<code>6 &amp; 4 = 0b110 &amp; 0b100 = 4</code>，得到的值不为 0，所以认为有权限，同理和二级权限与一下 <code>6 &amp; 2 = 2</code> 也不为 0，而与三级权限与一下 <code>6 &amp; 1 = 0</code>，所以三级没有权限。这里标志位的 1 表示打开，0 表示关闭。</p>
<p>这样的好处在于，我们可以用一个数字，而不是一个数组来表示某个操作的权限集，同时在进行权限判断的时候也很方便。</p>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="noopener noreferrer nofollow">📖 MDN：按位操作符</a></li>
<li><a href="https://juejin.im/post/5a98ea2f6fb9a028bb186f34" target="_blank" rel="noopener noreferrer nofollow">📝 位运算符在 JavaScript 中的妙用</a></li>
<li><a href="https://juejin.im/post/5a9ebc376fb9a028c6753d0e" target="_blank" rel="noopener noreferrer nofollow">📝 巧用 JavaScript 位运算</a></li>
<li><a href="https://github.com/lishengzxc/bblog/issues/6" target="_blank" rel="noopener noreferrer nofollow">📝 我们要不要在 JavaScript 中使用二进制位运算</a></li>
<li><a href="https://juejin.im/post/5cdce78d5188250d8b2df3a7" target="_blank" rel="noopener noreferrer nofollow">📝 位运算装逼指南</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","basic-concept","expressions","operators","update-expressions"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","basic-concept/expressions/operators/update-expressions","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","basic-concept/expressions/operators/update-expressions","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","0EPg3CHEU6Q-g4104TV5n",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:Tfc8,<h1>更新表达式</h1>
<p>更新表达式包括 <strong>前自增/自减运算符</strong> 和 <strong>后自增/自减运算符</strong>。</p>
<h2>示例</h2>
<h3>前自增</h3>
<p>前自增：先自增，再赋值</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> n = <span class="hljs-number">10</span>;

<span class="hljs-comment">// 前自增</span>
<span class="hljs-keyword">const</span> res = ++n;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);
<span class="hljs-comment">// 11</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// 11</span>
</code></pre>
<h3>前自减</h3>
<p>前自减：先自减，再赋值</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> n = <span class="hljs-number">10</span>;

<span class="hljs-comment">// 前自减</span>
<span class="hljs-keyword">const</span> res = --n;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// 9</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);
<span class="hljs-comment">// 9</span>
</code></pre>
<h3>后自增</h3>
<p>后自增：先赋值，再自增</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> n = <span class="hljs-number">10</span>;

<span class="hljs-comment">// 后自增</span>
<span class="hljs-keyword">const</span> res = n++;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// 10</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);
<span class="hljs-comment">// 11</span>
</code></pre>
<h3>后自减</h3>
<p>后自减：先赋值，再自减</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> n = <span class="hljs-number">10</span>;

<span class="hljs-comment">// 后自减</span>
<span class="hljs-keyword">const</span> res = n--;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// 10</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);
<span class="hljs-comment">// 9</span>
</code></pre>
<h2>异同对比</h2>
<p>前自增/前自减与后自增/后自减的异同点：</p>
<ul>
<li><strong>相同点</strong>：无论是前自增/前自减还是后自增/后自减，对于变量而言，没有区别，都是自身<code>+1</code>/<code>-1</code></li>
<li><strong>不同点</strong>：
<ul>
<li>前自增/前自减：先自增/自减（变量自身），后赋值（将变量的值赋值给自增表达式的结果）</li>
<li>后自增/后自减：先赋值，后自增/自减</li>
</ul>
</li>
</ul>
<blockquote>
<p>为什么后自增后自减优先级很高却后操作？</p>
</blockquote>
<p>前置操作返回加（减）1 的值，所以返回对象本身，这是左值（<code>++i</code>，先自增后操作）</p>
<p>后置操作为右值，同样对其操作数 <code>+1</code>/<code>-1</code>，但操作后产生操作数原来的、未修改的值为表达式的结果（可理解为 <code>i++</code> 为先操作，后自增）。实际上，由于后自增（减）优先级很高，因此会先自增（减），但在自增（减）前会创建一个副本，用来保存操作数原来的值，操作后会返回副本的值给表达式。</p>
<p>建议：只有在必要时才使用后置操作符，尽量使用前置操作符。因为前置操作需要做的工作更少，而后置操作必须先保存操作数原来的值，对于 int 型对象和指针，编译器会优化掉这项额外的工作，但对于更多复杂的迭代器类型，这种额外的工作可能会花费更大的代价。</p>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

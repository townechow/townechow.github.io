1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","basic-concept","statements-and-declarations","block"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","basic-concept/statements-and-declarations/block","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","basic-concept/statements-and-declarations/block","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","4BP6wSGmit0c18xCR-5vh",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1002,<h1>块语句</h1>
<p>块语句（Block）用于组合零个或多个语句。该块由一对大括号 <code>{}</code> 界定，块内形成块级作用域，<strong>块作用域内定义的变量将在离开块作用域后立即被回收</strong>。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>{
  <span class="hljs-title class_">StatementList</span>;
}
</code></pre>
<h2>块级作用域</h2>
<p>ES5  只有 <strong>全局作用域</strong> 和 <strong>函数作用域</strong>，没有块级作用域，这带来很多不合理的场景：</p>
<ul>
<li>内层变量可能会覆盖外层变量</li>
<li>用来计数的循环变量泄露为全局变量。</li>
</ul>
<p>因此，ES6  引入了块级作用域，明确允许在块级作用域之中声明函数。在 ES6  的块级作用域之中，函数声明语句的行为类似于  <code>let</code>，在块级作用域之外不可引用；但又有别于 <code>let</code>  命令，允许重复声明同名函数且存在函数变量提升。</p>
<p>块级作用域中的函数特征：</p>
<ul>
<li>允许在块级作用域内声明函数。</li>
<li>函数声明类似于 <code>var</code>，即会提升到全局作用域或函数作用域的头部。</li>
<li>内层作用域声明的函数不干扰外层作用域的函数。</li>
</ul>
<h3>var</h3>
<p>通过 <code>var</code> 声明的变量没有块级作用域。在语句块里声明的变量作用域是其所在的函数或者 <code>&lt;script&gt;</code> 标签内，你可以在语句块外面访问到它。</p>
<p>换句话说，语句块不会生成一个新的作用域。尽管单独的语句块是合法的语句，但在 JavaScript 中你不会想使用单独的语句块，因为它们不像你想象的 C 或 Java 中的语句块那样处理事物。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;
{
  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;
}
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 2</span>
</code></pre>
<h3>let 和 const</h3>
<p>相比之下，使用  <code>let</code> 和 <code>const</code> 声明的变量是有块级作用域的。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;
{
  <span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span>;
}
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1</span>
</code></pre>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;
{
  <span class="hljs-keyword">const</span> a = <span class="hljs-number">2</span>;
}
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1</span>
</code></pre>
<p>注意块级作用域里的常量声明 <code>const c = 2</code>  并不会抛出 <code>SyntaxError: Identifier 'a' has already been declared</code> 这样的语法错误，因为这是一个新的作用域。</p>
<h3>function</h3>
<p>函数声明同样被限制在声明它的语句块内。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title function_">foo</span>(<span class="hljs-string">&#x27;outside&#x27;</span>); <span class="hljs-comment">// TypeError: foo is not a function</span>
{
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">location</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo is called &#x27;</span> + location);
  }
  <span class="hljs-title function_">foo</span>(<span class="hljs-string">&#x27;inside&#x27;</span>); <span class="hljs-comment">// &#x27;foo is called inside&#x27;</span>
}
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

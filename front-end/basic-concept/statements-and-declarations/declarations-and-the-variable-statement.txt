1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","basic-concept","statements-and-declarations","declarations-and-the-variable-statement"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","basic-concept/statements-and-declarations/declarations-and-the-variable-statement","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","basic-concept/statements-and-declarations/declarations-and-the-variable-statement","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","pgSKVeFShFqSxHlW9xdln",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3511,<h1>变量声明</h1>
<p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用于保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。</p>
<h2>变量声明</h2>
<h3><code>var</code></h3>
<p><code>var</code> 语句用于声明一个变量，可选地将其初始化为一个值。</p>
<p>变量声明，无论发生在何处，都在执行任何代码之前进行处理。用 <code>var</code> 声明的变量的作用域是它当前的执行上下文，它可以是嵌套的函数，也可以是声明在任何函数外的变量。如果你重新声明一个 JavaScript 变量，它将不会丢失其值。</p>
<p>将赋值给未声明变量的值在执行赋值时将其隐式地创建为全局变量（它将成为全局对象的属性）。声明和未声明变量之间的差异是：</p>
<ul>
<li>声明变量的作用域限制在其声明位置的上下文中，而非声明变量总是全局的。</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">x</span>(<span class="hljs-params"></span>) {
  y = <span class="hljs-number">1</span>; <span class="hljs-comment">// 在严格模式下会抛出ReferenceError异常</span>
  <span class="hljs-keyword">var</span> z = <span class="hljs-number">2</span>;
}

<span class="hljs-title function_">x</span>();

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y); <span class="hljs-comment">// 打印&#x27;1&#x27;</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(z); <span class="hljs-comment">// 抛出ReferenceError: z未在x外部声明</span>
</code></pre>
<ul>
<li>声明变量在任何代码执行前创建，而非声明变量只有在执行赋值操作的时候才会被创建。</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 抛出ReferenceError</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;still going...&#x27;</span>); <span class="hljs-comment">// 永不执行</span>
</code></pre>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">var</span> a;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 打印&#x27;undefined&#x27;或&#x27;&#x27;（不同浏览器实现不同）</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;still going...&#x27;</span>); <span class="hljs-comment">// 打印&#x27;still going...&#x27;</span>
</code></pre>
<ul>
<li>声明变量是它所在上下文环境的<strong>不可配置属性</strong>，非声明变量是可配置的（如非声明变量可以被删除）。</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code>a = <span class="hljs-number">1</span>;
b = <span class="hljs-number">2</span>;

<span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>; <span class="hljs-comment">// 在严格模式下抛出TypeError，其他情况下执行失败并无任何提示。</span>
<span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b); <span class="hljs-comment">// 抛出ReferenceError	// &#x27;b&#x27;属性已经被删除。</span>
</code></pre>
<p>由于这三个差异，未能声明变量将很可能导致意想不到的结果。因此，建议始终声明变量，无论它们是在函数还是全局作用域内。 而在 ECMAScript 5 严格模式下，分配给未声明的变量会引发错误。</p>
<p>⚠️ 由于变量声明（以及其他声明）总是在任意代码执行之前处理的，所以在代码中的任意位置声明变量总是等效于在代码开头声明。这意味着变量可以在声明之前使用，这个行为叫做<a href="/front-end/core-modules/executable-code-and-execution-contexts/compilation/hoisting">提升（hoisting）</a>。提升就像是把所有的变量声明移动到函数或者全局代码的开头位置。</p>
<h3><code>let</code></h3>
<p><code>let</code> 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。</p>
<p><code>let</code> 语句所声明的变量有如下特征：</p>
<ol>
<li><code>let</code> 是块级变量，不存在于 <code>window</code> 对象下非全局属性，<code>window.变量名</code> 是找不到 <code>let</code> 声明的变量的</li>
<li><code>let</code> 不允许重复声明同名变量，会抛出异常，具有唯一性</li>
<li><code>let</code> 不允许未声明变量就使用，会抛出异常，只有执行该声明的时候才能使用</li>
<li><code>let</code> 有自己特色的闭包特性，比如在 <code>for</code> 语句循环中</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">a</span>); <span class="hljs-comment">// Output: undefined</span>
</code></pre>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span>;

<span class="hljs-keyword">let</span> b = <span class="hljs-number">3</span>; <span class="hljs-comment">// SyntaxError: Identifier &#x27;b&#x27; has already been declared</span>
</code></pre>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c); <span class="hljs-comment">// ReferenceError: c is not defined</span>

<span class="hljs-keyword">let</span> c = <span class="hljs-number">2</span>;
</code></pre>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) {
  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// Output: 1,2,3</span>
  });
}
</code></pre>
<h3>暂存性死区</h3>
<p>临时性死区：描述 <code>let</code> 和 <code>const</code> 声明的变量不提升的效果 。</p>
<p>在 ECMAScript 2015 中，<code>let</code> 绑定不受<strong>变量提升</strong>的约束，这意味着 <code>let</code> 声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 <code>ReferenceError</code>（而使用 <code>var</code> 声明变量则恰恰相反，该变量的值是 <code>undefined</code> ）。该变量处于从块开始到初始化处理的「暂存死区」。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>{
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar); <span class="hljs-comment">// undefined</span>
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo); <span class="hljs-comment">// ReferenceError: foo is not defined</span>
  <span class="hljs-keyword">var</span> bar = <span class="hljs-number">1</span>;
  <span class="hljs-keyword">let</span> foo = <span class="hljs-number">2</span>;
}
</code></pre>
<p>在 <code>switch</code> 声明中你可能会遇到这样的错误，因为它只有一个块.</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">switch</span> (x) {
  <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:
    <span class="hljs-keyword">let</span> foo;
    <span class="hljs-keyword">break</span>;
  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:
    <span class="hljs-keyword">let</span> foo; <span class="hljs-comment">// TypeError for redeclaration.</span>
    <span class="hljs-keyword">break</span>;
}
</code></pre>
<p>但是，重要的是要指出嵌套在 <code>case</code> 子句内的块将创建一个新的块作用域的词法环境，这不会产生上面显示的重新声明错误。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;

<span class="hljs-keyword">switch</span> (x) {
  <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: {
    <span class="hljs-keyword">let</span> foo;
    <span class="hljs-keyword">break</span>;
  }
  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: {
    <span class="hljs-keyword">let</span> foo;
    <span class="hljs-keyword">break</span>;
  }
}
</code></pre>
<p>拓展：<a href="https://segmentfault.com/a/1190000015603779" target="_blank" rel="noopener noreferrer nofollow">ES6 中 let 暂时性死区详解</a></p>
<h3><code>const</code></h3>
<p><code>const</code> 语句用于创建一个常量，一旦声明，常量的值就不能改变。其作用域可以是全局或本地声明的块。</p>
<p><code>const</code> 声明的常量具有以下特征：</p>
<ol>
<li><code>const</code> 与 <code>let</code> 一样，不可重复声明同名变量，具有唯一性</li>
<li><code>const</code> 与 <code>let</code> 一样，不存在变量提升，所声明的变量均存在暂时性死区</li>
<li><code>const</code> 与 <code>let</code> 一样，只在声明所在的块级作用域内有效</li>
<li><code>const</code> 声明的变量可以理解为只读变量，但是并非一成不变</li>
</ol>
<p><code>const</code> 声明创建一个值的只读引用。但这并不意味着它所持有值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。</p>
<ul>
<li>常量要求一个初始值</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> b; 	<span class="hljs-comment">// SyntaxError: missing = in const declaration</span>
</code></pre>
<ul>
<li>常量可以定义成对象</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> c = { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;value&#x27;</span> };

<span class="hljs-comment">// 重写对象和上面一样会失败</span>
c = { <span class="hljs-attr">OTHER_KEY</span>: <span class="hljs-string">&#x27;value&#x27;</span> };

<span class="hljs-comment">// 对象属性并不在保护的范围内，下面这个声明会成功执行</span>
c.<span class="hljs-property">key</span> = <span class="hljs-string">&#x27;otherValue&#x27;</span>;
</code></pre>
<ul>
<li>常量可以定义成数组</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> d = [];

d.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;A&#x27;</span>); <span class="hljs-comment">// [&quot;A&quot;]</span>

d = [<span class="hljs-string">&#x27;B&#x27;</span>]; <span class="hljs-comment">// TypeError: Assignment to constant variable.</span>
</code></pre>
<h2>变量作用域</h2>
<p>在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。</p>
<p>ECMAScript 6 之前的 JavaScript 没有 语句块 作用域；相反，语句块中声明的变量将成为语句块所在代码段的局部变量。例如，如下的代码将在控制台输出 5，因为 x 的作用域是声明了 x 的那个函数（或全局范围），而不是 <code>if</code> 语句块。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {
  <span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;
}
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 5</span>
</code></pre>
<p>如果使用 ECMAScript 6 中的 let 声明，上述行为将发生变化。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {
  <span class="hljs-keyword">let</span> y = <span class="hljs-number">5</span>;
}
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y); <span class="hljs-comment">// ReferenceError: y is not defined</span>
</code></pre>
<h2>变量的数据类型</h2>
<p>详情参考 <a href="/front-end/basic-concept/data-types/data-types">数据类型</a></p>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener noreferrer nofollow">ECMScript6 入门：let 和 const 命令</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

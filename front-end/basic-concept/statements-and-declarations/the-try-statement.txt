1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","basic-concept","statements-and-declarations","the-try-statement"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","basic-concept/statements-and-declarations/the-try-statement","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","basic-concept/statements-and-declarations/the-try-statement","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","j9dGNhPACwsJJWDcB_Nkb",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T21bb,<h1>try-catch 语句</h1>
<p><code>try...catch</code> 语句将能引发错误的代码放在 <code>try</code> 块中，并且对应一个响应，然后有异常被抛出。</p>
<p><code>try...catch</code> 语句包含了由一个或者多个语句组成的 <code>try</code> 块, 和至少一个 <code>catch</code> 子句或者一个 <code>finally</code> 子句的其中一个，或者两个兼有。</p>
<p>下面是三种形式的 <code>try</code> 声明：</p>
<ul>
<li><code>try...catch</code></li>
<li><code>try...finally</code></li>
<li><code>try...catch...finally</code></li>
</ul>
<h2>catch</h2>
<p><code>catch</code> 子句包含 <code>try</code> 块中抛出异常时要执行的语句。也就是，你想让<code>try</code> 语句中的执行操作成功，如果没成功，你想控制接下来发生的事情，这时你可以在 <code>catch</code> 语句中实现。</p>
<p>如果有在 <code>try</code> 块中有任何一个语句（或者从 <code>try</code> 块中调用的函数）抛出异常，控制立即转向 <code>catch</code> 子句。如果在 <code>try</code> 块中没有异常抛出，会跳过 <code>catch</code> 子句。</p>
<p>🌰 <strong>示例：</strong></p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">try</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1: start&#x27;</span>);

  <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;this is a error&#x27;</span>;

  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;2: end&#x27;</span>);
} <span class="hljs-keyword">catch</span> (err) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;3:&#x27;</span>, err);
}

<span class="hljs-comment">// 输出顺序：</span>
<span class="hljs-comment">// 1：start</span>
<span class="hljs-comment">// 3：this is a error</span>
</code></pre>
<p><code>catch</code> 块指定一个标识符（在上面的示例中为 <code>err</code>），该标识符保存由 <code>throw</code> 语句指定的值。<code>catch</code> 块是唯一的，因为当输入<code>catch</code> 块时，JavaScript 会创建此标识符，并将其添加到当前作用域；标识符仅在 <code>catch</code> 块执行时存在；<code>catch</code> 块执行完成后，标识符不再可用。</p>
<p>从结果可以得知，如果在 <code>try</code> 块中任何一个语句（或者从 <code>try</code> 块中调用的和你熟）抛出异常，控制立即转向 <code>catch</code> 子句。</p>
<h2>finally</h2>
<p><code>finally</code> 子句在 <code>try</code> 块和 <code>catch</code> 块之后执行但是在下一个 <code>try</code> 声明之前执行。</p>
<p>⚠️ <strong>注意</strong>： 无论是否有异常抛出或着是否被捕获它总是执行。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
  } <span class="hljs-keyword">catch</span> (err) {
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;
  } <span class="hljs-keyword">finally</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);
  }
}

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>());
<span class="hljs-comment">// 输出顺序：</span>
<span class="hljs-comment">// 3</span>
<span class="hljs-comment">// 1</span>
</code></pre>
<p>从结果来看，先执行 <code>finally</code> 再执行 <code>try</code> 里面 <code>return</code> 的值。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;this is a error&#x27;</span>
  } <span class="hljs-keyword">catch</span> (err) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, err)

    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>
  } finnally {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)
  }
}

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>())
<span class="hljs-comment">// 输出顺序：</span>
<span class="hljs-comment">// 1 this is a error</span>
<span class="hljs-comment">// 3</span>
<span class="hljs-comment">// 2</span>
</code></pre>
<p>先执行 <code>return</code> 之前的语句，再执行 <code>finnally</code>，最后返回 <code>return</code> 的值。</p>
<blockquote>
<p>⚠️ <strong>注意</strong>： 如果从 <code>finally</code> 块中返回一个值，那么这个值将会成为整个 <code>try-catch-finally</code> 的返回值，无论是否有 <code>return</code> 语句在 <code>try</code> 和 <code>catch</code> 中。这包括在 <code>catch</code> 块里抛出的异常。</p>
</blockquote>
<h2>嵌套捕获</h2>
<p>你可以嵌套一个或者更多的<code>try</code>语句。如果内部的<code>try</code>语句没有<code>catch</code>子句，那么将会进入包裹它的<code>try</code>语句的<code>catch</code>子句。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;this is a error&#x27;</span>;
  } <span class="hljs-keyword">finally</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);
  }
} <span class="hljs-keyword">catch</span> (err) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, err);
}

<span class="hljs-comment">// 输出顺序:</span>
<span class="hljs-comment">// 1</span>
<span class="hljs-comment">// 2 this is a error</span>
</code></pre>
<p>在 <code>try</code> 块中嵌套 <code>try-catch-finnally</code> 语句。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;this is a error&#x27;</span>;
  } <span class="hljs-keyword">catch</span> (err) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-number">1</span>, err);

    <span class="hljs-keyword">throw</span> err;
  } <span class="hljs-keyword">finally</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);

    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;
  }
} <span class="hljs-keyword">catch</span> (err) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-number">4</span>, err.<span class="hljs-property">message</span>);
}

<span class="hljs-comment">// 输出顺序：</span>
<span class="hljs-comment">// 1 this is a error</span>
<span class="hljs-comment">// 2</span>
</code></pre>
<p>因为 <code>finally</code> 块里的 <code>return</code> 语句，外部的 <code>this is a error</code> 异常没有抛出。从 <code>catch</code> 块返回的值同样适用。</p>
<h2>异常标识符</h2>
<p>当 <code>try</code> 块中的抛出一个异常时， <em><code>exception_var</code></em>（如 <code>catch (err)</code> 中的 <code>err</code> ）用来保存被抛出声明指定的值。你可以用这个标识符来获取关于被抛出异常的信息。</p>
<p>这个标识符是 <code>catch</code> 子语句内部的。换言之，当进入 <code>catch</code> 子语句时标识符创建，<code>catch</code> 子语句执行完毕后，这个标识符将不再可用。</p>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

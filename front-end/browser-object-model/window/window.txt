1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","browser-object-model","window","window"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/window/window","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/window/window","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","U6qpU7iLHlkW8bfLXxtjI",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T4434,<h1>Window 对象</h1>
<p>window 对象有一系列的属性，这些属性本身也是对象。</p>
<h2>Window 对象的属性</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>applicationCache（只读）</td>
<td>返回该 window 中的应用缓存对象的一个引用。</td>
</tr>
<tr>
<td>caches（只读）</td>
<td>返回了与当前上下文紧密相关的 CacheStorage 对象。</td>
</tr>
<tr>
<td>❗️closed（只读）</td>
<td>指示引用窗口关闭或没有。</td>
</tr>
<tr>
<td>❗️console</td>
<td>window.console 提供了向浏览器控制台输出日志信息的方法（log、info、warn、error等）。</td>
</tr>
<tr>
<td>crypto</td>
<td>window.crypto 只读属性返回与全局对象关联的 Crypto 对象。 此对象允许网页访问某些加密相关服务。</td>
</tr>
<tr>
<td>customElements</td>
<td>返回一个 CustomElementRegistry 对象的引用，可以用于注册一个新的 custom elements，并且可以用于获取之前定义过的自定义元素的信息。</td>
</tr>
<tr>
<td>❗️devicePixelRatio</td>
<td>此属性返回当前显示设备的物理像素分辨率与 CSS 像素分辨率的比值。</td>
</tr>
<tr>
<td>document</td>
<td>指向当前窗口内的文档节点。</td>
</tr>
<tr>
<td>❗️frameElement</td>
<td>返回嵌入当前 window 对象的元素（比如 <code>&lt;iframe&gt;</code> 或者 <code>&lt;object&gt;</code> ），如果当前 window 对象已经是顶层窗口，则返回 null。</td>
</tr>
<tr>
<td>frames</td>
<td>返回当前窗口，一个类数组对象，列出了当前窗口的所有直接子窗口。</td>
</tr>
<tr>
<td>❗️fullScreen</td>
<td>这个属性表明了窗口是否处于全屏模式下。f11全屏切换。</td>
</tr>
<tr>
<td>❗️history（只读）</td>
<td>用来获取History对象的引用，History对象提供了操作浏览器会话历史（浏览器地址栏中访问的页面，以及当前页面中通过框架加载的页面）的接口。</td>
</tr>
<tr>
<td>❗️indexDB（只读）</td>
<td>indexedDB 是 window的一个只读属性，它集成了为应用程序提供异步访问索引数据库的功能的机制。</td>
</tr>
<tr>
<td>❗️innerHeight（只读）</td>
<td>浏览器窗口的视口（viewport）高度（以像素为单位），如果存在滚动条，则包括它。</td>
</tr>
<tr>
<td>❗️innerWidth（只读）</td>
<td>浏览器视口（viewport）宽度（单位：像素），如果存在滚动条则包括它。</td>
</tr>
<tr>
<td>isSecureContext（只读）</td>
<td>判断上下文是否能够使用安全上下文的特征的只读属性。</td>
</tr>
<tr>
<td>length（只读）</td>
<td>返回当前窗口中包含的框架数量（框架包括 frame 和 iframe 两种元素）。</td>
</tr>
<tr>
<td>❗️localStorage</td>
<td>只读的 localStorage 允许你访问一个 Document 的远端（origin）对象 Storage。数据存储为跨浏览器会话。</td>
</tr>
<tr>
<td>❗️location（只读）</td>
<td>返回一个 Location 对象，其中包含有关文档当前位置的信息。</td>
</tr>
<tr>
<td>locationbar</td>
<td>返回一个可以检查 visibility 属性的 locationbar 对象。</td>
</tr>
<tr>
<td>personalbar</td>
<td>personalbar 属性本身也是一个对象，用于访问其自身的 visible 属性来确定个人栏是否可见。</td>
</tr>
<tr>
<td>menubar</td>
<td>返回一个可以检测 visibility 属性的 menubar 对象。</td>
</tr>
<tr>
<td>messageManager</td>
<td>返回这个窗口的消息管理器对象。</td>
</tr>
<tr>
<td>❗️name</td>
<td>获取/设置窗口的名称。</td>
</tr>
<tr>
<td>❗️navigator</td>
<td>返回一个 Navigator 对象的引用,可以用它来查询一些关于运行当前脚本的应用程序的相关信息。</td>
</tr>
<tr>
<td>onabort</td>
<td>一个处理发送到 Window 中断事件的事件处理。</td>
</tr>
<tr>
<td>onbeforeprint</td>
<td>打印之前的处理函数。</td>
</tr>
<tr>
<td>onafterprint</td>
<td>打印之后的处理函数。</td>
</tr>
<tr>
<td>❗️onanimationcancel</td>
<td>animationcancel 是一个事件处理操作，这个事件在 CSS Animation 属性意外中断时派发出来。</td>
</tr>
<tr>
<td>❗️onanimationend</td>
<td>当 CSS 动画到达其活动期的结束时发送此事件。</td>
</tr>
<tr>
<td>❗️onanimationiteration</td>
<td>当动画迭代时触发。</td>
</tr>
<tr>
<td>❗️onappinstalled</td>
<td>Window 对象的 onappinstalled 属性用于处理 appinstalled 事件处理程序。 PWA 成功安装时被触发一次。</td>
</tr>
<tr>
<td>onbeforeinstallprompt</td>
<td>Window.onbeforeinstallprompt 属性是一个事件处理程序，用于处理一个beforeinstallprompt，当一个Web清单存在时，它将在移动设备上发送，但是在提示用户将网站保存到主屏幕之前。</td>
</tr>
<tr>
<td>onbeforeunload</td>
<td>当窗口即将被卸载（关闭）时，会触发该事件。此时页面文档依然可见，且该事件的默认动作可以被取消。</td>
</tr>
<tr>
<td>onclose</td>
<td>当在 Window 对象上触发 close 事件时的事件处理器。</td>
</tr>
<tr>
<td>oncontextmenu</td>
<td>获取或设置当前窗口 Contextmenu 事件的事件处理函数。除非默认行为已经阻止了，否则右键菜单会被激活。</td>
</tr>
<tr>
<td>ondevicelight</td>
<td>事件在设备的光传感器检测到周围环境光的强度发生变化时触发。</td>
</tr>
<tr>
<td>ondevicemotion</td>
<td>设配移动时触发。</td>
</tr>
<tr>
<td>ondeviceorientation</td>
<td>设备方向改变时触发。</td>
</tr>
<tr>
<td>ondeviceorientationabsolute</td>
<td></td>
</tr>
<tr>
<td>ondeviceproximity</td>
<td>接近或远离设备时触发。</td>
</tr>
<tr>
<td>onerror</td>
<td>加载一个全局的 error 事件处理函数可用于自动收集错误报告。</td>
</tr>
<tr>
<td>ongamepadconnected</td>
<td>手柄连接时触发。</td>
</tr>
<tr>
<td>ongamepaddisconnected</td>
<td>手柄断开时触发。</td>
</tr>
<tr>
<td>ongotpointercapture</td>
<td>gotpointercapture 事件类型触发。</td>
</tr>
<tr>
<td>onlostpointercapture</td>
<td>gotpointercapture 事件类型触发。</td>
</tr>
<tr>
<td>❗️onhashchange</td>
<td>当 一个窗口的哈希改变时就会触发 hashchange 事件（查看 location.hash）</td>
</tr>
<tr>
<td>onlanguagechange</td>
<td>这样的事件在浏览器通知更佳的语言列表已被更新后被触发。</td>
</tr>
<tr>
<td>onloadstart</td>
<td>在 onload 之前触发。</td>
</tr>
<tr>
<td>❗️onload</td>
<td>当资源已加载时被触发。</td>
</tr>
<tr>
<td>onloadend</td>
<td>onloadend 属性表示当代码被调用时优先级提高，资源的加载事件触发时调用处理函数。</td>
</tr>
<tr>
<td>onunload</td>
<td>当页面关闭后，会触发 unload 事件。</td>
</tr>
<tr>
<td>onmessage</td>
<td>onmessage 属性是当对象接收到 message 事件时被调用。</td>
</tr>
<tr>
<td>onmessageerror</td>
<td>一个 messageerror 事件发送给 window。</td>
</tr>
<tr>
<td>onpopstate</td>
<td>Window.onpopstate 是 popstate 事件在 Window 对象上的事件处理程序。</td>
</tr>
<tr>
<td>onrejectionhandled</td>
<td>Promise 拒绝时触发。</td>
</tr>
<tr>
<td>onreset</td>
<td>当收到一个 reset 事件时触发。</td>
</tr>
<tr>
<td>❗️onresize</td>
<td>可以用来获取或设置当前窗口的 resize 事件的事件处理函数。</td>
</tr>
<tr>
<td>onselect</td>
<td>onselect 用来获取或设置当前窗口的 select 事件的事件处理函数。</td>
</tr>
<tr>
<td>❗️onstorage</td>
<td>当存储域发生改变时会触发事件。</td>
</tr>
<tr>
<td>❗️opener</td>
<td>如果当前窗口是由另一个窗口打开的，Window.opener 保留了那个窗口的引用. 如果当前窗口不是由其他窗口打开的, 则该属性返回 null。</td>
</tr>
<tr>
<td>❗️origin（只读）</td>
<td>返回全局范围的 origin，序列化为一个字符串。域的概念。</td>
</tr>
<tr>
<td>❗️outerHeight（只读）</td>
<td>为窗口的外层的高度（包括导航栏+状态栏等）。</td>
</tr>
<tr>
<td>❗️outerWidth</td>
<td>是窗口的外层的宽度。</td>
</tr>
<tr>
<td>❗️parent</td>
<td>返回当前窗口的父窗口对象。如果一个窗口没有父窗口，则它的 parent 属性为自身的引用。</td>
</tr>
<tr>
<td>performance</td>
<td>Web Performance API 允许网页访问某些函数来测量网页和 Web 应用程序的性能，包括 Navigation TimingAPI 和高分辨率时间数据。</td>
</tr>
<tr>
<td>❗️screen</td>
<td>返回当前 window 的 screen 对象。screen 对象实现了 Screen 接口，它是个特殊的对象，返回当前渲染窗口中和屏幕有关的属性。</td>
</tr>
<tr>
<td>❗️screenX</td>
<td>返回浏览器左边界到操作系统桌面左边界的水平距离。</td>
</tr>
<tr>
<td>❗️screenY</td>
<td>返回浏览器顶部距离系统桌面顶部的垂直距离。</td>
</tr>
<tr>
<td>scrollbars</td>
<td>返回滚动条对象，可以检查其可见性。</td>
</tr>
<tr>
<td>scrollMaxX</td>
<td>返回水平最大可以 scroll 的长度，单位像素。</td>
</tr>
<tr>
<td>scrollMaxY</td>
<td>返回垂直最大可以 scroll 的长度，单位像素。</td>
</tr>
<tr>
<td>❗️scrollX</td>
<td>返回文档/页面水平方向滚动的像素值。</td>
</tr>
<tr>
<td>❗️scrollY</td>
<td>返回文档/页面垂直方向滚动的像素值。</td>
</tr>
<tr>
<td>❗️self</td>
<td>返回一个指向当前 window 对象的引用。</td>
</tr>
<tr>
<td>❗️sessionStorage</td>
<td>sessionStorage 属性允许你访问一个 session Storage对象。</td>
</tr>
<tr>
<td>speechSynthesis</td>
<td>返回一个 speechSynthesis 对象。</td>
</tr>
<tr>
<td>status</td>
<td>设置浏览器底部状态栏的文本。</td>
</tr>
<tr>
<td>statusbar</td>
<td>返回一个 statusbar 对象。</td>
</tr>
<tr>
<td>toolbar</td>
<td>返回一个 toolbar 对象。</td>
</tr>
<tr>
<td>❗️top</td>
<td>返回窗口体系中的最顶层窗口的引用。</td>
</tr>
<tr>
<td>URL</td>
<td>window.URL 属性返回一个对象，它提供了用于创建和管理对象URLs的静态方法。</td>
</tr>
<tr>
<td>visualViewport</td>
<td>返回视觉窗口对象。</td>
</tr>
<tr>
<td>❗️PushManager</td>
<td>提供接收服务器及请求 url 的推送功能的一些方法。PWA 推功能</td>
</tr>
<tr>
<td>window</td>
<td>window 对象的 window 属性指向这个 window 对象本身。</td>
</tr>
</tbody>
</table>
<h2>Window 对象的方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>❗️<code>alert(message)</code></td>
<td>浏览自带的警告对话框。</td>
</tr>
<tr>
<td><code>btoa(str)</code></td>
<td>从 String 对象中创建一个 base-64 编码的 ASCII 字符串，其中字符串中的每个字符都被视为一个二进制数据字节。</td>
</tr>
<tr>
<td><code>atob(code)</code></td>
<td>对用 base-64 编码过的字符串进行解码。</td>
</tr>
<tr>
<td><code>blur()</code></td>
<td>将焦点移出顶层窗口。</td>
</tr>
<tr>
<td>❗️<code>requestAnimationFrame(callBack)</code></td>
<td>告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。</td>
</tr>
<tr>
<td>❗️<code>cancelAnimationFrame(requestID)</code></td>
<td>取消一个先前通过调用 <code>window.requestAnimationFrame()</code> 方法添加到计划中的动画帧请求。</td>
</tr>
<tr>
<td><code>requestIdleCallback(callback[, options])</code></td>
<td><code>window.requestIdleCallback()</code> 会在浏览器空闲时期依次调用函数， 这就可以让开发者在主事件循环中执行后台或低优先级的任务，而且不会对像动画和用户交互这样延迟触发而且关键的事件产生影响。</td>
</tr>
<tr>
<td><code>cancelIdleCallback(handle)</code></td>
<td>window.cancelIdleCallback() 方法用于取消之前调用window.requestIdleCallback() 的回调。</td>
</tr>
<tr>
<td><code>setImmediate(func)</code></td>
<td>该方法用来把一些需要长时间运行的操作放在一个回调函数里，在浏览器完成后面的其他语句后,就立刻执行这个回调函数。</td>
</tr>
<tr>
<td><code>clearImmediate(immediateID)</code></td>
<td>此方法用来清除 <code>window.setImmediate</code>。</td>
</tr>
<tr>
<td>❗️<code>setInterval(callBack, delay)</code></td>
<td>重复调用一个函数或执行一个代码段，在每次调用之间具有固定的时间延迟。</td>
</tr>
<tr>
<td>❗️<code>clearInterval(intervalID)</code></td>
<td>取消用 setInterval 设置的重复定时任务。</td>
</tr>
<tr>
<td>❗️<code>setTimeout(code[, delay])</code></td>
<td>delay 时间之后执行 code，code 可为 string 或 function。</td>
</tr>
<tr>
<td>❗️<code>clearTimeout(timeoutID)</code></td>
<td>清除由 window.setTimeout() 设置的延时定时器。</td>
</tr>
<tr>
<td>❗️<code>close()</code></td>
<td>关闭当前窗口。</td>
</tr>
<tr>
<td>❗️<code>confirm(message)</code></td>
<td>window.confirm() 方法显示一个具有一个可选消息和两个按钮(确定和取消)的模态对话框 。</td>
</tr>
<tr>
<td><code>createImageBitmap(image, sx, sy, sw, sh[, options])</code></td>
<td>接收图片源，并返回 ImageBitmap 的 Promise 对象。</td>
</tr>
<tr>
<td>❗️<code>event</code></td>
<td>IE 专用，表示正在处理的事件对象。</td>
</tr>
<tr>
<td>❗️<code>fetch(input[, init])</code></td>
<td>用于发起获取资源的请求。它返回一个 Promise 对象。</td>
</tr>
<tr>
<td><code>focus()</code></td>
<td>求将窗口显示在前（靠近屏幕），这可能由于用户设置而失败，并且该窗口在方法返回之前不能保证会显示在最前。</td>
</tr>
<tr>
<td><code>getAttention()</code></td>
<td>试图获取用户的注意力。</td>
</tr>
<tr>
<td>❗️<code>getComputedStyle(element, [pseudoElt])</code></td>
<td>给出应用活动样式表后的元素的所有 CSS 属性的值，并解析这些值可能包含的任何基本计算。</td>
</tr>
<tr>
<td><code>getSelection()</code></td>
<td>返回一个  Selection 对象，表示用户选择的文本范围或光标的当前位置。</td>
</tr>
<tr>
<td><code>matchMedia(mediaQueryString)</code></td>
<td>返回一个新的 MediaQueryList 对象，表示指定的媒体查询字符串解析后的结果。</td>
</tr>
<tr>
<td><code>minimize()</code></td>
<td>窗口最小化。</td>
</tr>
<tr>
<td>❗️<code>moveBy(deltaX, deltaY)</code></td>
<td>根据指定的值，移动当前窗口。</td>
</tr>
<tr>
<td>❗️<code>moveTo(x, y)</code></td>
<td>将当前窗口移动到指定的坐标位置。</td>
</tr>
<tr>
<td>❗️<code>open(strUrl, windowName, [strWindowFeatures])</code></td>
<td>根据指定的参数，将一个资源加载到一个新的浏览上下文（如一个窗口）或一个已经存在的浏览上下文中。</td>
</tr>
<tr>
<td>❗️<code>postMessage(message, targetOrigin, [transfer])</code></td>
<td>可以安全地实现跨源通信。</td>
</tr>
<tr>
<td><code>print()</code></td>
<td>打开打印对话框打印当前文档。</td>
</tr>
<tr>
<td>❗️<code>prompt(text, value)</code></td>
<td>显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字。</td>
</tr>
<tr>
<td>❗️<code>resizeBy(xDelta, yDelta)</code></td>
<td>调整窗口大小。</td>
</tr>
<tr>
<td>❗️<code>resizeTo(aWidth, aHeight)</code></td>
<td>动态调整窗口的大小。</td>
</tr>
<tr>
<td>❗️<code>scroll(x-coord, y-coord)</code></td>
<td>滚动窗口至文档中的特定位置。</td>
</tr>
<tr>
<td>❗️<code>scrollBy(X, Y)</code></td>
<td>在窗口中按指定的距离滚动文档。</td>
</tr>
<tr>
<td><code>scrollByLines(num)</code></td>
<td>按给定的行数滚动文档。</td>
</tr>
<tr>
<td><code>scrollByPages(pages)</code></td>
<td>在当前文档页面按照指定的页数翻页。</td>
</tr>
<tr>
<td>❗️<code>scrollTo(x-coord, y-coord)</code></td>
<td>滚动到文档中的某个坐标。</td>
</tr>
<tr>
<td><code>stop()</code></td>
<td>此方法用于阻止页面资源加载。</td>
</tr>
</tbody>
</table>
<h2>全局作用域</h2>
<p>由于 <code>window</code> 对象同时扮演着 ECMAScript 中 Global 对象的角色，因此所有在全局作用域中声明的变量、函数都会变成 <code>window</code> 对象的属性和方法。</p>
<p>抛开全局变量会成为 <code>window</code> 对象的属性不谈，定义全局变量与在 Window 对象上直接定义属性还是有一点差别：全局变量不能通过 <code>delete</code> 操作符删除，而直接在 <code>window</code> 对象上的定义的属性可以。</p>
<p>这是因为，通过 <code>var</code> 语句添加的 <code>window</code> 属性有一个名为 <code>[[Configurable]]</code> 的特性，这个特性的值被设置为 <code>false</code>，因此这样定义的属性不可以通过 <code>delete</code> 操作符删除。IE8 及更早版本在遇到 <code>delete</code> 删除 <code>window</code> 属性的语句时，不管该属性最初是如何创建的，都会抛出错误，以示警告。IE9 及更高版本不会抛出错误。</p>
<p>尝试访问未声明的变量会抛出错误，但是通过查询 <code>window</code> 对象，可以知道某个可能未声明的变量是否存在。</p>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Window 对象"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

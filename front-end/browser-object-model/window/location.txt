1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","browser-object-model","window","location"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/window/location","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/window/location","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","IAmA5Fi_cOASURzN501dX",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2bd0,<h1>Location 对象</h1>
<p>使用 <code>Location</code> 对象可以通过很多方式来改变浏览器的位置。</p>
<h2>location.assign()</h2>
<pre class="hljs"><code class="language-js">location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&#x27;https://github.com&#x27;</span>);
</code></pre>
<p>使用 <code>assign()</code> 方法并为其传递一个 URL，可以立即打开新 URL 并在浏览器的历史记录中生成一条记录。如果是将 <code>location.href</code> 或 <code>window.location</code> 设置为一个 URL 值，相当于调用 <code>assign()</code> 方法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&#x27;https://github.com&#x27;</span>;
location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;https://github.com&#x27;</span>;
</code></pre>
<p>在这些改变浏览器位置的方法中，最常用的是设置  <code>location.href</code>  属性。</p>
<p>另外，修改  <code>location</code>  对象的其他属性也可以改变当前加载的页面。下面的例子展示了通过将  <code>hash</code>、<code>search</code>、<code>hostname</code>、<code>pathname</code>  和  <code>port</code>  属性设置为新值来改变 URL。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 假设初始 URL 为 http://github.com/about/</span>
location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://github.com/about/&#x27;</span>;

<span class="hljs-comment">// 将 URL 修改为 &quot;http://github.com/about/#ds-thread&quot;</span>
location.<span class="hljs-property">hash</span> = <span class="hljs-string">&#x27;#ds-thread&#x27;</span>;

<span class="hljs-comment">// 将 URL 修改为 &quot;http://github.com/about/?search=123&quot;</span>
location.<span class="hljs-property">search</span> = <span class="hljs-string">&#x27;?search=123&#x27;</span>;

<span class="hljs-comment">// 将 URL 修改为 &quot;https://gist.github.com/&quot;</span>
location.<span class="hljs-property">hostname</span> = <span class="hljs-string">&#x27;gist.github.com&#x27;</span>;

<span class="hljs-comment">// 将 URL 修改为 &quot;https://gist.github.com/u/10086&quot;</span>
location.<span class="hljs-property">pathname</span> = <span class="hljs-string">&#x27;u/stone0090&#x27;</span>;

<span class="hljs-comment">// 将 URL 修改为 &quot;https://gist.github.com:8080/&quot;</span>
location.<span class="hljs-property">port</span> = <span class="hljs-number">8080</span>;
</code></pre>
<p>当通过上述任何一种方式修改 URL 之后，浏览器的历史记录中就会生成一条新记录，因此用户通过单击“后退”按钮都会导航到前一个页面。要禁用这种行为，可以使用  <code>replace()</code>  方法。</p>
<h2>location.replace()</h2>
<p><code>location.replace()</code> 方法接收一个参数即要导航到的 URL，结果虽然会导致浏览器位置改变，但不会在历史记录中生成新记录，也就是说用户不能回到前一个页面（只有 chrome 下有效）。</p>
<pre class="hljs"><code class="language-js">location.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;http://github.com&#x27;</span>);
</code></pre>
<h2>location.reload()</h2>
<p><code>reload()</code> 方法用于重新加载当前显示的页面。如果调用 <code>reload()</code> 方法时不传递任何参数，页面会以最有效的方式重新加载。也就是说，如果页面自上次请求以来并没有改变过，页面就会从浏览器缓存中重新加载。如果要强制从服务器重新加载，则需要传递参数 <code>true</code>。</p>
<p>位于 <code>reload()</code> 调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素，为此，最好将 <code>reload()</code> 放在代码的最后一行</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 重新加载（有可能从缓存中加载）</span>
location.<span class="hljs-title function_">reload</span>();

<span class="hljs-comment">// 重新加载（从服务器重新加载）</span>
location.<span class="hljs-title function_">reload</span>(<span class="hljs-literal">true</span>);
</code></pre>
<p>千万不要在页面中直接使用 <code>location.reload()</code> 方法，此方法会造成页面的无限刷新。因为页面刚加载完成，遇到该方法，则重新加载页面，又遇到该方法，则又加载页面，从而造成页面的无限刷新。</p>
<p>位于  <code>reload()</code>  调用之后的代码可能会也可能不会执行，这要取决于网络延迟或系统资源等因素。为此，最好将  <code>reload()</code>  放在代码的最后一行。</p>
<h1>Location 对象的属性</h1>
<p><code>location</code> 对象提供了与当前窗口中加载的文档有关的信息，还提供了一些导航功能。</p>
<p>事实上，<code>location</code> 对象是很特别的一个对象，因为它既是 <code>window</code> 对象的属性，也是 <code>document</code> 对象的属性；换句话说，<code>window.location</code> 和 <code>document.location</code> 引用的是同一个对象。</p>
<p><code>location</code> 对象的用处不只表现在它保存着当前文档的信息，还表现在它将 URL 解析为独立的片段，让开发人员可以通过不同的属性访问这些片段。</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">例子</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">href</td>
<td style="text-align:center"><code>https://www.baidu.com</code></td>
<td style="text-align:center">返回当前加载页面的完整 URL。而 <code>location</code> 对象的 <code>toString()</code> 方法也返回这个值。</td>
</tr>
<tr>
<td style="text-align:center">protocol</td>
<td style="text-align:center"><code>&quot;https:&quot;</code></td>
<td style="text-align:center">返回页面使用的协议。</td>
</tr>
<tr>
<td style="text-align:center">host</td>
<td style="text-align:center"><code>www.baidu.com:8080</code></td>
<td style="text-align:center">返回服务器名称和端口号（如果有）。</td>
</tr>
<tr>
<td style="text-align:center">hostname</td>
<td style="text-align:center"><code>&quot;www.baidu.com&quot;</code></td>
<td style="text-align:center">返回不带端口号的服务器名称。</td>
</tr>
<tr>
<td style="text-align:center">port</td>
<td style="text-align:center"><code>&quot;8080&quot;</code></td>
<td style="text-align:center">返回 URL 中指定的端口号。如果 URL 中不包含端口号，则这个属性返回空字符串。</td>
</tr>
<tr>
<td style="text-align:center">pathname</td>
<td style="text-align:center"><code>&quot;/src&quot;</code></td>
<td style="text-align:center">返回 URL 中的目录和（或）文件名（<code>/</code>以斜杆开头）</td>
</tr>
<tr>
<td style="text-align:center">search</td>
<td style="text-align:center"><code>&quot;?js=javascript&quot;</code></td>
<td style="text-align:center">返回 URL 的查询字符串（<code>?</code> 以问号开头）</td>
</tr>
<tr>
<td style="text-align:center">hash</td>
<td style="text-align:center"><code>&quot;#contents&quot;</code></td>
<td style="text-align:center">返回 URL 中的 hash，如果 URL 中不包含散列，则返回空字符串（<code>#</code> 以井号开头跟零或多个字符串）</td>
</tr>
<tr>
<td style="text-align:center">origin</td>
<td style="text-align:center"><code>&quot;https://www.baidu.com&quot;</code></td>
<td style="text-align:center">页面来源的域名的标准形式</td>
</tr>
</tbody>
</table>
<blockquote>
<p>⚠️ 注意：如果 URL 中 <code>?</code> 之前有一个 <code>#</code>，比如 <code>#text?q=test</code>，那么， <code>location.search</code> 得到的就是空字符串，因为 <code>location.search</code>只取 <code>?</code> 后面和 <code>#</code> 前面的内容。</p>
</blockquote>
<h3>查询字符串参数</h3>
<p>虽然通过上面的属性可以访问到 <code>location</code> 对象的大多数信息，但其中访问 URL 包含的查询字符串的属性并不方便。尽管 <code>location.search</code> 返回从问号到 URL 末尾的所有内容，但却没有办法逐个访问其中的每个查询字符串参数。为此，可以像下面这样创建一个函数，用以解析查询字符串，然后返回包含所有参数的一个对象。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">/*
 * 这个函数用来解析来自URL的查询串中的name=value参数对
 * 它将name=value对存储在一个对象的属性中，并返回该对象
 * 这样来使用它
 *
 * var args = urlArgs();	// 从URL中解析参数
 * var q = args.q || &quot;&quot;;	// 如果参数定义了的话就使用参数；否则使用一个默认值
 * var n = args.n ? parseInt(args.n) : 10;
 */</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">urlArgs</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// 定义一个空对象</span>
  <span class="hljs-keyword">var</span> args = {};

  <span class="hljs-comment">// 查找到查询串，并去掉问号</span>
  <span class="hljs-keyword">var</span> query = location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>);

  <span class="hljs-comment">// 根据 &amp; 符号将查询字符串分隔开</span>
  <span class="hljs-keyword">var</span> pairs = query.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; pairs.<span class="hljs-property">length</span>; i++) {
    <span class="hljs-comment">// 查找&quot;name=value&quot;</span>
    <span class="hljs-keyword">const</span> pos = pairs[i].<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;=&#x27;</span>);
    <span class="hljs-comment">// 如果没有找到的话，就跳过</span>
    <span class="hljs-keyword">if</span> (pos == -<span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;
    <span class="hljs-comment">// 提取name</span>
    <span class="hljs-keyword">const</span> name = pairs[i].<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, pos);
    <span class="hljs-comment">// 提取value</span>
    <span class="hljs-keyword">let</span> value = pairs[i].<span class="hljs-title function_">substring</span>(pos + <span class="hljs-number">1</span>);
    <span class="hljs-comment">// 对value进行解码</span>
    value = <span class="hljs-built_in">decodeURIComponent</span>(value);
    <span class="hljs-comment">// 存储为属性</span>
    args[name] = value;
  }
  <span class="hljs-keyword">return</span> args;
}
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Location 对象"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","browser-object-model","window","navigator"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/window/navigator","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/window/navigator","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","I89bXm_rfLJRZ81OWqNkv",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T362b,<h1>Navigator 对象</h1>
<h2>Navigator Geolocation API</h2>
<p><strong>地理位置 Geolocation API</strong>  允许用户向 Web 应用程序提供他们的位置。出于隐私考虑，报告地理位置前会先请求用户许可。</p>
<p>地理位置 API 通过 <code>navigator.geolocation</code> 提供。</p>
<p>如果该对象存在，那么地理位置服务可用。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;geolocation&#x27;</span> <span class="hljs-keyword">in</span> navigator) {
  <span class="hljs-comment">// 地理位置服务可用</span>
} <span class="hljs-keyword">else</span> {
  <span class="hljs-comment">// 地理位置服务不可用</span>
}
</code></pre>
<h3>获取当前定位</h3>
<p>您可以调用  <code>getCurrentPosition()</code> 函数获取用户当前定位位置。这会异步地请求获取用户位置，并查询定位硬件来获取最新信息。当定位被确定后，定义的回调函数就会被执行。您可以选择性地提供第二个回调函数，当有错误时会被执行。第三个参数也是可选的，您可以通过该对象参数设定最长可接受的定位返回时间、等待请求的时间和是否获取高精度定位。</p>
<blockquote>
<p>⚠️ 注意：默认情况下，<code>getCurrentPosition()</code>  会尽快返回一个低精度结果，这在您不关心准确度只关心快速获取结果的情况下很有用。有 GPS 的设备可能需要一分钟或更久来获取 GPS 定位，在这种情况下  <code>getCurrentPosition()</code>  会返回低精度数据（基于 IP 的定位或 Wi-Fi 定位）。</p>
</blockquote>
<h4>语法</h4>
<pre class="hljs language-js"  style=--lang:"js" ><code>navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(success, error, options);
</code></pre>
<h4>参数</h4>
<ul>
<li>success：成功得到位置信息时的回调函数，使用 <code>Position</code> 对象作为唯一参数。</li>
<li>error：（可选）获取位置信息失败时的回调函数，使用 <code>PositionError</code> 对象作为唯一的参数，这是一个可选项。</li>
<li>options：（可选）一个可选的 <code>PositionOptions</code> 对象，用于设置 <code>getCurrentPosition</code> 的参数。</li>
</ul>
<h3>监视定位</h3>
<p>您可以设定一个回调函数来响应定位数据发生的变更（设备发生了移动，或获取到了更高精度的地理位置信息）。您可以通过  <code>watchPosition()</code>  函数实现该功能。它与  <code>getCurrentPosition()</code>  接受相同的参数，但回调函数会被调用多次。错误回调函数与  <code>getCurrentPosition()</code>  中一样是可选的，也会被多次调用。</p>
<blockquote>
<p>⚠️ 注意：  您可以直接调用  <code>watchPosition()</code>  函数，不需要先调用  <code>getCurrentPosition()</code>  函数。</p>
</blockquote>
<p><code>watchPosition()</code>  函数会返回一个 ID，唯一地标记该位置监视器。您可以将这个 ID 传给  <code>clearWatch()</code>  函数来停止监视用户位置。</p>
<h3>使用案例</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">geolocation</span>) {
  <span class="hljs-keyword">const</span> getOptions = {
    <span class="hljs-comment">// 是否使用高精度设备，如GPS。默认是true</span>
    <span class="hljs-attr">enableHightAccuracy</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-comment">// 超时时间，单位毫秒，默认为0</span>
    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,
    <span class="hljs-comment">// 使用设置时间内的缓存数据，单位毫秒</span>
    <span class="hljs-comment">// 默认为0，即始终请求新数据</span>
    <span class="hljs-comment">// 如设为Infinity，则始终使用缓存数据</span>
    <span class="hljs-attr">maximumAge</span>: <span class="hljs-number">0</span>,
  };

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getSuccess</span> = position =&gt; {
    <span class="hljs-comment">// Position对象有两个属性，coords和timeStamp</span>
    <span class="hljs-comment">// timeStamp表示地理数据创建的时间</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">timeStamp</span>);

    <span class="hljs-comment">// coords是一个对象，包含了地理位置数据</span>
    <span class="hljs-comment">// 估算的纬度</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">coords</span>.<span class="hljs-property">latitude</span>);
    <span class="hljs-comment">// 估算的经度</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">coords</span>.<span class="hljs-property">longitude</span>);
    <span class="hljs-comment">// 估算的高度（以米为单位的海拔值）</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">coords</span>.<span class="hljs-property">altitude</span>);
    <span class="hljs-comment">// 所得经度和纬度的估算精度，以米为单位</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">coords</span>.<span class="hljs-property">accuracy</span>);
    <span class="hljs-comment">// 所得高度的估算精度，以米为单位</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">coords</span>.<span class="hljs-property">altitudeAccuracy</span>);
    <span class="hljs-comment">// 宿主设备的当前移动方向，以度为单位，相对于正北方向顺时针方向计算</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">coords</span>.<span class="hljs-property">heading</span>);
    <span class="hljs-comment">// 设备的当前对地速度，以米/秒为单位</span>
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">coords</span>.<span class="hljs-property">speed</span>);
    <span class="hljs-comment">// 除上述结果外，Firefox还提供了另一个属性address</span>
    <span class="hljs-keyword">if</span> (position.<span class="hljs-property">address</span>) {
      <span class="hljs-comment">// 通过address，可以获得国家、省份、城市</span>
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">address</span>.<span class="hljs-property">country</span>);
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">address</span>.<span class="hljs-property">province</span>);
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position.<span class="hljs-property">address</span>.<span class="hljs-property">city</span>);
    }
  };

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getError</span> = error =&gt; {
    <span class="hljs-comment">// 执行失败的回调函数，会接受一个error对象作为参数</span>
    <span class="hljs-comment">// error拥有一个code属性和三个常量属性TIMEOUT、PERMISSION_DENIED、POSITION_UNAVAILABLE</span>
    <span class="hljs-comment">// 执行失败时，code属性会指向是那个常量中的一个，从而指明错误原因</span>
    <span class="hljs-keyword">switch</span> (error.<span class="hljs-property">code</span>) {
      <span class="hljs-keyword">case</span> error.<span class="hljs-property">TIMEOUT</span>:
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;超时&#x27;</span>);
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">case</span> error.<span class="hljs-property">PERMISSION_DENIED</span>:
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户拒绝提供地理位置&#x27;</span>);
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">case</span> error.<span class="hljs-property">POSITION_UNAVAILABLE</span>:
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;地理位置不可用&#x27;</span>);
        <span class="hljs-keyword">break</span>;
      <span class="hljs-attr">default</span>:
        <span class="hljs-keyword">break</span>;
    }
  };

  navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(getSuccess, getError, getOptions);
  <span class="hljs-comment">// watchPosition方法一样可以设置三个参数</span>
  <span class="hljs-comment">// 使用方法和getCurrentPosition方法一致，只是执行效果不同。</span>
  <span class="hljs-comment">// getCurrentPosition只执行一次</span>
  <span class="hljs-comment">// watchPosition只要设备位置发生，就会执行</span>
  <span class="hljs-keyword">const</span> watcher_id = navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">watchPosition</span>(getSuccess, getError, getOptions);
  <span class="hljs-comment">// clearwatch用于终止watchPosition方法</span>
  navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">clearWatch</span>(watcher_id);
}
</code></pre>
<h2>Navigator 对象的属性</h2>
<p>Navigator 接口表示用户代理的状态和标识。它允许脚本查询它和注册自己进行一些活动。</p>
<p>与其他 BOM 对象的情况一样，每个浏览器中的 Navigator 对象也都有一套自己的属性。下表列出了存在于所有浏览器中的属性和方法，以及支持它们的浏览器版本。</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">appCodeName</td>
<td style="text-align:center">浏览器名称，所有浏览器都返回 Mozilla。</td>
</tr>
<tr>
<td style="text-align:center">appName</td>
<td style="text-align:center">浏览器官方名称。</td>
</tr>
<tr>
<td style="text-align:center">appVersion</td>
<td style="text-align:center">浏览器版本。</td>
</tr>
<tr>
<td style="text-align:center">appMinorVersion</td>
<td style="text-align:center">次版本信息（IE 返回 0，chrome 和 firefox 不支持）。</td>
</tr>
<tr>
<td style="text-align:center">connection</td>
<td style="text-align:center">设备的网络连接信息。</td>
</tr>
<tr>
<td style="text-align:center">cookieEnabled</td>
<td style="text-align:center">表示 cookie 是否启用，所有浏览器都返回 true。</td>
</tr>
<tr>
<td style="text-align:center">geolocation</td>
<td style="text-align:center">可访问设备的地理位置信息。</td>
</tr>
<tr>
<td style="text-align:center">javaEnabled</td>
<td style="text-align:center">浏览器是否支持 Java（IE8 浏览器返回 <code>{}</code>，其他浏览器返回 <code>function javaEnabled()</code>）</td>
</tr>
<tr>
<td style="text-align:center">language</td>
<td style="text-align:center">表示用户的首用语言（IE10 不支持，其他浏览器返回 zh-CN）。</td>
</tr>
<tr>
<td style="text-align:center">languages</td>
<td style="text-align:center">表示用户已知语言的 <code>DOMString</code> 数组，并按优先顺序排列。</td>
</tr>
<tr>
<td style="text-align:center">maxTouchPoints</td>
<td style="text-align:center">当前设备能够支持的最大同时触摸的点数。</td>
</tr>
<tr>
<td style="text-align:center">mimeTypes</td>
<td style="text-align:center">返回 <code>MimeTypeArray</code> 数组用于列举浏览器所支持的 MIME 类型。</td>
</tr>
<tr>
<td style="text-align:center">onLine</td>
<td style="text-align:center">浏览器是否连接因特网（IE 根据实际情况返回 true 或 false，chrome 和 firefox 始终返回 true）。</td>
</tr>
<tr>
<td style="text-align:center">platform</td>
<td style="text-align:center">浏览器所在的系统平台。</td>
</tr>
<tr>
<td style="text-align:center">plugins</td>
<td style="text-align:center">返回 <code>PluginArray</code> 数组用于列出浏览器安装的插件。</td>
</tr>
<tr>
<td style="text-align:center">product</td>
<td style="text-align:center">产品名称（IE10 不支持，其他浏览器返回 Gecko）</td>
</tr>
<tr>
<td style="text-align:center">productSub</td>
<td style="text-align:center">产品次要信息（IE 不支持，chrome 返回 20030107，firefox 返回 20100101）</td>
</tr>
<tr>
<td style="text-align:center">userAgent</td>
<td style="text-align:center">浏览器的用户代理。</td>
</tr>
<tr>
<td style="text-align:center">vendor</td>
<td style="text-align:center">浏览器品牌（chrome 返回 Google Inc.，IE 和 firefox 不支持）</td>
</tr>
</tbody>
</table>
<p>表中的这些 Navigator 对象的属性通常用于检测显示网页的浏览器类型。</p>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

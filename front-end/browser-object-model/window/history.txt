1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","browser-object-model","window","history"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/window/history","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/window/history","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","-pTvZuKuzEm2WPyyg2yQX",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T269b,<h1>History 对象</h1>
<h2>History 方法</h2>
<h3>history.go</h3>
<p>使用  <code>history.go</code>  方法可以在用户的历史记录中任意跳转，可以向后也可以向前。这个方法接受一个参数，表示向后或向前跳转的页面数的一个<strong>整数值</strong>。</p>
<ul>
<li>负数表示向后跳转（类似于单击浏览器的 <strong>后退</strong> 按钮）</li>
<li>正数表示向前跳转（类似于单击浏览器的 <strong>前进</strong> 按钮）</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 前进一页</span>
history.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>);

<span class="hljs-comment">// 前进两页</span>
history.<span class="hljs-title function_">go</span>(<span class="hljs-number">2</span>);

<span class="hljs-comment">// 后退一页</span>
history.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>);
</code></pre>
<p>也可以给  <code>go</code>  方法传递一个字符串参数，此时浏览器会跳转到历史记录中包含该字符串的第一个位置——可能后退，也可能前进，具体要看哪个位置最近。如果历史记录中不包含该字符串，那么这个方法什么也不做。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 跳转到最近的 github.com 页面</span>
history.<span class="hljs-title function_">go</span>(<span class="hljs-string">&#x27;github.com&#x27;</span>);
</code></pre>
<p>当<code>history.go()</code> 方法无参数时，相当于 <code>history.go(0)</code>，可以刷新当前页面</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 刷新当前页面</span>
history.<span class="hljs-title function_">go</span>();

<span class="hljs-comment">// 刷新当前页面</span>
history.<span class="hljs-title function_">go</span>(<span class="hljs-number">0</span>);
</code></pre>
<h3>history.back</h3>
<p><code>history.back()</code> 方法用于模仿浏览器的后退按钮，相当于 <code>history.go(-1)</code></p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 下面两种写法效果一致</span>
history.<span class="hljs-title function_">back</span>();
history.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>);
</code></pre>
<h3>history.forward</h3>
<p><code>forward()</code> 方法用于模仿浏览器的前进按钮，相当于 <code>history.go(1)</code></p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 后退一页</span>
history.<span class="hljs-title function_">back</span>();
<span class="hljs-comment">// 前进一页</span>
history.<span class="hljs-title function_">forward</span>();
</code></pre>
<p>如果移动的位置超出了访问历史的边界，以上三个方法并不报错，而是静默失败 。</p>
<p>使用历史记录时，页面通常从浏览器缓存之中加载，而不是重新要求服务器发送新的网页。</p>
<h3>history.pushState</h3>
<p>向当前浏览记录栈中添加一条新的历史记录，添加后页面不会重新加载。</p>
<pre class="hljs"><code class="language-js">history.<span class="hljs-title function_">pushState</span>(state, title, url);
</code></pre>
<ul>
<li>state：<strong>用于存储该 URL 对应的状态对象</strong>。该对象可通过 <code>history.state</code> 或 <code>popstate</code> 事件回调中的 event 对象获取。如果不需要这个对象，此处可以填 null。</li>
<li>title：<strong>新页面的标题</strong>，但是所有浏览器目前都忽略这个值，因此这里可以填 null。</li>
<li>url：<strong>URL 地址</strong>，不允许跨域。这个参数可选，如果它没有被特别标注，会被设置为文档的当前 URL。</li>
</ul>
<p><code>history.pushState</code> 函数向浏览器的历史堆栈压入一个 URL 为设定值的记录，并改变历史堆栈的当前指针至栈顶。</p>
<p>调用 <code>pushState()</code> 方法将新生成一条历史记录，方便用浏览器的 <strong>后退</strong> 和 <strong>前进</strong> 来导航（<strong>后退</strong> 可是相当常用的按钮）。</p>
<p>另外，从 URL 的同源策略可以看出，HTML5 History API 的出发点是很明确的，就是让无跳转的单站点也可以将它的各个状态保存为浏览器的多条历史记录。当通过历史记录重新加载站点时，站点可以直接加载到对应的状态。</p>
<p>将 <code>url</code> 设为锚点值时不会触发 <code>onhashchange</code></p>
<p>根据 <strong>同源策略</strong>，如果设置不同域名地址，会报错，这样做的目的是：防止用户以为它们是同一个网站，若没有此限制，将很容易进行 <code>XSS</code> 、 <code>CSRF</code> 等攻击方式</p>
<h3>history.replaceState()</h3>
<p>它和 <code>history.pushState()</code> 方法基本相同，区别只有一点，<strong><code>history.replaceState()</code> 不会新生成历史记录，而是将当前历史记录替换掉，常用于落地页</strong>。</p>
<pre class="hljs"><code class="language-js">history.<span class="hljs-title function_">replaceState</span>(state, title, url);
</code></pre>
<h3>window.onpopstate</h3>
<p><code>push</code> 的对立就是 <code>pop</code>，可以猜到这个事件是在浏览器取出历史记录并加载时触发的。但实际上，它的条件是比较苛刻的，几乎只有 <strong>点击浏览器的“前进”、“后退”这些导航按钮，或者是由 JavaScript 调用的 <code>history.back()</code> 等导航方法</strong>，且 <strong>切换前后的两条历史记录都属于同一个网页文档</strong>，才会触发本事件，因为这些操作有一个共性，即修改了历史堆栈的当前指针。</p>
<p>上面的 <strong>同一个网页文档</strong> 请理解为 JavaScript 环境的 <code>document</code> 是同一个，而不是指基础 URL（去掉各类参数的）相同。也就是说，只要有重新加载发生（无论是跳转到一个新站点还是继续在本站点），JavaScript 全局环境发生了变化，<code>popstate</code> 事件都不会触发。</p>
<p><code>popstate</code> 事件是设计出来和前面的 2 个方法搭配使用的。一般只有在通过前面 2 个方法设置了同一站点的多条历史记录，并在其之间导航（前进或后退）时，才会触发这个事件。同时，前面 2 个方法所设置的状态对象（第 1 个参数），也会在这个时候通过事件的 <code>event.state</code> 返还回来。</p>
<p>此外请注意，<code>history.pushState()</code> 及 <code>history.replaceState()</code> 本身调用时是不触发 <code>popstate</code> 事件的。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onpopstate</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;location: &#x27;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span> + <span class="hljs-string">&#x27;, state: &#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(event.<span class="hljs-property">state</span>));
};
</code></pre>
<h3>浏览器兼容性</h3>
<table>
<thead>
<tr>
<th>Feature</th>
<th>Chrome</th>
<th>Firefox（Gecko）</th>
<th>Internet Explorer</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td>replaceState.pushState</td>
<td>5</td>
<td>4.0（2.0）</td>
<td>10</td>
<td>11.50</td>
<td>5.0</td>
</tr>
<tr>
<td>history.state</td>
<td>18</td>
<td>4.0（2.0）</td>
<td>10</td>
<td>11.50</td>
<td>6.0</td>
</tr>
</tbody>
</table>
<p>资料参考（深入了解）：</p>
<ul>
<li><a href="https://github.com/ShowJoy-com/showjoy-blog/issues/2" target="_blank" rel="noopener noreferrer nofollow">「前端」History API 与浏览器历史堆栈管理</a></li>
</ul>
<h2>History 属性</h2>
<p><code>history</code> 对象保存着用户上网的历史记录，从窗口被打开的那一刻算起。因为 <code>history</code> 是 <code>window</code> 对象的属性，因此每个浏览器窗口、每个标签页乃至每个框架，都有自己的 <code>history</code> 对象与特定的 <code>window</code> 对象关联。出于安全方面的考虑，开发人员无法得知用户浏览过的 URL。不过，借由用户访问过的页面列表，同样可以在不知道实际 URL 的情况下实现后退和前进。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>length</td>
<td>返回一个整数，该整数表示会话历史中元素的数目，包括当前加载的页。</td>
</tr>
<tr>
<td>scrollRestoration</td>
<td>允许 Web 应用程序在历史导航上显式地设置默认滚动恢复行为。</td>
</tr>
<tr>
<td>state</td>
<td>返回一个表示历史栈堆顶部状态的值。这是一种可以不必等待 popstate 事件而查看状态的方式。</td>
</tr>
</tbody>
</table>
<h3>history.length</h3>
<p><code>history.length</code> 属性保存着历史记录的 URL 数量。初始时，该值为 1。如果当前窗口先后访问了三个网址，<code>history.length</code> 属性等于 3。</p>
<p>由于 IE10+浏览器在初始时返回 2，存在兼容性问题，所以该值并不常用</p>
<pre class="hljs"><code class="language-js">history.<span class="hljs-property">length</span>; <span class="hljs-comment">// 初始时，该值为1</span>
history.<span class="hljs-property">length</span>; <span class="hljs-comment">// 访问三个网址后，该值为3</span>
</code></pre>
<h2>应用场景</h2>
<h3>后退阻断</h3>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"History 对象"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

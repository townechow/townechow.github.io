1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","browser-object-model","browser-working-principle","workflow"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/browser-working-principle/workflow","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/browser-working-principle/workflow","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","p8hVc4rLadTBDTkDO_FLf",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3629,<h1>渲染进程的内部机制</h1>
<h2>导航流</h2>
<p>简述从浏览器中键入 URL 后，浏览器从互联网获取数据并显示页面的过程：</p>
<ol>
<li><strong>处理输出</strong>：用户在地址栏中键入时，UI 线程会自动检测输入数据是否为一个 URL 地址</li>
<li><strong>开始导航</strong>：当用户按下 Enter 键时，UI 线程会启动网络调取去获取站点内容，网络线程会通过适当的协议，像 DNS 查找和为请求建立 TLS 连接。在这时，网络线程可能会收到像 HTTP 301 那样的服务器重定向头。这种情况下，网络线程会告诉 UI 线程，服务器正在请求重定向，另一个 URL 请求会被启动</li>
<li><strong>读取响应</strong>：一旦收到响应主题（Payload），网络线程会在必要时查看数据流的前几个字节。如果响应的是 HTML 文件，那么下个步骤就是会把数据传给渲染进程，但是如果是一个压缩文件或是其他文件，那么意味着它是一个下载请求，因此需要将数据传递给下载管理器。此时也会进行 <a href="https://safebrowsing.google.com/" target="_blank" rel="noopener noreferrer nofollow">SafeBrowsing</a> 检查。如果域名和响应数据似乎匹配到一个已知的恶意网站，那么网络线程会显示一个警告页面。除此之外，还会发生 <a href="https://www.chromium.org/Home/chromium-security/corb-for-developers" target="_blank" rel="noopener noreferrer nofollow">Cross Origin Read Blocking（CORB）</a> 检查，以确保敏感的跨域数据不被传给渲染进程</li>
<li><strong>查找渲染进程</strong>：一旦所有的检查执行完毕并且网络线程确信浏览器会导航到请求的站点，网络线程会告诉 UI 线程所有的数据准备完毕。UI 线程会寻找渲染进程去开始渲染 Web 页面</li>
<li><strong>提交导航</strong>：数据和渲染进程就绪后，浏览器进程会发送一个 IPC（进程间通信）到渲染进程去提交导航。它也会传递数据流，所以渲染进程可以保持接收 HTML 数据。一旦浏览器进程收到渲染进程已经提交的确认消息，导航完毕并且文档加载解析开始</li>
<li><strong>初始化加载完毕</strong>：一旦导航被提交，渲染进程开始加载资源和渲染页面</li>
</ol>
<h2>工作线程</h2>
<p>导航过程完成之后，浏览器进程把数据交给了渲染进程，渲染进程负责 Tab 选项卡内的所有事情，核心目的就是将 HTML/CSS/JavaScript 代码，转化为用户可进行交互的 Web 页面。</p>
<blockquote>
<p>那么渲染进程是如何工作的呢？</p>
</blockquote>
<p>渲染进程中，包含线程分别是：</p>
<ul>
<li>一个主线程（main thread）</li>
<li>多个工作线程（work thread）</li>
<li>一个合成器线程（compositor thread）</li>
<li>多个光栅化线程（raster thread）</li>
</ul>
<p>&lt;br /&gt;</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/browser-working-principle/renderer-process-with-main-thread.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; (
  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;渲染进程内部包含主线程、工作线程、合成线程和光栅线程&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{520}</span> /&gt;</span></span>
);
</code></pre>
<p>不同的线程，有着不同的工作职责。</p>
<h2>渲染引擎</h2>
<p>渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 HTML、XML 文档及图片，它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。渲染引擎最主要的用途是显示应用了 CSS 之后的 HTML 及图片。</p>
<p>不同的浏览器厂商实现网页渲染的过程是有区别的。</p>
<h3>引擎种类</h3>
<p>不同的浏览器有不同的渲染引擎，对于渲染引擎的种类总结如下：</p>
<ul>
<li>Webkit 内核：Safari / Chrome 等</li>
<li>Gecko 内核：Netscape6 及以上版本 / Firefox / MozillaSuite / SeaMonkey 等</li>
<li>Trident（MSHTML）内核：IE9- / MaxThon / TT / The World / 360 / 搜狗浏览器 / 腾讯浏览器等</li>
<li>Presto 内核：Opera7 及以上</li>
<li>Edge 内核：Win10 以上 IE 浏览器</li>
<li>Blink 内核：Chromium</li>
</ul>
<p>JavaScript 解析器：</p>
<ul>
<li>V8 引擎：Google Chrome</li>
<li>spiderMonkey 引擎：Mozilla Firefox</li>
<li>JScript 引擎：IE 系列浏览器</li>
<li>linear b/futhark 引擎：Opera</li>
</ul>
<h2>工作流程</h2>
<p>下面是渲染引擎在获取文档内容之后的大致工作流程：</p>
<ol>
<li>Parsing：解析文档
<ul>
<li><a href="/front-end/browser-object-model/browser-working-principle/construction-of-the-object-model">构建文档对象模型</a></li>
<li><a href="/front-end/browser-object-model/browser-working-principle/construction-of-the-object-model#css-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B">构建样式对象模型</a></li>
<li><a href="/front-end/browser-object-model/browser-working-principle/script-loading-asynchronously">脚本异步加载</a></li>
</ul>
</li>
<li>RenderTree：构建渲染
<ul>
<li><a href="/front-end/browser-object-model/browser-working-principle/construction-of-render-tree">遍历文档树</a></li>
<li><a href="/front-end/browser-object-model/browser-working-principle/construction-of-render-tree#%E6%A0%B7%E5%BC%8F%E8%AE%A1%E7%AE%97">Style Calculation：样式计算</a></li>
</ul>
</li>
<li><a href="/front-end/browser-object-model/browser-working-principle/layout">Layout：布局</a></li>
<li><a href="/front-end/browser-object-model/browser-working-principle/paint">Paint：绘制</a></li>
<li><a href="/front-end/browser-object-model/browser-working-principle/rasterization">Rasterization：光栅化</a></li>
<li><a href="/front-end/browser-object-model/browser-working-principle/composite">Composite：合并</a></li>
</ol>
<p>&lt;br /&gt;</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/browser-working-principle/browser-working-process.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;浏览器工作大致流程&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{720}</span> /&gt;</span></span>;
</code></pre>
<p>&lt;br /&gt;</p>
<ol>
<li><strong>浏览器解析过程</strong>
<ul>
<li>HTML / SVG / XHTML：渲染引擎通过三个 C++ 的类对应这三类文档，解析这三类文件并构建 <strong>DOM 树</strong>（DOM Tree）</li>
<li>CSS：渲染引擎解析外部 CSS 文件及内联 <code>style</code> 标签内的样式数据，并构建 <strong>CSS 规则树</strong>（ CSS Rule Tree）</li>
<li>JavaScript：JavaScript 通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree</li>
</ul>
</li>
<li><strong>构建渲染树（Rendering Tree）</strong>
<ul>
<li>解析完成后，浏览器引擎会通过 DOM 树和 CSS 规则树来构造 <strong>渲染树</strong></li>
<li>渲染树并不等同于 DOM 树，因为一些像 <code>&lt;header&gt;</code> 或 <code>display: none</code> 的东西就没必要放到渲染树中</li>
<li>CSS 的 Rule Tree 主要是为了完成匹配并把 CSS Rule 附加至渲染树上的每个 Element 上。然后，计算每个渲染对象的位置，这通常是 布局（Layout） 和 重排（Reflow） 过程中发生</li>
<li>一旦渲染树构建完成，浏览器会把树里面的内容绘制在屏幕上。</li>
</ul>
</li>
<li><strong>布局（Layout）</strong>：渲染树构建好之后，将会执行布局过程，它将确定每个节点在屏幕上的确切坐标</li>
<li><strong>绘制（Paint）</strong>：再下一步就是绘制，即遍历渲染树，并使用渲染引擎绘制每个节点</li>
<li><strong>渲染层合并（Composite）</strong>：页面中 DOM 元素的绘制是在多个层上进行的，在每个层上完成绘制过程之后，浏览器会将所有层按照合理的顺序合并成一个图层，然后在屏幕上呈现</li>
<li>最后通过调用操作系统 NativeGUI API 进行绘制</li>
</ol>
<p>值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早地将内容呈现到屏幕上，并不会等到所有 HTML 都解析完成之后再去构建和布局渲染树，它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</p>
<h3>Webkit 实现</h3>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/browser-working-principle/webkit-workflow.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Webkit主流程实现&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{640}</span> /&gt;</span></span>;
</code></pre>
<h3>Gecko 实现</h3>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/browser-working-principle/gecko-workflow.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Gecko主流程实现&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{640}</span> /&gt;</span></span>;
</code></pre>
<p>&lt;br /&gt;</p>
<ul>
<li>Gecko 将视觉格式化元素组成的树称为 <strong>框架树</strong>（Frame）。每个元素都是一个框架。Webkit 使用的术语是 <strong>渲染树</strong>（Render），它由 <strong>渲染对象</strong> 组成。</li>
<li>对于元素的放置，Webkit 使用的术语是 <strong>布局</strong>（Layout），而 Gecko 称之为 <strong>重排</strong>（Reflow）</li>
<li>Webkit 称利用 DOM 节点及样式信息去构建渲染树的过程为 Attachment，Gecko 在 HTML 和 DOM 树之间附加了一层，这层称为内容接收器，相当制造 DOM 元素的工厂。</li>
</ul>
<h2>参考资料</h2>
<ul>
<li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2" target="_blank" rel="noopener noreferrer nofollow">📝 原文 Inside look at modern web browser（Part 2）</a></li>
<li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3" target="_blank" rel="noopener noreferrer nofollow">📝 原文：Inside look at modern web browser（Part 3）</a></li>
<li><a href="https://github.com/xitu/gold-miner/blob/master/TODO1/inside-browser-part2.md" target="_blank" rel="noopener noreferrer nofollow">📝 现代浏览器内部揭秘 Part 2</a></li>
<li><a href="https://juejin.im/post/6844903692894732295" target="_blank" rel="noopener noreferrer nofollow">📝 现代浏览器内部揭秘 Part 3</a></li>
<li><a href="https://www.cnblogs.com/wjlog/p/5744753.html#chapter8" target="_blank" rel="noopener noreferrer nofollow">📝 前端必读：浏览器内部工作原理</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/29418126" target="_blank" rel="noopener noreferrer nofollow">📝 浏览器的渲染：过程与原理</a></li>
<li><a href="https://juejin.im/entry/5a9a379af265da239d48c027" target="_blank" rel="noopener noreferrer nofollow">📝 浏览器工作员：Webkit 内核研究</a></li>
<li><a href="https://www.jianshu.com/p/281b574ee3f8" target="_blank" rel="noopener noreferrer nofollow">📝 浏览器渲染引擎到底做了什么</a></li>
<li><a href="https://blog.csdn.net/john1337/article/details/53579506" target="_blank" rel="noopener noreferrer nofollow">📝 浅析渲染引擎与前端优化</a></li>
<li><a href="https://source.chromium.org/chromium/chromium/src" target="_blank" rel="noopener noreferrer nofollow">📝 Chromium Code Search</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

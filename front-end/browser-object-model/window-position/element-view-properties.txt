1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","browser-object-model","window-position","element-view-properties"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/window-position/element-view-properties","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/window-position/element-view-properties","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","aY0LK2L7OOKfaThfnTJhB",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T4b62,<h1>Element 文档元素视图属性</h1>
<p><strong>目录：</strong></p>
<ul>
<li><a href="/front-end/browser-object-model/window-position/#%E5%81%8F%E7%A7%BB%E9%87%8F">偏移量</a></li>
<li><a href="/front-end/browser-object-model/window-position/#%E8%BE%B9%E8%B7%9D%E5%81%8F%E7%A7%BB%E9%87%8F-offsetleft-%E5%92%8C-offsettop">边距偏移量</a>
<ul>
<li><a href="/front-end/browser-object-model/window-position/#offsetleft">offsetLeft</a></li>
<li><a href="/front-end/browser-object-model/window-position/#offsettop">offsetTop</a></li>
</ul>
</li>
<li><a href="/front-end/browser-object-model/window-position/#%E5%AE%BD%E9%AB%98%E5%81%8F%E7%A7%BB%E9%87%8F-offsetwidth-%E5%92%8C-offsetheight">宽高偏移量</a>
<ul>
<li><a href="/front-end/browser-object-model/window-position/#offsetwidth">offsetWidth</a></li>
<li><a href="/front-end/browser-object-model/window-position/#offsetheight">offsetHeight</a></li>
</ul>
</li>
<li><a href="/front-end/browser-object-model/window-position/#%E5%86%85%E5%AE%B9%E5%8F%AF%E8%A7%86%E5%8C%BA">内容可视区</a>
<ul>
<li><a href="/front-end/browser-object-model/window-position/#%E5%86%85%E5%AE%B9%E5%8F%AF%E8%A7%86%E5%8C%BA%E5%AE%BD%E9%AB%98-clientwidth-%E5%92%8C-clientheight">内容可视区宽高</a></li>
</ul>
</li>
<li><a href="/front-end/browser-object-model/window-position/#%E5%86%85%E5%AE%B9%E6%BB%9A%E5%8A%A8%E5%8C%BA">内容滚动区</a>
<ul>
<li><a href="/front-end/browser-object-model/window-position/#%E5%86%85%E5%AE%B9%E6%BB%9A%E5%8A%A8%E5%8C%BA%E5%AE%BD%E9%AB%98-scrollwidth-%E5%92%8C-scrollheight">内容滚动区宽高</a></li>
<li><a href="/front-end/browser-object-model/window-position/#%E5%86%85%E5%AE%B9%E6%BB%9A%E5%8A%A8%E5%8C%BA%E8%BE%B9%E8%B7%9D-scrollleft-%E5%92%8C-scrolltop">内容滚动区边距</a></li>
</ul>
</li>
</ul>
<h2>偏移量</h2>
<p>偏移量（Offset Dimension）是 JavaScript 中的一个重要概念。</p>
<p>涉及到偏移量的主要是</p>
<ul>
<li><code>offsetWdith</code></li>
<li><code>offsetHeight</code></li>
<li><code>offsetLeft</code></li>
<li><code>offsetTop</code></li>
</ul>
<p>当然，还有一个偏移参照量——定位父级 <code>offsetParent</code>。</p>
<img alt="偏移量" src="../../assets/element-view-properties/offset.png" width="800" /><h3>定位父级 offsetParent</h3>
<p>DOM 元素的 <code>offsetParent</code> 属性返回一个<strong>对象的引用</strong>，这个对象是距离调用 <code>offsetParent</code> 元素最近的（<strong>在包含层次中最靠近的</strong>），并且是<strong>已进行过 CSS 定位</strong>（<code>position</code> 不为 <code>static</code> ）的<strong>容器元素</strong>。</p>
<h4>元素固定定位</h4>
<ul>
<li>元素自身为 <code>fixed</code> 固定定位，<code>offsetParent</code> 的结果为 <code>null</code></li>
</ul>
<p>⚠️ <strong>注意</strong>： 当元素自身为 <code>fixed</code> 固定定位时，固定定位的元素相对于视口进行定位，此时没有父级。</p>
<pre class="hljs language-html"  style=--lang:"html" ><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: fixed&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
  <span class="hljs-comment">// Firefox 并没有考虑固定定位的问题，返回 body 元素，其他浏览器都返回 null</span>
  <span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">offsetParent</span>); <span class="hljs-comment">// null</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<blockquote>
<p>⚠️ Firefox 浏览器有兼容性问题</p>
</blockquote>
<h4>元素非固定定位，最近父元素未定位</h4>
<ul>
<li>元素自身无 <code>fixed</code> 固定定位，且父级元素都未经过定位，<code>offsetParent</code> 的结果为 <code>&lt;body&gt;</code> 根元素</li>
</ul>
<pre class="hljs language-html"  style=--lang:"html" ><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
  <span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">offsetParent</span>); <span class="hljs-comment">// &lt;body&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<h4>元素非固定定位，父元素已定位</h4>
<ul>
<li>元素自身无 <code>fixed</code> 固定定位，且父级元素存在经过定位的元素，<code>offsetParent</code> 的结果为离自身元素最近的经过定位的父级元素</li>
</ul>
<pre class="hljs language-html"  style=--lang:"html" ><code><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position:absolute;&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position:absolute;&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;foo&#x27;</span>
 <span class="hljs-attr">nm</span>             &lt;/<span class="hljs-attr">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
     <span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">offsetParent</span>);		<span class="hljs-comment">//&lt;div id=&quot;div1&quot;&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<h4>根元素</h4>
<ul>
<li><code>body</code> 根元素的 <code>parentNode</code> 是 <code>null</code></li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">offsetParent</span>); <span class="hljs-comment">// null</span>
</code></pre>
<h2>边距偏移量 offsetLeft 和 offsetTop</h2>
<p>DOM 元素的 <code>offsetLeft</code> 和 <code>offsetTop</code> 这两个<strong>只读属性</strong>与 <code>offsetParent</code> 属性有关。要确定这两个属性的值，首先得确定元素的 <code>offsetParent</code>。确定了 <code>offsetParent</code>，<code>offsetLeft</code> 指的是元素左侧偏移 <code>offsetParent</code> 的距离，同理 <code>offsetTop</code> 指的是上侧偏移的距离。</p>
<img alt="边距偏移量" src="../../assets/element-view-properties/offset-left-and-offset-right.png" width="720" /><h3>offsetLeft</h3>
<p><code>offsetLeft</code> 指<strong>当前元素左外边界</strong>与<strong>包含元素的 <code>offsetParent</code> 节点的左内边界</strong>的像素距离。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>offsetLeft = (offsetParent 的 padding-left) + (中间元素的 offsetWidth) + (当前元素的 margin-left)
</code></pre>
<p>使用方法：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> offsetLeft = element.<span class="hljs-property">offsetLeft</span>;
</code></pre>
<h3>offsetTop</h3>
<p>而 <code>offsetTop</code> 指<strong>当前元素上外边界</strong>与<strong>包含元素的 <code>offsetParent</code> 节点的上边界</strong>的像素值。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>offsetTop = (offsetParent 的 padding-top) + (中间元素的 offsetHeight) + (当前元素的 margin-top)
</code></pre>
<p>使用方法：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> offsetTop = element.<span class="hljs-property">offsetTop</span>;
</code></pre>
<p>但通过上面的例子我们可以看到，当 <code>offsetParent</code> 为 <code>body</code> 时情况比较特殊。</p>
<p>在 IE8/8/10 及 Chrome 中，<code>offsetLeft = (body 的 margin-left) + (body 的 border-width) + (body 的 padding-left) + (当前元素的 margin-left)</code></p>
<p>在 Firefox 中，<code>offsetLeft = (body 的 margin-left) + (body 的 padding-left) + (当前元素的 margin-left)</code></p>
<ul>
<li>元素的 <code>padding</code> 会影响边距偏移量，而父元素的 <code>padding</code> 不会影响当前元素的 <code>offsetLeft</code>，父元素的 <code>margin</code> 会影响。</li>
</ul>
<h2>宽高偏移量 offsetWidth 和 offsetHeight</h2>
<p>DOM 元素的 <code>offsetWidth</code> 和 <code>offsetHeight</code> 是一种 CSS 宽度和高度的衡量标准，包括<strong>元素的边框、内边距和元素的滚动条（如果存在且渲染的话）</strong>，不包括 <code>:before</code> 或 <code>:after</code> 等伪类元素的高度，分别返回当前元素的布局宽度和当前元素的布局高度。</p>
<p>经过测试可以发现，即使元素加上水平或垂直滚动条，<code>offsetWidth</code> 和 <code>offsetHeight</code> 的值是不会更改的，因为浏览器渲染时把滚动条的宽度（或高度）算在了元素本身的宽度（或高度）中了。</p>
<p><code>offsetWidth</code> 和 <code>offsetHeight</code> 这两个属性的值只与该元素有关，与周围元素（父级和子级元素都无关）。</p>
<img alt="宽高偏移量" src="../../assets/element-view-properties/offset-width-and-offset-height.png" width="720" /><h3>offsetWidth</h3>
<p><code>offsetWidth</code> 表示元素在水平方向所占用的空间大小，即元素宽度、（可见的）垂直滚动条的宽度、内边距和边框四者的总和。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>offsetWidth =
  border - left - width + padding - left + width + padding - right + border - right - width;
</code></pre>
<p>使用方法：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> offsetWidth = element.<span class="hljs-property">offsetWidth</span>;
</code></pre>
<h3>offsetHeight</h3>
<p><code>offsetHeight</code> 表示元素在垂直方向所占用的空间大小，即元素宽度、（可见的）水平滚动条的宽度、内边距和边框四者的总和。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>offsetHeight =
  border - top - width + padding - top + width + padding - bottom + border - bottom - width;
</code></pre>
<p>使用方法：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> offsetHeight = element.<span class="hljs-property">offsetHeight</span>;
</code></pre>
<blockquote>
<p>⚠️ 如果存在垂直滚动条，<code>offsetWidth</code> 也包括垂直滚动条的宽度；如果存在水平滚动条，<code>offsetHeight</code> 也包括水平滚动条的高度。</p>
</blockquote>
<blockquote>
<p>⚠️ 这两个属性值会被四舍五入为正数值，如果你需要一个浮点数值请用 <code>element.getBoundingClientRect()</code>。</p>
</blockquote>
<h3>偏移量注意事项</h3>
<ul>
<li><strong>所有偏移量均为只读属性</strong></li>
<li>元素样式设置 <code>display: none</code> 则它的偏移量为 0</li>
<li>每次访问偏移量属性都需要重新计算</li>
</ul>
<p>重复访问偏移量属性需要耗费大量的性能，所以要尽量避免重复访问这些属性。如果需要重复访问，则把它们的值保存在变量中，以提高性能。</p>
<h2>内容可视区</h2>
<p>内容可视区，顾名思义，就是用户可视可操作区的大小。在一个 Windows 窗口中，内容可视区又是工作区，其实就是用户可以看到的，并且能利用的区域。在浏览器中，客户区表达了元素可以渲染的区域，显然，这个区域就是元素所占空间，但是边框和滚动条是不算的，所以内容可视区大小需加上内边距。故 <code>clientWidth</code> 与 <code>offsetWidth</code> 的差别就在于边框与滚动条上。</p>
<img alt="内容可视区" src="../../assets/element-view-properties/content-view.png" width="720" /><h3>内容可视区宽高 clientWidth 和 clientHeight</h3>
<p><code>clientWidth</code> 和 <code>clientHeight</code> 表示元素内容可视区的宽度和高度，包括边距大小（padding），但是不包括边框（border）和滚动条（scroll bar）。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>clientWidth = padding - left + width + padding - right;
clientHeight = padding - top + width + padding - bottom;
</code></pre>
<h3>内容可视区边距 clientLeft 和 clientTop</h3>
<p><code>clientLeft</code> 和 <code>clientTop</code> 分别表示内容可视区的左上角相对于整个元素左上角的位置（包括边框）</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>clientLeft = border - left - width;
clientTop = border - top - width;
</code></pre>
<h3>兼容性</h3>
<p>获取 <code>&lt;body&gt;</code> 标签 DOM 对象宽高</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>;
<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>;
</code></pre>
<h2>内容滚动区</h2>
<p>滚动有关的属性都因滚动条而起。滚动条是常见的延长显示策略，也是电子媒体特有的优势。浏览器必须考虑滚动条本身的高度和宽度，于是便出现了 <code>scrollWidth</code> 和 <code>scrollLeft</code> 等属性，以支持对滚动条高宽的控制。</p>
<p>由于滚动相关属性都是为滚动条而设计，那么，在没有滚动时，这些属性将失去意义，可不必考虑，或用其他属性代替。</p>
<img alt="内容滚动区" src="../../assets/element-view-properties/content-scroll.png" width="720" /><h3>内容滚动区宽高 scrollWidth 和 scrollHeight</h3>
<p><code>scrollWidth</code> 和 <code>scrollHeight</code> 分别表示元素内容的宽度和元素内容的高度。</p>
<p><code>scrollWidth</code> 是滚动宽度，当出现了水平滚动条，元素真实的宽度是看不出来的，此时元素在页面上所占据的宽度依然是 <code>offsetWidth</code>，而其整个内容区的宽度会因为出现了滚动条而遮住。此时，为了得到元素内容的真实大小，就需要用 <code>scrollWidth</code>，就像是将滚动的内容全部铺开，此时呈现出来的宽度就是 <code>scrollWidth</code>，而不包含边框和 Y 轴滚动条的宽度，就像是铺开的 <code>clientWidth</code>。同理可得 <code>scrollHeight</code> 为滚动高度。</p>
<p>使用如下示例代码：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);

<span class="hljs-keyword">const</span> scrollWidth = foo.<span class="hljs-property">scrollWidth</span>;
<span class="hljs-keyword">const</span> scrollHeight = foo.<span class="hljs-property">scrollHeight</span>;
</code></pre>
<blockquote>
<p>如果元素没有隐藏的部分，则相关的值应该等于 <code>clientWidth</code> 或 <code>clientHeight</code></p>
<p>当你向下滚动滚动条的时候，<code>scrollHeight</code> 应该等用于 <code>scrollTop + clientHeight</code></p>
</blockquote>
<h3>内容滚动区边距 scrollLeft 和 scrollTop</h3>
<p><code>scrollTop</code> 可设置或获取位于对象最顶端和窗口中可见内容的最顶端之间的距离。</p>
<p><code>scrollLeft</code> 可设置或获取位于对象左边界和窗口中目前可见内容的最左端之间的距离。</p>
<p>获取滚动条到元素左边界和上边界距离：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> scrollLeft = element.<span class="hljs-property">scrollLeft</span>;
<span class="hljs-keyword">const</span> scrollTop = element.<span class="hljs-property">scrollTop</span>;
</code></pre>
<p>设置滚动条滚动的距离：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>element.<span class="hljs-property">scrollLeft</span> = <span class="hljs-number">10</span>;
element.<span class="hljs-property">scrollTop</span> = <span class="hljs-number">10</span>;
</code></pre>
<p><code>scrollLeft</code> 和 <code>scrollTop</code> 可以是任意整数，然而：</p>
<ul>
<li>如果元素无滚动轴（如：元素无溢出），那么 <code>scrollLeft</code> 的值是 0</li>
<li>如果给 <code>scrollLeft</code> 设置的值小于 0，那么 <code>scrollLeft</code> 的值将变为 0</li>
<li>如果给 <code>scrollLeft</code> 设置的值大于元素内容最大宽度，那么 <code>scrollLeft</code> 的值将被设为元素最大宽度</li>
</ul>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://www.zhangxinxu.com/wordpress/2011/09/cssom%E8%A7%86%E5%9B%BE%E6%A8%A1%E5%BC%8Fcssom-view-module%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86%E4%B8%8E%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer nofollow">CSSOM 视图模式(CSSOM View Module)相关整理</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

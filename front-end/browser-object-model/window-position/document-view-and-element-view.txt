1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","browser-object-model","window-position","document-view-and-element-view"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/window-position/document-view-and-element-view","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/window-position/document-view-and-element-view","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","datkKmECaJKppMpcwDd95",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2a24,<h1>文档视图和元素视图</h1>
<p>文档视图和元素视图中包含的与元素大小位置相关的方法主要有：</p>
<ol>
<li><code>elementFromPoint()</code></li>
<li><code>getClientRects()</code></li>
<li><code>getBoundingClientRect()</code></li>
<li><code>scrollIntoView()</code></li>
</ol>
<h2>elementFromPoint</h2>
<p>根据坐标获取元素</p>
<p><code>elementFromPoint()</code> 根据文档上横纵坐标，获取当前文档上该坐标点上位置最顶层的 DOM 元素，该坐标是相对于文档的浏览器窗口左上角为原点来计算的，通常横纵坐标为正数。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">elementFromPoint</span>(offsetX, offsetY);
</code></pre>
<blockquote>
<p>⚠️ 参数 offsetX 和 offsetY 为坐标数值，不需要单位（比如像素单位 px）</p>
</blockquote>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/document-view-and-element-view/element-from-point.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;elementFromPoint&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{800}</span> /&gt;</span></span>;
</code></pre>
<p>使用如下示例代码：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">elementFromPoint</span>(offsetX, offsetY);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo); <span class="hljs-comment">// &lt;div id=&quot;foo&quot;&gt;&lt;/foo&gt;</span>
</code></pre>
<blockquote>
<p>此方法可以用于检测元素是否发生重叠或是碰撞</p>
</blockquote>
<h2>getClientRects() 获取元素占据页面的所有矩形区域</h2>
<p><code>getClientRects()</code> 方法返回一组元素相关的只读属性的矩形集合 DOMRectList。包括当前元素相对于浏览器视口左上角的顶端（top）、底端（bottom）、左端（left）、右端（right）的<strong>偏移量</strong>，元素自身的宽度（width）和高度（height）属性，以及元素自身的横（x）纵（y）坐标。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> rectCollection = ele.<span class="hljs-title function_">getClientRects</span>();
</code></pre>
<blockquote>
<p>⚠️ 当元素发生滚动时，顶端（top）、底端（bottom）、左端（left） 和 右端（right） 的偏移量也会发生改变。</p>
</blockquote>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/document-view-and-element-view/get-client-rects.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;getClientRects&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{720}</span> /&gt;</span></span>;
</code></pre>
<ul>
<li>top：元素左上角距浏览器页面顶端的距离</li>
<li>left：元素左上角距浏览器页面左端的距离</li>
<li>bottom：元素右下角距浏览器页面的顶端的距离</li>
<li>right：元素右下角距浏览器页面的左端的距离</li>
<li>width：元素宽度（包括内容、边距和边框）</li>
<li>height：元素高度（包括内容、边距和边框）</li>
</ul>
<blockquote>
<p>浏览器页面指文档整体宽高组成的区域，通常通过滚动条查看未在可视区域内显示的页面内容。</p>
</blockquote>
<p>使用如下示例代码：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);

<span class="hljs-keyword">const</span> fooRects = foo.<span class="hljs-title function_">getClientRects</span>();

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fooRects);

<span class="hljs-comment">// 输出内容如下：</span>
<span class="hljs-title class_">DOMRectList</span>[
  {
    <span class="hljs-attr">top</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">left</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">right</span>: <span class="hljs-number">200</span>, <span class="hljs-comment">// =&gt; (left + width)</span>
    <span class="hljs-attr">bottom</span>: <span class="hljs-number">200</span>, <span class="hljs-comment">// =&gt; (top + height)</span>
    <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">y</span>: <span class="hljs-number">100</span>,
  }
];
</code></pre>
<h2>getBoundingClientRect() 获取元素位置</h2>
<p><code>getBoundingClientRect()</code> 方法放回一组元素的左、上、右及下分别<strong>相对</strong>浏览器可视窗口的位置的集合 DOMRect。</p>
<p><code>getBoundingClientRect</code> 是 <code>DOM</code> 元素到浏览器可视范围的距离（不包含文档卷起的部分）。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> rectObject = ele.<span class="hljs-title function_">getBoundingClientRect</span>();
</code></pre>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/document-view-and-element-view/get-bounding-client-rect.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;getBoundingClientRect&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{720}</span> /&gt;</span></span>;
</code></pre>
<ul>
<li>top：元素左上角距浏览器可视区域顶端的距离</li>
<li>left：元素左上角距浏览器可视区域左端的距离</li>
<li>bottom：元素右下角距浏览器可视区域的顶端的距离</li>
<li>right：元素右下角距浏览器可视区域的左端的距离</li>
<li>width：元素宽度（包括内容、边距和边框）</li>
<li>height：元素高度（包括内容、边距和边框）</li>
</ul>
<p>使用如下示例代码：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);

<span class="hljs-keyword">const</span> fooBoundingRect = ele.<span class="hljs-title function_">getBoundingClientRect</span>();

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo);

<span class="hljs-comment">// 输出内容如下：</span>
<span class="hljs-title class_">DOMRect</span> {
    <span class="hljs-attr">top</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">left</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">right</span>: <span class="hljs-number">200</span>,			<span class="hljs-comment">// =&gt; (left + width)</span>
    <span class="hljs-attr">bottom</span>: <span class="hljs-number">200</span>,		<span class="hljs-comment">// =&gt; (top + height)</span>
    <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,
    <span class="hljs-attr">y</span>: <span class="hljs-number">100</span>,
}
</code></pre>
<h2>scrollIntoView()</h2>
<blockquote>
<p>⚗️ 这是一个实验中的功能</p>
</blockquote>
<p><code>scrollView()</code> 方法让当前的元素滚动到浏览器窗口的可视区域内。</p>
<pre class="hljs"><code class="language-js">element.<span class="hljs-title function_">scrollIntoView</span>(alignToTop || options);
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>alignToTop</td>
<td>&lt;ol&gt;&lt;li&gt; <code>true</code>：元素顶端和其所在滚动区的可视区域的顶端对齐&lt;/li&gt;&lt;li&gt; <code>false</code>：元素底端和其所在滚动区的可视区域的底端对齐&lt;/li&gt;&lt;/ol&gt;</td>
<td>boolean</td>
</tr>
<tr>
<td>options</td>
<td>一个带有选项的配置对象，详细参数查看下表</td>
<td>object</td>
</tr>
</tbody>
</table>
<p><strong>options</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>behavior</td>
<td>定义缓慢函数，可选值为 <code>auto</code> <code>instant</code> <code>smooth</code></td>
<td>string</td>
<td><code>auto</code></td>
</tr>
<tr>
<td>block</td>
<td>定义块级元素对齐方式，可选值为 <code>center</code> <code>end</code> <code>nearest</code></td>
<td>string</td>
<td><code>center</code></td>
</tr>
<tr>
<td>inline</td>
<td>定义行内元素对齐方式，可选值为 <code>center</code> <code>end</code> <code>nearest</code></td>
<td>string</td>
<td><code>nearest</code></td>
</tr>
</tbody>
</table>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","browser-object-model","binary-data-and-files","blob"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/binary-data-and-files/blob","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/binary-data-and-files/blob","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","PSmDF1NVQowSWZG7XALh_",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2591,<h1>Blob API</h1>
<p>Blob（Binary Large Object）对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。</p>
<p>Blob 表示的不一定是 JavaScript 原生格式的数据。File 接口基于 Blob，继承了 <code>blob</code> 的功能并将其扩展使其支持用户系统上的文件。</p>
<h2>基本用法</h2>
<h3>构造函数</h3>
<p>可以通过 Blob 的构造函数创建 Blob 对象：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>(data [, options]);
</code></pre>
<h3>参数</h3>
<ul>
<li><code>data</code>：类数组类型，数组中的每一项连接起来构成 Blob 对象的数据，数组中的每项元素可以是 <code>ArrayBuffer</code>、<code>ArrayBufferView</code>、<code>Blob</code>、<code>DOMString</code></li>
<li><code>options</code>：可选项，字典格式类型，可以指定如下两个属性
<ul>
<li><code>type</code>：默认值为空字符串 <code>''</code>，它代表了将会被放入到 Blob 中的数组内容的 MIME 类型</li>
<li><code>endings</code>：默认值为 <code>transparent</code>，用于指定包含行结束符 <code>\n</code> 的字符串如何被写入。 它是以下两个值中的一个：
<ul>
<li><code>native</code>，表示行结束符会被更改为适合宿主操作系统文件系统的换行符</li>
<li><code>transparent</code>，表示会保持 Blob 中保存的结束符不变</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>属性和方法</h2>
<h3>属性</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Blob.size</code></td>
<td style="text-align:left">（只读）Blob 对象的大小（单位：字节）</td>
</tr>
<tr>
<td style="text-align:left"><code>Blob.type</code></td>
<td style="text-align:left">（只读）Blob 对象的 MIME 类型，如果是未知，则是空字符串</td>
</tr>
</tbody>
</table>
<h3>方法</h3>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Blob.slice([start [, end [, contentType]]])</code></td>
<td style="text-align:left">返回源 Blob 对象指定范围的新 Blob 对象</td>
</tr>
<tr>
<td style="text-align:left"><code>Blob.stream()</code></td>
<td style="text-align:left">返回能读取 Blob 对象内容的 ReadableStream</td>
</tr>
<tr>
<td style="text-align:left"><code>Blob.text()</code></td>
<td style="text-align:left">返回 Promise 且包含 Blob 所有内容的 UTF-8 格式的 USVString</td>
</tr>
<tr>
<td style="text-align:left"><code>Blob.arrayBuffer()</code></td>
<td style="text-align:left">返回 Promise 且包含 Blob 所有内容二进制格式的 ArrayBuffer</td>
</tr>
</tbody>
</table>
<h2>与 ArrayBuffer 的关系</h2>
<p>相同点：Blob 和 ArrayBuffer 都是二进制的容器</p>
<ul>
<li>ArrayBuffer：ArrayBuffer 更加底层，就是一段纯粹的内存上的二进制数据，我们可以对其任何一个字节进行单独的修改，也可以根据我们的需要以我们制定的形式读取指定范围的数据</li>
<li>Blob：Blob 就是将一段二进制数据做了一个封装，我们拿到的就是一个整体，可以看到它的整体属性大小、类型；也可以对其分割，但不能了解到它的细节</li>
</ul>
<p>联系：Blob 可以接受一个 ArrayBuffer 作为参数生成一个 Blob 对象，此行为就相当于对 ArrayBuffer 数据做一个封装，之后就是以整体的形式展现了</p>
<p>应用上的区别：由于 ArrayBuffer 和 Blob 的特性，Blob 作为一个整体文件，适合用于传输；而只有需要关注细节（比如修改某段数据时），才需要用到 ArrayBuffer</p>
<h2>应用示例</h2>
<ul>
<li>文件下载：通过 <code>URL.createObjectURL(blob)</code> 生成 Blob URL，赋给 <code>a.download</code> 属性</li>
<li>图片显示：通过 <code>URL.createObjectURL(blob)</code> 生成 Blob URL，赋给 <code>img.src</code> 属性</li>
<li>资源分段上传：通过 <code>Blob.slice</code> 可以分割二进制数据为子 Blob 上传</li>
<li>本地读取文件：<code>FileReader</code> 的 API 可以将 Blob 或 File 转化为文本/ArrayBuffer/Data URL 等类型</li>
</ul>
<h3>代码示例</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> data1 = <span class="hljs-string">&#x27;a&#x27;</span>;
<span class="hljs-keyword">const</span> data2 = <span class="hljs-string">&#x27;b&#x27;</span>;
<span class="hljs-keyword">const</span> data3 = <span class="hljs-string">&#x27;&lt;div style=&quot;color: red;&quot;&gt;This is a blob&lt;/div&gt;&#x27;</span>;
<span class="hljs-keyword">const</span> data4 = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span> };

<span class="hljs-keyword">const</span> blob1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data1]);
<span class="hljs-keyword">const</span> blob2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data1, data2]);
<span class="hljs-keyword">const</span> blob3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data3]);
<span class="hljs-keyword">const</span> blob4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data4)]);
<span class="hljs-keyword">const</span> blob5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data4]);
<span class="hljs-keyword">const</span> blob6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data3, data4]);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blob1);
<span class="hljs-comment">// Blob { size: 1, type: &quot;&quot; }</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blob2);
<span class="hljs-comment">// Blob { size: 2, type: &quot;&quot; }</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blob3);
<span class="hljs-comment">// Blob { size: 44, type: &quot;&quot; }</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blob4);
<span class="hljs-comment">// Blob { size: 14, type: &quot;&quot; }</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blob5);
<span class="hljs-comment">// Blob { size: 15, type: &quot;&quot; }</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blob6);
<span class="hljs-comment">// Blob { size: 59, type: &quot;&quot; }</span>
</code></pre>
<ul>
<li><code>blob4</code>：通过 <code>JSON.stringify</code> 把 <code>data4</code> 对象转换成 JSON 的字符串</li>
<li><code>blob5</code>：直接使用 <code>data4</code> 创建</li>
</ul>
<p>实际上，当使用普通对象创建 Blob 对象时，相当于调用了普通对象的 <code>toString</code> 方法得到字符串数据，然后再创建 Blob 对象。</p>
<p>所以 <code>blob5</code> 保存的数据是 <code>&quot;[object Object]&quot;</code>，是 15 个字节（不包含最外层的引号）。</p>
<h3>Blob URL</h3>
<p>Blob URL 是 Blob 协议的 URL，格式如下：</p>
<pre class="hljs"><code>blob:http://xxx
</code></pre>
<p>&lt;br /&gt;</p>
<p>&lt;code src=&quot;../../../example/binary-data/blob-url/index.tsx&quot; /&gt;</p>
<p>和冗长的 Base64 格式的 Data URL 相比，Blob URL 的长度显然不能够存储足够的信息，这也就意味着它只是类似于一个浏览器内部的 <strong>引用</strong>。</p>
<p>从这个角度来看，Blob URL 是 <strong>浏览器自行制定的伪协议</strong>。</p>
<p>常见的应用场景：</p>
<ul>
<li>作为文件的下载地址</li>
<li>作为图片资源地址</li>
<li>本地视频文件上传前播放器的预览地址</li>
</ul>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://juejin.im/post/59e35d0e6fb9a045030f1f35" target="_blank" rel="noopener noreferrer nofollow">细说 Web API 中的 Blob</a></li>
<li><a href="https://juejin.im/post/5b544b01f265da0f800ddece" target="_blank" rel="noopener noreferrer nofollow">Web 开发中 Blob 与 FileAPI 使用简述</a></li>
<li><a href="https://juejin.im/post/5b5187da51882519ec07fa41" target="_blank" rel="noopener noreferrer nofollow">前端图片 canvas，file，blob，DataURL 等格式转换</a></li>
<li><a href="https://blog.csdn.net/cuixiping/article/details/45932793" target="_blank" rel="noopener noreferrer nofollow">DataURL 与 File,Blob,canvas 对象之间的互相转换的 JavaScript</a></li>
<li><a href="https://blog.csdn.net/wangzhanzheng/article/details/78923013" target="_blank" rel="noopener noreferrer nofollow">前端图片转 base64，转格式，转 blob，上传的总结</a></li>
<li><a href="https://juejin.im/post/5a193b4bf265da43052e528a" target="_blank" rel="noopener noreferrer nofollow">前端本地文件操作与上传</a></li>
<li><a href="https://juejin.im/post/5f0fa5626fb9a07e765512b2" target="_blank" rel="noopener noreferrer nofollow">遇见 Blob</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Blob API"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

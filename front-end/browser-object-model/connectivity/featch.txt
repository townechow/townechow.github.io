1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","browser-object-model","connectivity","featch"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/connectivity/featch","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/connectivity/featch","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","F7FluvfMzwJdLEwRqxdru",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3b2c,<h1>Fetch API</h1>
<p>Fetch API 提供了一个获取资源的接口（包括跨域），在功能上与 XMLHttpRequest 有很多相似的地方，但被设计成更具可扩展性和高效性。</p>
<p>Fetch 的核心在于对 HTTP 接口的抽象，包括 Request、Response、Headers、Body，以及用于初始化异步请求的 global fetch。得益于 JavaScript 实现的这些抽象好的 HTTP 模块，其他接口能够很方便的使用这些功能。</p>
<p><strong>PC 浏览器兼容性</strong></p>
<table>
<thead>
<tr>
<th>Chrome</th>
<th>Opera</th>
<th>Firefox</th>
<th>IE</th>
<th>Edge</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td>42</td>
<td>29</td>
<td>39</td>
<td>No</td>
<td>14</td>
<td>10.1</td>
</tr>
</tbody>
</table>
<p><strong>Mobile 浏览器兼容性</strong></p>
<table>
<thead>
<tr>
<th>iOS Safari</th>
<th>Opera Mobile</th>
<th>Opera Mini</th>
<th>Android</th>
<th>Android Chrome</th>
<th>Android Firefox</th>
</tr>
</thead>
<tbody>
<tr>
<td>10.3</td>
<td>46</td>
<td>No</td>
<td>67</td>
<td>70</td>
<td>63</td>
</tr>
</tbody>
</table>
<h2>语法</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Promise</span> <span class="hljs-title function_">fetch</span>(input, init)
</code></pre>
<h3>参数</h3>
<ul>
<li>input: 定义要获取的资源，这可能是
<ul>
<li>一个 String 字符串，包含要获取资源的 URL</li>
<li>一个 Request 对象</li>
</ul>
</li>
<li>init：[可选]一个配置项对象，包括所有对请求的设置，可选参数有
<ul>
<li>method：请求使用的方法，如 GET、POST、PUT、DELETE 等</li>
<li>headers：请求的头信息，形式为 Headers 的对象或包含 ByteString 值的对象字面量</li>
<li>body：请求的 body 信息：可能是一个 Blob、BufferSource、FormData</li>
<li>URLSearchParams 或者 String 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息</li>
<li>mode：请求的模式，如 cors、no-cors 或者 same-origin</li>
<li>credentials：请求的 credentials，如 omit、same-origin 或者 include。为了当前域名内自动发送 cookie，必须提供这个选项，从 Chorme 50 实例，这个属性也可以受 FederateCrential 实例或是一个 PasswwordCredential 实例</li>
<li>cache：请求的 cache 模型：default、no-store、reload、no-cache、force-cache 或者 only-if-cached</li>
<li>redirect：可用的 redirect 模式：follow（自动重定向），error（如果产生重定向将自动终止并且抛出一个错误）</li>
<li>referer：一个 USVSting 可以是 no-referrer、click 或一个 URL。默认 client。</li>
<li>downgrade、orign、orgin-when-cross-origin、unsafe-url</li>
<li>integrity：包括请求的 subresource integrity 值</li>
</ul>
</li>
</ul>
<h2>Guard</h2>
<p>Guard 事 Headers 对象的特征。</p>
<p>当使用 <code>Headers()</code> 构造函数创建一个新的 Headers 对象的时候，它的 Guard 被设置成 <code>none</code>（默认值）。</p>
<p>当创建 Request 和 Response 对象的时候，它将拥有一个按照以下规则实现的与之相关联的 Headers 对象。</p>
<h2>Headers</h2>
<p>Headers 类（请求头对象）能用于对 HTTP <code>request</code> 和 <code>response</code> 的检索、设置、添加和删除等各种操作。</p>
<p>每个 Headers 类包含一个 Headers 列表，它的初始值为空或者零个或多个键值对。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>append()</code></td>
<td>添加一个 header 信息</td>
</tr>
<tr>
<td><code>delete()</code></td>
<td>删除指定的 header</td>
</tr>
<tr>
<td><code>entries()</code></td>
<td>返回 header 对象中的所有键值对，是一个 Iterator 对象</td>
</tr>
<tr>
<td><code>get()</code></td>
<td>从 Headers 对象中返回指定的值</td>
</tr>
<tr>
<td><code>getAll()</code></td>
<td>获取所有的 header</td>
</tr>
<tr>
<td><code>has()</code></td>
<td>检测指定的 header 的键，返回布尔值</td>
</tr>
<tr>
<td><code>keys()</code></td>
<td>获取所有 header 的键，是一个 Iterator 对象</td>
</tr>
<tr>
<td><code>set()</code></td>
<td>修改或添加 header</td>
</tr>
<tr>
<td><code>values()</code></td>
<td>获取所有 header 的值，是一个 Iterator 对象</td>
</tr>
</tbody>
</table>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> content = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;

<span class="hljs-keyword">let</span> reqHeaders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>();

reqHeaders.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>);
reqHeaders.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;Content-Length&#x27;</span>, content.<span class="hljs-property">length</span>.<span class="hljs-title function_">toString</span>());
reqHeaders.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>, <span class="hljs-string">&#x27;ProcessThisImmediately&#x27;</span>);
</code></pre>
<p>也可以是个对象。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> reqHeaders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>({
  <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>,
  <span class="hljs-string">&#x27;Content-Length&#x27;</span>: content.<span class="hljs-property">length</span>.<span class="hljs-title function_">toString</span>(),
  <span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>: <span class="hljs-string">&#x27;ProcessThisImmediately&#x27;</span>,
});
</code></pre>
<h2>Request</h2>
<p>Request 对象是 FetchAPI 的资源请求对象。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Request</span>(url, options);
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>请求 URL</td>
<td>string</td>
</tr>
<tr>
<td><code>options</code></td>
<td>配置对象</td>
<td>object</td>
</tr>
</tbody>
</table>
<h3>属性方法</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>method</code></td>
<td>请求方法</td>
</tr>
<tr>
<td><code>url</code></td>
<td>请求地址</td>
</tr>
<tr>
<td><code>headers</code></td>
<td>请求头（可是 Headers 对象，可以是对象）</td>
</tr>
<tr>
<td><code>context</code></td>
<td>请求上下文</td>
</tr>
<tr>
<td><code>referrer</code></td>
<td>指定请求源地址</td>
</tr>
<tr>
<td><code>mode</code></td>
<td>请求模式（是跨域 cors 还是正常 no-cors）</td>
</tr>
<tr>
<td><code>credentials</code></td>
<td>跨域请求时，是否携带 Cookie 信息（omit 跨域携带/sam-origin 同源携带）</td>
</tr>
<tr>
<td><code>redirect</code></td>
<td>重定向</td>
</tr>
<tr>
<td><code>integrity</code></td>
<td>一个散列值，用于检验请求资源的完整性</td>
</tr>
<tr>
<td><code>cache</code></td>
<td>是否缓存这个资源</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clone()</code></td>
<td>复制一个当前 Request 对象的实例</td>
</tr>
</tbody>
</table>
<h3>示例</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> requst = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>, {
  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
  <span class="hljs-attr">headers</span>: {},
  <span class="hljs-attr">body</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;login-form&#x27;</span>)),
  <span class="hljs-attr">cache</span>: <span class="hljs-string">&#x27;default&#x27;</span>,
});
</code></pre>
<h2>Body</h2>
<p>Fetch mixin 对象，提供了关联 response/request 中 body 的方法，可以定义它的文档类型以及请求如何被处理。</p>
<p><code>Request</code>  和  <code>Response</code>  对象都实现了 Body 的接口，所以都拥有 Body 的方法和属性，用于指定请求体中的 body 或响应体的内容的数据类型（<code>arrayBuffer/blob /json/text</code>) 主要是做数据类型的转换。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bodyUsed</code></td>
<td>用于判断是否在响应体中是否设置过 body 读取类型</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>arrayBuffer()</code></td>
<td>将响应流转换为 Buffer 数组的 Promise 对象，并将 <code>bodyUsed</code> 状态改为已使用</td>
</tr>
<tr>
<td><code>blob()</code></td>
<td>将响应流转换为大的二进制的 Promise 对象，并将 <code>bodyUsed</code>   状态改为已使用，一般用于文件读取（下载大文件或视频）</td>
</tr>
<tr>
<td><code>formData()</code></td>
<td>将响应流转换为 formData 的 Promise 对象，并将 <code>bodyUsed</code> 状态改为已使用</td>
</tr>
<tr>
<td><code>json()</code></td>
<td>将响应流转换为 json 的 Promise 对象，并将 <code>bodyUsed</code> 状态改为已使用</td>
</tr>
<tr>
<td><code>text()</code></td>
<td>将响应流转换为文本字符串的 Promise 对象，并将 <code>bodyUsed</code> 状态改为已使用</td>
</tr>
</tbody>
</table>
<h2>Response</h2>
<p>Request 对象是 FetchAPI 的资源响应对象。</p>
<table>
<thead>
<tr>
<th>属性（只读）</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>响应的类型 basic/cors 等</td>
</tr>
<tr>
<td><code>url</code></td>
<td>包含 Response 的 URL</td>
</tr>
<tr>
<td><code>useFinalURL</code></td>
<td>包含了一个布尔值来标示这是否是该 Response 的最终 URL</td>
</tr>
<tr>
<td><code>status</code></td>
<td>响应码</td>
</tr>
<tr>
<td><code>ok</code></td>
<td>表示响应成功</td>
</tr>
<tr>
<td><code>statusText</code></td>
<td>状态码信息</td>
</tr>
<tr>
<td><code>headers</code></td>
<td>响应头的 Headers 对象</td>
</tr>
<tr>
<td><code>bodyUsed</code></td>
<td>是否设置过响应内容的类型</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clone()</code></td>
<td>创建一个 Response 对象的克隆</td>
</tr>
<tr>
<td><code>error()</code></td>
<td>返回一个绑定了网络错误的新的 Response 对象</td>
</tr>
<tr>
<td><code>redirect()</code></td>
<td>用另一个 URL 创建一个新的 Response</td>
</tr>
</tbody>
</table>
<h2>fetch()</h2>
<p><code>fetch()</code> 方法用于发起获取资源的请求，它返回一个 Promise 对象，这个 Promise 对象会在请求响应后将状态变更为 Resolved，并返回 Response 对象。</p>
<h3>示例</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;api/data.json&#x27;</span>, {
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,			<span class="hljs-comment">// 请求类型</span>
    <span class="hljs-attr">headers</span>: {},			<span class="hljs-comment">// 请求头</span>
    <span class="hljs-attr">body</span>: {},				<span class="hljs-comment">// 请求体</span>
    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;&#x27;</span>,				<span class="hljs-comment">// 请求模式</span>
    <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;&#x27;</span>,		<span class="hljs-comment">// Cookie的跨域策略</span>
    <span class="hljs-attr">cache</span>: <span class="hljs-string">&#x27;&#x27;</span>,				<span class="hljs-comment">// 请求的Cache模式</span>
}).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {...})
</code></pre>
<h3>mode</h3>
<ul>
<li><code>no-cors</code>：允许来自 CDN 的脚本、其他域的图片和其他一些跨域资源，但是首先有个前提条件，就是请求的 <code>method</code> 只能是 HEAD、GET 或者 POST。此外，任何 ServiceWorkers 拦截了这些请求，它不能随意添加或者改写任何 <code>header</code>。其次，JavaScript 不能访问 Response 中的任何属性，这保证了 ServiceWorkers 不会导致任何跨域下的安全问题而隐私信息泄漏。</li>
<li><code>cors</code>：通常用作跨域请求来从第三方提供的 API 获取数据。这个模式遵守 CORS 协议。只有有限的一些 <code>header</code> 被暴露给 Response 对象，但是 <code>body</code> 是可读的。</li>
<li><code>same-origin</code>：如果一个请求是跨域的，那么返回一个简单的 <code>error</code>，这样确保所有的请求遵守同源策略。</li>
</ul>
<h3>cache</h3>
<ul>
<li><code>default</code>：缓存相同的请求</li>
<li><code>no-store</code>：不缓存任何请求</li>
<li><code>reload</code>：创建一个正常的请求，并用响应更新 HTTP 缓存</li>
<li><code>no-cache</code>：如果 HTTP 缓存中有响应，并且不是正常请求，则 Fetch 创建条件请求。然后，它使用响应更新 HTTP 缓存。</li>
<li><code>force-cache</code>：Fetch 使用 HTTP 缓存中与请求匹配的任何响应，不管是否过期。如果没有响应，则会创建正常请求，并使用响应更新 HTTP 缓存。</li>
<li><code>only-if-cached</code>：Fetch 使用 HTTP 缓存中与请求匹配的任何响应，不管是否过期。如果没有响应，则返回网络错误。 （只有当请求的模式为 <code>same-origin</code> 时，才能使用任何缓存重定向，假设请求的重定向模式为 <code>follow</code>，重定向不会违反请求的模式）。</li>
</ul>
<p>如果 <code>header</code> 中包含名称为 <code>If-Modified-Since</code>、<code>If-None-Match</code>、<code>If-Unmodified-Since</code>，<code>If-Match</code> 和 <code>If-Range</code> 之一，如果是 <code>default</code>，Fetch 会将  <code>cache</code>  自动设置为  <code>no-store</code>。</p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API" target="_blank" rel="noopener noreferrer nofollow">MDN web docs：Fetch API</a></li>
<li><a href="http://www.cnblogs.com/wonyun/p/fetch_polyfill_timeout_jsonp_cookie_progress.html" target="_blank" rel="noopener noreferrer nofollow">Fetch 使用的常见问题及解决办法</a></li>
<li><a href="https://segmentfault.com/a/1190000007019545" target="_blank" rel="noopener noreferrer nofollow">Fetch 用法说明</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

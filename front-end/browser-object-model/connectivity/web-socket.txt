1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","browser-object-model","connectivity","web-socket"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/connectivity/web-socket","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/connectivity/web-socket","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","-l0Zvvc83wNpO8bGaSHLu",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3a0d,<h1>Web Socket</h1>
<p>WebSocket 作为 HTML5 一种新的协议，实现了浏览器和服务器双全工通信（full-duplex）。</p>
<ul>
<li>连接协商和同源策略</li>
<li>与既有 HTTP 基础设施的互操作</li>
<li>基于消息的通信和高效消息分帧</li>
<li>子协议协商及可扩展能力</li>
</ul>
<h2>建立通信</h2>
<p>WebSocket 通过构造函数创建一个 WebSocket 用于与服务器进行连接，返回一个 WebSocket 实例。通过这个实例监听事件，这些事件可以让我们知道<strong>什么时候建立连接</strong>，<strong>什么时候服务器发消息过来</strong>，<strong>什么时候发生了故障</strong>，<strong>什么时候关闭连接</strong>。</p>
<h3>语法</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">WebSocket</span>(url [, protocols])
</code></pre>
<ul>
<li><code>url</code>：<code>ws(wss)://ip:port/url</code> （wss 是 WebSocketSource 缩写）</li>
<li><code>protocols</code>：可以使用的字协议包括 XMPP（可扩展息处理现场协议）、SOAP（简单对象访问协议）或者自定义协议</li>
</ul>
<h3>属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>onopen</code></td>
<td>服务器响应 WebSocket 连接请求后的回调函数</td>
<td>EventListener</td>
</tr>
<tr>
<td><code>onmessage</code></td>
<td>接收到来自服务器的数据时触发的回调函数（WebSocket 还可以处理二进制数据，这种数据作为 Blob 消息或者 ArrayBuffer 消息。因为设置 WebSocket 消息二进制数据类型的应用会影响二进制消息，所以必须在读取数据之前决定用于客户端的二进制数据的类型）</td>
<td>EventListener</td>
</tr>
<tr>
<td><code>onerror</code></td>
<td>响应意外故障的时候出发，如果你接收一个 Error 事件，可以预期很快就会触发 <code>close</code> 事件。Error 事件处理程序时调用服务器重连逻辑以及处理来自 WebSocket 对象的异常的最佳场所。</td>
<td>EventListener</td>
</tr>
<tr>
<td><code>onclose</code></td>
<td>WebSocket 连接关闭后的回调函数</td>
<td>EventListener</td>
</tr>
<tr>
<td><code>binaryType</code></td>
<td>指示由连接发送的二进制数据的类型的字符串</td>
<td>DOMString</td>
</tr>
<tr>
<td><code>bufferedAmount</code></td>
<td>（只读）未发送至服务器的字节数</td>
<td>unsigned long</td>
</tr>
<tr>
<td><code>extensions</code></td>
<td>（只读）服务器选择的扩展</td>
<td>DOMString</td>
</tr>
<tr>
<td><code>protocol</code></td>
<td>服务器选择的下属协议</td>
<td>DOMString</td>
</tr>
<tr>
<td><code>readyState</code></td>
<td>当前的连接状态</td>
<td>unsigned short</td>
</tr>
<tr>
<td><code>url</code></td>
<td>（只读）WebSocket 的绝对路径</td>
<td></td>
</tr>
</tbody>
</table>
<h3>连接状态</h3>
<p><code>readyState</code> 报告连接状态：</p>
<table>
<thead>
<tr>
<th>特性常量</th>
<th>值</th>
<th>状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>WebSocket.CONNECTING</td>
<td>0</td>
<td>连接正在进行中，但还未建立</td>
</tr>
<tr>
<td>WebSocket.OPEN</td>
<td>1</td>
<td>连接已经建立，消息可以在客户端接收</td>
</tr>
<tr>
<td>WebSocket.CLOSING</td>
<td>2</td>
<td>连接正在进行关闭握手</td>
</tr>
<tr>
<td>WebSocket.CLOSED</td>
<td>3</td>
<td>连接以及功能关闭，不能打开</td>
</tr>
</tbody>
</table>
<h3>方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>close([code [, reason]])</code></td>
<td>关闭当前链接（<code>code</code> 可选参数，指示状态代码的数字值，解释连接正在关闭的原因。如果未指定此参数，则假定默认值为 1000（表示正常的“事务完成”关闭）；<code>reason</code> 可选参数，一个人类可读的字符串，解释连接正在关闭的原因。该字符串必须不超过 123 个字符的 UTF-8 文本）</td>
</tr>
<tr>
<td><code>send(data)</code></td>
<td>连接打开时向服务器发送数据</td>
</tr>
</tbody>
</table>
<h4>Code 附录</h4>
<table>
<thead>
<tr>
<th>状态代码</th>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000</td>
<td>正在关闭</td>
<td>会话成功完成时发送此状态码</td>
</tr>
<tr>
<td>1001</td>
<td>离开</td>
<td>因应用程序离开且不期望后续的连接尝试而关闭连接时，发送此状态码。服务器可能关闭，或者客户端应用程序可能关闭</td>
</tr>
<tr>
<td>1002</td>
<td>协议错误</td>
<td>当因协议错误而关闭连接时发送此状态码</td>
</tr>
<tr>
<td>1003</td>
<td>不可接受的数据类型</td>
<td>当应用程序接收到一条无法处理的意外类型消息时发送此状态码</td>
</tr>
<tr>
<td>1004</td>
<td>保留</td>
<td>禁用状态码。根据 RFC 6455，这个状态码保留，可能在未来定义</td>
</tr>
<tr>
<td>1005</td>
<td>保留</td>
<td>禁用状态码。WebSocket API 用此状态码表示没有接收到任何代码</td>
</tr>
<tr>
<td>1006</td>
<td>保留</td>
<td>禁用状态码。WebSocket API 用此状态码表示连接异常关闭</td>
</tr>
<tr>
<td>1007</td>
<td>无效数据</td>
<td>在接收一个格式与消息类型不匹配的消息之后发送此状态码。如果文本消息包含错误格式的 UTF-8 数据，连接应该用这个代码关闭</td>
</tr>
<tr>
<td>1008</td>
<td>消息违反政策</td>
<td>当应用程序由于其他代码所不包含的原因终止连接，或者不希望泄露消息无法处理的原因时返回此状态码</td>
</tr>
<tr>
<td>1009</td>
<td>消息过大</td>
<td>当接收的消息太大，应用程序无法处理时发送此状态码（记住，帧的载荷长度最多为 64 字节。即使你有一个大服务器，有些消息也仍然过大）。</td>
</tr>
<tr>
<td>1010</td>
<td>需要扩展</td>
<td>当应用程序需要一个或者多个服务器无法协商的特殊扩展时，从客户端（浏览器）发送此状态码。</td>
</tr>
<tr>
<td>1011</td>
<td>意外情况</td>
<td>当应用程序由于不可预见的原因，无法继续处理连接时，发送此状态码</td>
</tr>
<tr>
<td>1015</td>
<td>TLS 失败（保留）</td>
<td>禁用状态码。WebSocket API 用这个代码表示 TLS 在 WebSocket 握手之前失败。</td>
</tr>
<tr>
<td>0~999</td>
<td>禁止</td>
<td>1000 以下的代码是无效的，不能用于任何目的</td>
</tr>
<tr>
<td>1000~2999</td>
<td>保留</td>
<td>这些代码保留以用于扩展和 WebSocket 协议的修订版本。按照标准规定使用这些代码，参见表 3-4</td>
</tr>
<tr>
<td>3000~3999</td>
<td>需要注册</td>
<td>这些状态码用于“程序库、框架和应用程序”。这些状态码应该在 IANA（互联网编号分配机构）公开注册</td>
</tr>
<tr>
<td>4000~4999</td>
<td>私有</td>
<td>在应用程序中将这些状态码用于自定义用途。因为它们没有注册，所以不要期望它们能被其他 WebSocket 广泛理解</td>
</tr>
</tbody>
</table>
<h3>示例</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 创建安全的WebSocket连接(wss)</span>
<span class="hljs-keyword">const</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://github.websocket.org&#x27;</span>);

<span class="hljs-comment">// 连接建立时调用</span>
ws.<span class="hljs-title function_">addEventListener</span>(
  <span class="hljs-string">&#x27;open&#x27;</span>,
  <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-comment">// 向服务端发送消息</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;TEST!&#x27;</span>);
  },
  <span class="hljs-literal">false</span>
);

<span class="hljs-comment">// 接收服务端响应的消息</span>
ws.<span class="hljs-title function_">addEventListener</span>(
  <span class="hljs-string">&#x27;message&#x27;</span>,
  <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">data</span>);
  },
  <span class="hljs-literal">false</span>
);

<span class="hljs-comment">// 连接关闭时调用</span>
ws.<span class="hljs-title function_">addEvenetListener</span>(
  <span class="hljs-string">&#x27;close&#x27;</span>,
  <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocketClosed!&#x27;</span>);
  },
  <span class="hljs-literal">false</span>
);

<span class="hljs-comment">// 连接错误时调用(并且会关闭连接)</span>
ws.<span class="hljs-title function_">addEventListener</span>(
  <span class="hljs-string">&#x27;error&#x27;</span>,
  <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocketError!&#x27;</span>);
  },
  <span class="hljs-literal">false</span>
);
</code></pre>
<pre class="hljs"><code class="language-js">ws.<span class="hljs-property">binaryType</span> = <span class="hljs-string">&#x27;blob&#x27;</span>;

ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">data</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Blob</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Blob&#x27;</span>, e.<span class="hljs-property">data</span>);
    <span class="hljs-keyword">const</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>(e.<span class="hljs-property">data</span>);
  }
};
</code></pre>
<pre class="hljs"><code class="language-js">ws.<span class="hljs-property">binaryType</span> = <span class="hljs-string">&#x27;arraybuffer&#x27;</span>;

ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">data</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">ArrayBuffer</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ArrayBuffer&#x27;</span>, e.<span class="hljs-property">data</span>);
    <span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(e.<span class="hljs-property">data</span>);
  }
};
</code></pre>
<h2>WebSocket 协议</h2>
<p>WebSocket 协议有两部分：握手、数据传输。</p>
<h3>握手请求</h3>
<p>WebSocket 协议是为了浏览器实现与服务器的全双工通信和 HTTP 协议在浏览器端的广泛应用，因此 WebSocket 的握手是 HTTP 请求的升级。</p>
<p>建立 WebSocket 连接的请求头：</p>
<pre class="hljs"><code class="language-http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/chat</span> <span class="hljs-meta">HTTP/1.1</span>
<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>server.example.com
<span class="hljs-attribute">Upgrade</span><span class="hljs-punctuation">: </span>websocket
<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>Upgrade
<span class="hljs-attribute">Sec-WebSocket-Key</span><span class="hljs-punctuation">: </span>x3JJHMbDL1EzLkh9GBhXDw==
<span class="hljs-attribute">Sec-WebSocket-Protocol</span><span class="hljs-punctuation">: </span>chat, superchat
<span class="hljs-attribute">Sec-WebSocket-Version</span><span class="hljs-punctuation">: </span>13
<span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://example.com
</code></pre>
<table>
<thead>
<tr>
<th>头字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Host</td>
<td>（必填）WebSocket 服务器主机名</td>
</tr>
<tr>
<td>Upgrade</td>
<td>（必填）值必须为 <code>websocket</code></td>
</tr>
<tr>
<td>Connection</td>
<td>（必填）值必须为 <code>Upgrade</code></td>
</tr>
<tr>
<td>Sec-WebSocket-Key</td>
<td>（必填）Base64 encode 编码的随机 16 字节长的字符序列</td>
</tr>
<tr>
<td>Sec-WebSocket-Protocol</td>
<td>（选填）可用选项有子协议选择器</td>
</tr>
<tr>
<td>Sec-WebSocket-Version</td>
<td>（必填）WebSocket Draft（协议版本）</td>
</tr>
<tr>
<td>Origin</td>
<td>（浏览器必填）头域（ RFC6454） 用于保护 WebSocket 服务器不被未授权的运行在浏览器的脚本跨源使用 WebSocket API</td>
</tr>
</tbody>
</table>
<p>WebSocket 客户端将上述请求发送到服务器。如果是调用浏览器的 WebSocket API，浏览器会自动完成完成上述请求头。</p>
<h2>相关类库</h2>
<ul>
<li>react-websocket</li>
</ul>
<h2>兼容性</h2>
<p>语法部分错误</p>
<table>
<thead>
<tr>
<th>IE</th>
<th>Edge</th>
<th>Firefox</th>
<th>Chrome</th>
<th>Safari</th>
<th>Opera</th>
</tr>
</thead>
<tbody>
<tr>
<td>11</td>
<td>18</td>
<td>63</td>
<td>70</td>
<td>12</td>
<td>56</td>
</tr>
</tbody>
</table>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 兼容代码</span>
<span class="hljs-keyword">const</span> ws = <span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span>
  ? <span class="hljs-keyword">new</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title class_">WebSocket</span>(url, protocol)
  : <span class="hljs-keyword">new</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title class_">MozWebSocket</span>(url, protocol);
</code></pre>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://juejin.im/entry/58bd0579128fe1007e5c62c7" target="_blank" rel="noopener noreferrer nofollow">WebSocket 浅析</a></li>
<li><a href="https://juejin.im/entry/57a993750a2b5800586a9d3f" target="_blank" rel="noopener noreferrer nofollow">WebSocket 粗谈</a></li>
<li><a href="https://juejin.im/post/5a1bdf676fb9a045055dd99d" target="_blank" rel="noopener noreferrer nofollow">WebSocket 探秘</a></li>
<li><a href="https://www.cnblogs.com/houjl/p/10812519.html" target="_blank" rel="noopener noreferrer nofollow">React 加入 WebSocket</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

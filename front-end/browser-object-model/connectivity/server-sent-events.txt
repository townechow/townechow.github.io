1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","browser-object-model","connectivity","server-sent-events"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/connectivity/server-sent-events","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/connectivity/server-sent-events","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","xH-LpY2VDgNbfN2XeBKdU",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T39fc,<h1>Server-sent Events</h1>
<p>服务器向浏览器推送消息，除了 WebSocket，还有一种方法：Sever-sent Events（以下简称 SSE）。</p>
<p>W3C 关于 Server-Sent Events 部分的描述 <a href="https://www.w3.org/TR/eventsource/" target="_blank" rel="noopener noreferrer nofollow">W3C Server-Sent Events</a></p>
<p>相比以往的轮询，SSE 可以为 B2C 带来更高的效率。</p>
<img alt="Server-sent Events" src="../../assets/server-sent-events/sever-sent-worker.png" width="720" /><h2>本质</h2>
<p>严格来说，HTTP 协议无法让服务器向客户端主动推送消息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息（Streaming）。</p>
<p>也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。</p>
<p>SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。</p>
<h2>特点</h2>
<p>SSE 与 WebSocket 作用相似，都是建立浏览器与服务器之间的通信渠道，然后服务器向浏览器推送信息。</p>
<p>总体来说，WebSocket 更强大和灵活。因为它是全双工通道，可以双向通信；SSE 是<strong>单向通道</strong>，只能服务器向浏览器发送，因为流信息本质上就是下载。如果浏览器向服务器发送信息，就变成了另一次 HTTP 请求。</p>
<p>虽然如此，SSE 在设计时就拥有了一些 WebSocket 没有的特性，例如自动重连接、Event IDs 以及发送随机事件的能力等，我们需要根据实际应用场景，去选择不同的应用方案。</p>
<p><strong>SSE 优点：</strong></p>
<ul>
<li>SSE 基于 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。</li>
<li>SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。</li>
<li>SSE 默认支持断线重连，WebSocket，需要自己实现。</li>
<li>SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket，默认支持传送二进制数据。</li>
<li>SSE 支持自定义发送的消息类型。</li>
</ul>
<p><strong>SSE 和 WebSocket 对比</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>是否基于新协议</th>
<th>是否双向通信</th>
<th>是否支持跨域</th>
<th>接入成本</th>
</tr>
</thead>
<tbody>
<tr>
<td>SSE</td>
<td>否（<code>HTTP</code>）</td>
<td>否（服务器单向）</td>
<td>否（Firefox 支持）</td>
<td>低</td>
</tr>
<tr>
<td>WebSocket</td>
<td>是（<code>WS</code>）</td>
<td>是</td>
<td>是</td>
<td>高</td>
</tr>
</tbody>
</table>
<h2>客户端实现</h2>
<p>EventSource 接口用于接收服务器发送的事件。它通过 HTTP 连接到一个服务器，以 <code>text/event-stream</code> 格式接收事件，不关闭连接。</p>
<ul>
<li>浏览器生成 EventSource 实例，向服务器发起连接。</li>
<li>建立 EventSource 实例时，构造函数接收当前网址网域作为第一参数，也可以跨域。跨域时，可以指定第二个参数，打开 <code>withCredentials</code> 属性，表示是否一起发送 Cookie。</li>
<li>EventSource 实例的 <code>readyState</code> 属性，表明连接的当前状态。该属性只读，只可以取以下值。
<ul>
<li><code>0</code>：相当于常量 <code>EventSource.CONNECTING</code>，表示连接还未建立，或者断线正在重连。</li>
<li><code>1</code>：相当于常量 <code>EventSource.OPEN</code>，表示连接已经建立，可以接受数据。</li>
<li><code>2</code>：相当于常量 <code>EventSource.CLOSED</code>，表示连接已断，且不会重连。</li>
</ul>
</li>
<li>连接一旦建立，就会触发 <code>open</code> 事件，可以在 <code>onopen</code> 属性定义回调函数。（连接事件源）</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;EventSource&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>) {
  <span class="hljs-keyword">const</span> source = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventSource</span>(url, { <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span> });

  source.<span class="hljs-title function_">addEventListener</span>(
    <span class="hljs-string">&#x27;open&#x27;</span>,
    <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> {
      <span class="hljs-comment">// ...</span>
    },
    <span class="hljs-literal">false</span>
  );
}
</code></pre>
<ul>
<li>客户端收到服务器发来的数据，就会触发 <code>message</code> 事件，可以在 <code>onmessage</code> 属性的回调函数。（接收事件）</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code>source.<span class="hljs-title function_">addEventListener</span>(
  <span class="hljs-string">&#x27;message&#x27;</span>,
  <span class="hljs-function"><span class="hljs-params">evnet</span> =&gt;</span> {
    <span class="hljs-keyword">const</span> data = event.<span class="hljs-property">data</span>;
    <span class="hljs-comment">// handle message</span>
  },
  <span class="hljs-literal">false</span>
);
</code></pre>
<ul>
<li>上述代码中，事件对象 <code>data</code> 属性就是服务器端传回的数据（文本格式）。</li>
<li>如果发生通信错误（比如连接中断），就会触发 <code>error</code> 事件，可以在 <code>onerror</code> 属性定义回调函数。（错误处理）</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code>source.<span class="hljs-title function_">addEventListener</span>(
  <span class="hljs-string">&#x27;error&#x27;</span>,
  <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> {
    <span class="hljs-comment">// handle error event</span>
  },
  <span class="hljs-literal">false</span>
);
</code></pre>
<ul>
<li><code>close()</code> 方法用于关闭 SSE 连接。（主动断开连接）</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code>source.<span class="hljs-title function_">close</span>();
</code></pre>
<p><strong>自定义事件</strong></p>
<p>默认情况下，服务器发来的数据，总是触发浏览器 <code>EventSource</code> 实例的 <code>message</code> 事件。开发者还可以自定义 SSE 事件，这种情况下，发送回来的数据不会触发 <code>message</code> 事件。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>source.<span class="hljs-title function_">addEventListener</span>(
  <span class="hljs-string">&#x27;foo&#x27;</span>,
  <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
    <span class="hljs-keyword">var</span> data = event.<span class="hljs-property">data</span>;
    <span class="hljs-comment">// handle message</span>
  },
  <span class="hljs-literal">false</span>
);
</code></pre>
<p>上面代码中，浏览器对 SSE 的<code>foo</code>事件进行监听。如何实现服务器发送 <code>foo</code> 事件，请看下文。</p>
<h2>服务器实现</h2>
<h2>数据格式</h2>
<p>服务器高速客户端，返回的类型是事件流 <code>text/event-stream</code>。事件流仅仅是一个简单的文本数据流，文本应该使用 UTF-8 格式的编码。每条消息后面都由一个空行作为分隔符。以冒号开头的行为注释行，会被忽略。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/event-stream
<span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache
<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive
</code></pre>
<ul>
<li>SSE 的 MIME Type 规定为 <code>text/event-stream</code></li>
<li>SSE 肯定不允许缓存</li>
<li>SSE 是一个一直打开的 TCP 连接，所以 Connection 为 Keep-alive</li>
</ul>
<p>每次发送的消息，由若干个 <code>message</code> 组成，每个 <code>message</code> 之间用 <code>\n\n</code> 分隔。每个 <code>message</code> 内部由若干行组成，每一行都是如下格式。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code>[field]: value\n
</code></pre>
<p><code>filed</code> 可能的类型包括：</p>
<ul>
<li>空：表示该行是注释，会在处理时被忽略。</li>
<li>data：表示该行包含的是数据。以 data 开头的行可以出现多次。所有这些行都是该事件的数据。</li>
<li>event：表示该行用来声明事件的类型。浏览器在收到数据时，会产生对应类型的事件。</li>
<li>id：表示该行用来声明事件的标识符。</li>
<li>retry：表示该行用来声明浏览器在连接断开之后进行再次连接之前的等待时间。</li>
</ul>
<p>此外，还可以有冒号开头的行，表示注释。通常，服务器每隔一段时间就会向浏览器发送一个注释，保持连接不中断。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code>: This is a comment
</code></pre>
<h2>data 字段</h2>
<p>数据内容由 <code>data</code> 字段表示。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code><span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>message\n\n
</code></pre>
<p>如果数据很长，可以分成多行，最后一行以 <code>\n\n</code> 结尾，前面行都用 <code>\n</code> 结尾。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code><span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>begin message\n
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>continue message\n\n
</code></pre>
<p>下面是一个发送 JSON 数据的例子。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code><span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>{\n
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>&quot;foo&quot;: &quot;bar&quot;,\n
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>&quot;baz&quot;: &#x27;123&#x27;,\n
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>}\n\n
</code></pre>
<h2>id 字段</h2>
<p>数据标识符用 <code>id</code> 字段表示，相当于每一条数据的编号。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>msg1\n
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>message\n\n
</code></pre>
<p>浏览器用 <code>lastEventId</code> 属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的 <code>Last-Event-ID</code> 头信息，将这个值发送回来，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</p>
<h2>event 字段</h2>
<p><code>event</code> 字段表示自定义的事件类型，默认是 <code>message</code> 事件。浏览器可以用 <code>addEventListener()</code> 监听该事件。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code><span class="hljs-attribute">event</span><span class="hljs-punctuation">: </span>foo\n
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>a foo event\n\n

<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>an unnamed event\n\n

<span class="hljs-attribute">event</span><span class="hljs-punctuation">: </span>bar\n
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>a bar event\n\n
</code></pre>
<p>上面的代码创造了三条信息。第一条的名字是 <code>foo</code>，触发浏览器的 <code>foo</code> 事件；第二条未取名，表示默认类型，触发浏览器的 <code>message</code> 事件；第三条是 <code>bar</code>，触发浏览器的 <code>bar</code> 事件。</p>
<p>下面是另一个例子。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code><span class="hljs-attribute">event</span><span class="hljs-punctuation">: </span>userconnect
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>{&quot;username&quot;: &quot;bobby&quot;, &quot;time&quot;: &quot;02:33:48&quot;}

<span class="hljs-attribute">event</span><span class="hljs-punctuation">: </span>usermessage
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>{&quot;username&quot;: &quot;bobby&quot;, &quot;time&quot;: &quot;02:34:11&quot;, &quot;text&quot;: &quot;Hi everyone.&quot;}

<span class="hljs-attribute">event</span><span class="hljs-punctuation">: </span>userdisconnect
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>{&quot;username&quot;: &quot;bobby&quot;, &quot;time&quot;: &quot;02:34:23&quot;}

<span class="hljs-attribute">event</span><span class="hljs-punctuation">: </span>usermessage
<span class="hljs-attribute">data</span><span class="hljs-punctuation">: </span>{&quot;username&quot;: &quot;sean&quot;, &quot;time&quot;: &quot;02:34:36&quot;, &quot;text&quot;: &quot;Bye, bobby.&quot;}
</code></pre>
<h2>retry 字段</h2>
<p>服务器可以用 <code>retry</code> 字段，指定浏览器重新发起连接的时间间隔。</p>
<pre class="hljs language-http"  style=--lang:"http" ><code><span class="hljs-attribute">retry</span><span class="hljs-punctuation">: </span>10000\n
</code></pre>
<p>两种情况会导致浏览器重新发起连接：一种是时间间隔到期，二是由于网络错误等原因，导致连接出错。</p>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html" target="_blank" rel="noopener noreferrer nofollow">Server-sent Events 教程</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Server-sent_events/Using_server-sent_events" target="_blank" rel="noopener noreferrer nofollow">MDN:使用服务器发送事件</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/web/1307_chengfu_serversentevent/index.html" target="_blank" rel="noopener noreferrer nofollow">HTML5 服务器推送事件（Server-sent Events）实战开发</a></li>
<li><a href="https://blog.5udou.cn/blog/JSShi-Shi-Tong-Xin-San-Ba-Fu-Xi-Lie-Zhi-San-eventsource55" target="_blank" rel="noopener noreferrer nofollow">JS 实时通信三把斧系列之三：EventSource</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

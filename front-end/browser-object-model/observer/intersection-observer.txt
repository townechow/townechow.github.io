1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","browser-object-model","observer","intersection-observer"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","browser-object-model/observer/intersection-observer","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","browser-object-model/observer/intersection-observer","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","VE3xugdzxxKCYUCDN-MgZ",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T33c4,<h1>IntersectionObserver API</h1>
<p>网页开发时，常常需要了解某个元素是否进入了「视口」（Viewport），即用户能不能看到它。</p>
<p>传统的实现方法是，监听到 <code>scroll</code> 事件后，调用目标元素的 <code>getBoundingClientRect()</code> 方法，得到它对应于视口左上角的坐标，再判断是否在视口之内。这种方法的缺点是，由于 <code>scroll</code> 事件密集发生，计算量很大，容易造成性能问题。</p>
<p>目前有个新的 IntersectionObserver API，可以自动观察元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做 <strong>交叉视察器</strong>。</p>
<h2>API</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> io = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(callback, option);
</code></pre>
<p>IntersectionObserver 是浏览器原生提供的构造函数，接受两个参数：</p>
<ul>
<li><code>callback</code>：可见性变化时的回调函数</li>
<li><code>option</code>：配置对象（可选）</li>
</ul>
<p>构造函数的返回值是一个观察器实例，实例的 <code>observe</code> 方法可以指定观察哪个 DOM 节点。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 开始观察</span>
io.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>));

<span class="hljs-comment">// 停止观察</span>
io.<span class="hljs-title function_">unobserve</span>();

<span class="hljs-comment">// 关闭观察器</span>
io.<span class="hljs-title function_">disconnect</span>();
</code></pre>
<p>上图代码中，<code>observe</code> 的参数是一个 DOM 节点对象。如果要观察多个节点，就要多次调用这个方法。</p>
<pre class="hljs"><code class="language-js">io.<span class="hljs-title function_">observe</span>(elementA);
io.<span class="hljs-title function_">observe</span>(elementB);
</code></pre>
<h2>callback 参数</h2>
<p>目标元素的可见性变化时，就会调用观察器的回调函数 <code>callback</code>。</p>
<p><code>callback</code> 一般会出发两次。一次是目标元素刚刚进入视口（开始可见），另一次是完全离开视口（开始不可见）。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> io = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function"><span class="hljs-params">entries</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(entries));
</code></pre>
<p>上述代码中，回调函数采用的是箭头函数的写法。<code>callback</code> 函数的参数（<code>entries</code>）是一个数组，每个成员都是一个 IntersectionObserverEntry 对象。举例来说，如果同时有两个被观察的对象的可见性发生变化，<code>entries</code> 数组就会有两个成员。</p>
<h2>IntersectionObserverEntry 对象</h2>
<p>IntersectionObserverEntry 对象提供目标元素的信息，一共有六个属性。</p>
<pre class="hljs"><code class="language-js">{
  <span class="hljs-attr">time</span>: <span class="hljs-number">3893.92</span>,
  <span class="hljs-attr">rootBounds</span>: <span class="hljs-title class_">ClientRect</span> {
    <span class="hljs-attr">bottom</span>: <span class="hljs-number">920</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">1024</span>,
    <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">right</span>: <span class="hljs-number">1024</span>,
    <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">width</span>: <span class="hljs-number">920</span>
  },
  <span class="hljs-attr">boundingClientRect</span>: <span class="hljs-title class_">ClientRect</span> {
    <span class="hljs-comment">// ...</span>
  },
  <span class="hljs-attr">intersectionRect</span>: <span class="hljs-title class_">ClientRect</span> {
    <span class="hljs-comment">// ...</span>
  },
  <span class="hljs-attr">intersectionRatio</span>: <span class="hljs-number">0.54</span>,
  <span class="hljs-attr">target</span>: element
}
</code></pre>
<p>每个属性的含义如下：</p>
<ul>
<li><code>time</code>：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li>
<li><code>target</code>：被观察的目标元素，是一个 DOM 节点对象</li>
<li><code>rootBounds</code>：根元素的矩形区域的信息，<code>getBoundingClientRect()</code> 方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回 <code>null</code></li>
<li><code>boundingClientRect</code>：目标元素的矩形区域的信息</li>
<li><code>intersectionRect</code>：目标元素与视口（或根元素）的交叉区域的信息</li>
<li><code>intersectionRatio</code>：目标元素的可见比例，即 intersectionRect 占 boundingClientRect 的比例，完全可见时为 1，完全不可见时小于等于 0</li>
</ul>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/observer/intersection-observer-viewport.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;clientX/clientY&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{800}</span> /&gt;</span></span>;
</code></pre>
<h2>应用</h2>
<h3>惰性加载</h3>
<p>静态资源当用户向下滚动时，进入视口才加载，这样可以节省带宽，提高网页性能。这就叫做 <strong>惰性加载</strong>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">selector</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(selector));
}

<span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function"><span class="hljs-params">entries</span> =&gt;</span> {
  entries.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">entry</span>) {
    <span class="hljs-comment">// 观察对象</span>
    <span class="hljs-keyword">const</span> container = entry.<span class="hljs-property">target</span>;
    <span class="hljs-keyword">const</span> content = container.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;template&#x27;</span>).<span class="hljs-property">content</span>;
    container.<span class="hljs-title function_">appendChild</span>(content);
    observer.<span class="hljs-title function_">unobserve</span>(container);
  });
});

<span class="hljs-title function_">query</span>(<span class="hljs-string">&#x27;.lazy-loaded&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) {
  observer.<span class="hljs-title function_">observe</span>(item);
});
</code></pre>
<p>上述代码，当目标区域可见时，才会将模版内容给你插入真实 DOM，从而引发静态资源的加载。</p>
<h3>无限滚动</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> io = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function"><span class="hljs-params">entries</span> =&gt;</span> {
  <span class="hljs-comment">// 如果不可见，就返回</span>
  <span class="hljs-keyword">if</span> (entries[<span class="hljs-number">0</span>].<span class="hljs-property">intersectionRatio</span> &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;

  <span class="hljs-title function_">loadItems</span>(<span class="hljs-number">10</span>);

  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Loaded new items&#x27;</span>);
});

<span class="hljs-comment">// 开始观察</span>
intersectionObserver.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.scrollFooter&#x27;</span>));
</code></pre>
<p>无限滚动时，最好在页面底部有个页尾栏（又称 sentinels）。一旦页尾栏可见，就表示用户到达了页面底部，从而加载新的条目放在页尾栏前面。这样做的好处是，不需要再次调用 <code>observe()</code> 方法，现有的 IntersectionObserver 可以保持使用。</p>
<h2>Option 对象</h2>
<p>IntersectionObserver 构造函数的第二个参数是个配置对象，它可以设置以下属性。</p>
<h3>threshold 属性</h3>
<p><code>threshold</code> 属性决定了什么时候出发回调函数。它是一个数组，每个成员都是一个门槛值，默认为 <code>[0]</code>，即交叉比例（<code>intersectionRatio</code>）达到 0 时触发回调函数。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-function"><span class="hljs-params">entries</span> =&gt;</span> {}, {
  <span class="hljs-attr">threshold</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.75</span>, <span class="hljs-number">1</span>],
});
</code></pre>
<p>用户可以自定义个数组。比如 <code>[0, 0.25, 0.5, 0.75, 1]</code> 就表示当目标元素 0%、25%、50%、75%、100% 可见时，会触发回调函数。</p>
<h3>root 和 rootMargin 属性</h3>
<p>很多时候，目标元素不仅会随着窗口滚动，还会在容器里面滚动（比如在 iframe 窗口里滚动）。容器内滚动也会影响目标元素的可见性，参见本文开始时的那张示意图。</p>
<p>IntersectionObserver API 支持容器内滚动。<code>root</code> 属性指定目标元素所在的容器节点（即根元素）。注意，容器元素必须是目标元素的祖先节点。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> opts = {
  <span class="hljs-attr">root</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.container&#x27;</span>),
  <span class="hljs-attr">rootMargin</span>: <span class="hljs-string">&#x27;500px 0px&#x27;</span>,
};

<span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(callback, opts);
</code></pre>
<p>上面代码中，除了 <code>root</code> 属性，还有 <code>rootMargin</code> 属性。后者定义根元素的 <code>margin</code>，用来扩展或缩小 <code>rootBounds</code> 这个矩形的大小，从而影响 <code>intersectionRect</code> 交叉区域的大小。它使用 CSS 的定义方法，比如 <code>10px 20px 30px 40px</code>，表示 top、right、bottom 和 left 四个方向的值。</p>
<p>这样设置以后，不管是窗口滚动或者容器内滚动，只要目标元素可见性变化，都会触发观察器。</p>
<h2>注意点</h2>
<p>IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。</p>
<p>规格写明，IntersectionObserver 的实现，应该采用 <code>requestIdleCallback()</code>，即只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只有其他任务执行完，浏览器有了空闲才会执行。</p>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html" target="_blank" rel="noopener noreferrer nofollow">IntersectionObserver API 使用教程</a></li>
<li><a href="https://segmentfault.com/a/1190000021069054" target="_blank" rel="noopener noreferrer nofollow">📝 IntersectionObserver 是什么</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

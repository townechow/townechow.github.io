1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","document-object-model","element","html-video-element"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","document-object-model/element/html-video-element","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","document-object-model/element/html-video-element","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","KP1b08X0hQpiaEZGeS6gg",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1965,<h1>HTMLVideoElement</h1>
<pre class="hljs"><code>EventTarget &lt;- Node &lt;- Element &lt;- HTMLElement &lt;- HTMLMediaElement &lt;- HTMLVideoElement
</code></pre>
<p>继承其父对象 <a href="/front-end/document-object-model/element/html-media-element">HTMLMediaElement</a> 和 <a href="/front-end/document-object-model/element/html-element">HTMLElement</a> 的方法。</p>
<p>height
poster
videoHeight
videoWidth
width</p>
<pre class="hljs"><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> /&gt;</span>
</code></pre>
<ul>
<li><code>&lt;video&gt;</code> 元素提供了播放、暂停和音量控件来控制视频。</li>
<li><code>&lt;video&gt;</code> 元素也提供了 width 和 height 属性控制视频的尺寸.如果设置的高度和宽度，所需的视频空间会在页面加载时保留。如果没有设置这些属性，浏览器不知道大小的视频，浏览器就不能再加载时保留特定的空间，页面就会根据原始视频的大小而改变。</li>
<li><code>&lt;video&gt;</code> 与 <code>&lt;/video&gt;</code> 标签之间插入的内容是提供给不支持 video 元素的浏览器显示的。</li>
<li><code>&lt;video&gt;</code> 元素支持多个 <code>&lt;source&gt;</code> 元素。<code>&lt;source&gt;</code> 元素可以链接不同的视频文件。</li>
</ul>
<h2>可选属性</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoplay</td>
<td>autoplay</td>
<td>视频在就绪后马上播放</td>
</tr>
<tr>
<td>controls</td>
<td>controls</td>
<td>向用户显示控件，比如播放按钮</td>
</tr>
<tr>
<td>height</td>
<td>pixels</td>
<td>视频播放器的高度</td>
</tr>
<tr>
<td>loop</td>
<td>loop</td>
<td>媒介文件完成播放后再次开始播放</td>
</tr>
<tr>
<td>muted</td>
<td>muted</td>
<td>视频的音视频输出为静音</td>
</tr>
<tr>
<td>poster</td>
<td>URL</td>
<td>规定视频正在下载时显示的图像，直到用户点击播放按钮</td>
</tr>
<tr>
<td>preload</td>
<td>auto metadata none</td>
<td>视频在页面加载时进行加载，并预备播放</td>
</tr>
<tr>
<td>src</td>
<td>URL</td>
<td>播放视频的 URL</td>
</tr>
<tr>
<td>width</td>
<td>pixels</td>
<td>视频播放器的宽度</td>
</tr>
</tbody>
</table>
<h2>Video 对象</h2>
<p>通过 <code>getElementById()</code> 访问 <code>&lt;video&gt;</code> 元素。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> video = docuemnt.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myVideo&#x27;</span>);
</code></pre>
<h2>属性</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>audioTracks</td>
<td>返回表示可用音频轨道的 AudioTrackList 对象。</td>
</tr>
<tr>
<td>autoplay</td>
<td>设置或返回是否在就绪（加载完成）后随即播放视频。</td>
</tr>
<tr>
<td>buffered</td>
<td>返回表示视频已缓冲部分的 TimeRanges 对象。</td>
</tr>
<tr>
<td>controller</td>
<td>返回表示视频当前媒体控制器的 MediaController 对象。</td>
</tr>
<tr>
<td>controls</td>
<td>设置或返回视频是否应该显示控件（比如播放/暂停等）。</td>
</tr>
<tr>
<td>crossOrigin</td>
<td>设置或返回视频的 CORS 设置。</td>
</tr>
<tr>
<td>currentSrc</td>
<td>返回当前视频的 URL。</td>
</tr>
<tr>
<td>currentTime</td>
<td>设置或返回视频中的当前播放位置（以秒计）。</td>
</tr>
<tr>
<td>defaultMuted</td>
<td>设置或返回视频默认是否静音。</td>
</tr>
<tr>
<td>defaultPlaybackRate</td>
<td>设置或返回视频的默认播放速度。</td>
</tr>
<tr>
<td>duration</td>
<td>返回视频的长度（以秒计）。</td>
</tr>
<tr>
<td>ended</td>
<td>返回视频的播放是否已结束。</td>
</tr>
<tr>
<td>error</td>
<td>返回表示视频错误状态的 MediaError 对象。</td>
</tr>
<tr>
<td>height</td>
<td>设置或返回视频的 height 属性的值。</td>
</tr>
<tr>
<td>loop</td>
<td>设置或返回视频是否应在结束时再次播放。</td>
</tr>
<tr>
<td>mediaGroup</td>
<td>设置或返回视频所属媒介组合的名称。</td>
</tr>
<tr>
<td>muted</td>
<td>设置或返回是否关闭声音。</td>
</tr>
<tr>
<td>networkState</td>
<td>返回视频的当前网络状态。</td>
</tr>
<tr>
<td>paused</td>
<td>设置或返回视频是否暂停。</td>
</tr>
<tr>
<td>playbackRate</td>
<td>设置或返回视频播放的速度。</td>
</tr>
<tr>
<td>played</td>
<td>返回表示视频已播放部分的 TimeRanges 对象。</td>
</tr>
<tr>
<td>poster</td>
<td>设置或返回视频的 poster 属性的值。</td>
</tr>
<tr>
<td>preload</td>
<td>设置或返回视频的 preload 属性的值。</td>
</tr>
<tr>
<td>readyState</td>
<td>返回视频当前的就绪状态。</td>
</tr>
<tr>
<td>seekable</td>
<td>返回表示视频可寻址部分的 TimeRanges 对象。</td>
</tr>
<tr>
<td>seeking</td>
<td>返回用户当前是否正在视频中进行查找。</td>
</tr>
<tr>
<td>src</td>
<td>设置或返回视频的 src 属性的值。</td>
</tr>
<tr>
<td>startDate</td>
<td>返回表示当前时间偏移的 Date 对象。</td>
</tr>
<tr>
<td>textTracks</td>
<td>返回表示可用文本轨道的 TextTrackList 对象。</td>
</tr>
<tr>
<td>videoTracks</td>
<td>返回表示可用视频轨道的 VideoTrackList 对象。</td>
</tr>
<tr>
<td>volume</td>
<td>设置或返回视频的音量。</td>
</tr>
<tr>
<td>width</td>
<td>设置或返回视频的 width 属性的值。</td>
</tr>
</tbody>
</table>
<h2>方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>addTextTrack()</code></td>
<td>向视频添加新的文本轨道。</td>
</tr>
<tr>
<td><code>canPlayType()</code></td>
<td>检查浏览器是否能够播放指定的视频类型。</td>
</tr>
<tr>
<td><code>load()</code></td>
<td>重新加载视频元素。</td>
</tr>
<tr>
<td><code>play()</code></td>
<td>开始播放视频。</td>
</tr>
<tr>
<td><code>pause()</code></td>
<td>暂停当前播放的视频。</td>
</tr>
</tbody>
</table>
<h2>加载过程</h2>
<p>视频/音频（Audio / Video）在加载过程中，触发的顺序如下：</p>
<ol>
<li><code>onloadstart</code></li>
<li><code>ondurationchange</code></li>
<li><code>onloadedmetadata</code></li>
<li><code>onloadeddata</code></li>
<li><code>onprogress</code></li>
<li><code>oncanplay</code></li>
<li><code>oncanplaythrough</code></li>
</ol>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"HTMLVideoElement"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

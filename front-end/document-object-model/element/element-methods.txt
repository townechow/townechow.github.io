1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","document-object-model","element","element-methods"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","document-object-model/element/element-methods","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","document-object-model/element/element-methods","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","8his3XaheB69C64VlzofJ",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2987,<h1>Element 方法</h1>
<h2>位置方法</h2>
<h3>getBoundingClientRect</h3>
<p>获取元素的大小及其相对于视口的位置</p>
<h3>getClientRects</h3>
<p>获取一个指向客户端中每一个盒子的边界矩形的矩形集合</p>
<h3>computedStyleMap</h3>
<h2>样式方法</h2>
<h3>matches</h3>
<p>使用 <code>Element.matches</code> 方法可以通过精准匹配样式。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Element</span>.<span class="hljs-title function_">matches</span>(selectorString);
</code></pre>
<p>示例：</p>
<pre class="hljs"><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class-1&quot;</span>&gt;</span>item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class-1&quot;</span>&gt;</span>item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  ......
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item n<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
// ...... 代表中间还有未知数个 li
</code></pre>
<ul>
<li>这里，我们想把 <code>#foo</code> 元素下的 <code>li</code> 元素（并且它的 <code>class</code> 为 <code>class-1</code>）的点击事件委托代理到 <code>ul#foo</code> 之上。</li>
<li>如果通过上述的方法我们还需要在 <code>if (target.nodeName.toLocaleLowerCase === 'li')</code> 判断之中在加入一个判断 <code>target.nodeName.className === 'class-1'</code>。</li>
<li>但是如果想像 CSS 选择器般做更加灵活的匹配的话，上面的判断未免就太多了，并且很难做到灵活性。</li>
</ul>
<p>这里可以使用 <code>Element.matches</code> API 来匹配。<code>Element.matches</code> API 的基本使用方法：</p>
<p><code>selectorString</code> 既是 CSS 那样的选择器规则，比如本例中可以使用 <code>target.matches('li.class-1')</code>，他会返回一个布尔值，如果 <code>target</code> 元素是标签 <code>li</code> 并且它的类是 <code>class-1</code> ，那么就会返回 <code>true</code>，否则返回 <code>false</code>；</p>
<p>当然它的兼容性还有一些问题，需要 IE9 及以上的现代化浏览器版本。</p>
<p>我们可以使用 Polyfill 来解决兼容性上的问题：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">matches</span>) {
  <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">matches</span> =
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">matchesSelector</span> ||
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mozMatchesSelector</span> ||
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">msMatchesSelector</span> ||
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">oMatchesSelector</span> ||
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">webkitMatchesSelector</span> ||
    <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) {
      <span class="hljs-keyword">var</span> matches = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">ownerDocument</span>).<span class="hljs-title function_">querySelectorAll</span>(s),
        i = matches.<span class="hljs-property">length</span>;
      <span class="hljs-keyword">while</span> (--i &gt;= <span class="hljs-number">0</span> &amp;&amp; matches.<span class="hljs-title function_">item</span>(i) !== <span class="hljs-variable language_">this</span>) {}
      <span class="hljs-keyword">return</span> i &gt; -<span class="hljs-number">1</span>;
    };
}
</code></pre>
<p>加上 <code>Element.matches</code> 之后就可以来实现我们的需求了：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">matches</span>) {
  <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">matches</span> =
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">matchesSelector</span> ||
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mozMatchesSelector</span> ||
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">msMatchesSelector</span> ||
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">oMatchesSelector</span> ||
    <span class="hljs-title class_">Element</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">webkitMatchesSelector</span> ||
    <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) {
      <span class="hljs-keyword">const</span> matches = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">document</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">ownerDocument</span>).<span class="hljs-title function_">querySelectorAll</span>(s),
        i = matches.<span class="hljs-property">length</span>;
      <span class="hljs-keyword">while</span> (--i &gt;= <span class="hljs-number">0</span> &amp;&amp; matches.<span class="hljs-title function_">item</span>(i) !== <span class="hljs-variable language_">this</span>) {}
      <span class="hljs-keyword">return</span> i &gt; -<span class="hljs-number">1</span>;
    };
}

<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
  <span class="hljs-comment">// 兼容性处理</span>
  <span class="hljs-keyword">const</span> event = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;
  <span class="hljs-keyword">const</span> target = event.<span class="hljs-property">target</span> || event.<span class="hljs-property">srcElement</span>;

  <span class="hljs-keyword">if</span> (target.<span class="hljs-title function_">matches</span>(<span class="hljs-string">&#x27;li.class-1&#x27;</span>)) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;the content is: &#x27;</span>, target.<span class="hljs-property">innerHTML</span>);
  }
});
</code></pre>
<h3>animate</h3>
<p>Element 接口的 <code>animate</code> 方法是一个创建新 Animation 的便捷方法，将它应用于元素，然后运行动画。它将返回一个新建的 Animation 对象实例</p>
<h3>getAnimations</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(elem.<span class="hljs-title function_">getAnimations</span>({ <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span> }).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">animation</span> =&gt;</span> animation.<span class="hljs-property">finished</span>)).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span>
  elem.<span class="hljs-title function_">remove</span>()
);
</code></pre>
<h2>属性方法</h2>
<h3>getAttribute</h3>
<p>获取元素中指定属性</p>
<h3>setAttribute</h3>
<p>设置元素中指定属性</p>
<h3>hasAttribute</h3>
<p>判断元素中是否存在置顶属性</p>
<h3>removeAttribute</h3>
<p>移除元素中指定属性</p>
<h2>滚动方法</h2>
<h3>scroll</h3>
<p><code>Element.scroll</code> 方法是用于在给定的元素中滚动到某个特定坐标的 Element 接口。</p>
<h3>scrollBy</h3>
<p><code>Element.scrollBy</code> 方法是使得元素滚动一段特定距离的 Element 接口。</p>
<h3>scrollIntoView</h3>
<p><code>Element.scrollIntoView</code> 方法让当前的元素滚动到浏览器窗口的可视区域内。</p>
<h3>scrollTo</h3>
<p><code>Element.scrollTo</code> 方法可以使界面滚动到给定元素的指定坐标位置。</p>
<h2>requestFullscreen</h2>
<h2>事件对象</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// Event 对象爱哪个</span>
<span class="hljs-keyword">const</span> event = <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span> || event;

<span class="hljs-comment">// 事件的目标节点</span>
<span class="hljs-keyword">const</span> target = event.<span class="hljs-property">target</span> || event.<span class="hljs-property">srcElement</span>;
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Element 方法"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

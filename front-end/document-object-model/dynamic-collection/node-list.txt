1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","document-object-model","dynamic-collection","node-list"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","document-object-model/dynamic-collection/node-list","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","document-object-model/dynamic-collection/node-list","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","2OZ-ovuXby8gwgPJyvRJm",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:Tf89,<h1>NodeList</h1>
<p>NodeList 实例对象是一个类数组对象，它的成员是节点对象，包括 <code>childNodes</code> 和 <code>querySelectorAll()</code> 方法返回值。</p>
<p>DOM 将 HTML 页面解析成一个由多层次节点构成的结构。节点是页面结构的基础，而所有节点继承自 Node 类型，因此所有节点共享着基本的属性和方法。Node 类型有一个 <code>childNodes</code> 属性，所以所有节点都拥有这个属性。而通过这个属性就可以得到一个保存着本节点的子节点组成的 NodeList 对象。</p>
<p>NodeList 可以通过方括号表达式来访问，也可以通过 <code>item()</code> 方法来访问。</p>
<p>通过 <code>length</code> 属性，可以访问元素个数。虽然 JavaScript 中的数组可以修改 <code>length</code> 属性。但 NodeList 集合并不是数组，而且它是页面一片区域的 DOM 结构映射。所以请不要修改 NodeList 对象的 <code>length</code> 值。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-comment">// 获取第一个元素</span>
<span class="hljs-keyword">const</span> firstChild = someNode.<span class="hljs-property">childNodes</span>[<span class="hljs-number">0</span>];

<span class="hljs-comment">// 获取第二个元素</span>
<span class="hljs-keyword">const</span> secondChild = someNode.<span class="hljs-property">childNodes</span>.<span class="hljs-property">item</span>[<span class="hljs-number">1</span>];

<span class="hljs-comment">// 获取集合长度</span>
<span class="hljs-keyword">const</span> count = someNode.<span class="hljs-property">childNodes</span>.<span class="hljs-property">length</span>;
</code></pre>
<blockquote>
<p>NodeList 不是一个数组，是一个类似数组的对象（Like Array Object）。虽然 NodeList 不是一个数组，但是可以使用 <code>forEach()</code> 来迭代。你还可以使用 <code>Array.from()</code> 将其转换为数组。</p>
<p>不过，有些浏览器较为过时，没有实现 <code>NodeList.forEach()</code> 和 <code>Array.from()</code>。你可以用 <code>Array.prototype.forEach()</code> 来规避这一问题。</p>
</blockquote>
<p>在一些情况下，NodeList 是一个实时集合，也就是说，如果文档中的节点树发生变化，NodeList 也会随之变化。例如，Node.childNodes 是实时的：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> parent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;parent&#x27;</span>);
<span class="hljs-keyword">const</span> childNodes = parent.<span class="hljs-property">childNodes</span>;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(childNodes.<span class="hljs-property">length</span>);
<span class="hljs-comment">// 假设为 2</span>

parent.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>));

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(childNodes.<span class="hljs-property">length</span>);
<span class="hljs-comment">// 3</span>
</code></pre>
<p>在其他情况下，NodeList 是一个静态集合，也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。比如 <code>document.querySelectorAll</code> 就会返回一个静态 NodeList。</p>
<p>最好牢记这种不同，尤其是在当你选择 NodeList 中所有项遍历的方式，或缓存它的长度的时候。</p>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noopener noreferrer nofollow">MDN：NodeList</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

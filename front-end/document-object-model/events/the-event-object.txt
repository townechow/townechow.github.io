1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","document-object-model","events","the-event-object"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","document-object-model/events/the-event-object","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","document-object-model/events/the-event-object","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","-cqQk4cQA-rcvReG6p_dl",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T35b7,<h2>事件对象</h2>
<p>在触发 DOM 上的某个事件时，会产生一个事件对象（Event Object），这个对象中包含着所有与事件有关的属性和方法。该对象会作为第一个参数传递给监听函数。</p>
<ul>
<li>DOM 事件模型中的事件对象常用属性方法
<ul>
<li><code>type</code>：用于获取事件类型</li>
<li><code>target</code>：获取事件目标</li>
<li><code>stopPropagation()</code>：阻止事件冒泡</li>
<li><code>preventDefault()</code>：阻止默认行为</li>
</ul>
</li>
<li>IE 事件模型中的事件对象常用属性方法
<ul>
<li><code>type</code>：用于获取事件类型</li>
<li><code>srcElement</code>：获取事件目标</li>
<li><code>cancelBubble</code>：阻止事件冒泡</li>
<li><code>returnValue</code>：阻止事件默认行为</li>
</ul>
</li>
</ul>
<h3>DOM 中的事件对象</h3>
<p>兼容 DOM 的浏览器会将一个 <code>event</code> 对象传入到事件处理程序中。无论指定事件处理程序时使用什么方法（DOM0 级或 DOM2 级），都会传入 <code>event</code> 对象。</p>
<p>以这种方式提供 <code>event</code> 对象，可以让 HTML 特性事件处理程序与 JavaScript 函数执行相同的操作。<code>event</code> 对象包含与创建它的特定事件相关的属性和方法。触发的事件类型不一样。不过，所有事件都会有下表列出的成员。</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性/方法</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">读/写</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">bubbles</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">表明事件是否冒泡</td>
</tr>
<tr>
<td style="text-align:center">cancelable</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">表明是否可以取消事件的默认行为</td>
</tr>
<tr>
<td style="text-align:center">currentTarget</td>
<td style="text-align:center">Element</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">其事件处理程序当前正在处理事件的那个元素</td>
</tr>
<tr>
<td style="text-align:center">defaultPrevented</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">为 <code>true</code> 表示已经调用了 <code>preventDefault()</code>（DOM3 级事件中新增）</td>
</tr>
<tr>
<td style="text-align:center">detail</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">与事件相关的细节信息</td>
</tr>
<tr>
<td style="text-align:center">eventPhase</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">调用事件处理程序的阶段：1 表示捕获阶段，2 表示“处于目标”，3 表示冒泡阶段</td>
</tr>
<tr>
<td style="text-align:center"><code>preventDefault()</code></td>
<td style="text-align:center">Function</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">取消事件的默认行为。如果 <code>cancelable</code> 是 <code>true</code>，则可以使用这个方法。</td>
</tr>
<tr>
<td style="text-align:center"><code>stopImmediatePropagation()</code></td>
<td style="text-align:center">Function</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">取消事件的进一步捕获或冒泡，同时阻止任何事件处理程序被调用（DOM3 级事件中新增）</td>
</tr>
<tr>
<td style="text-align:center"><code>stopPropagation()</code></td>
<td style="text-align:center">Function</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">取消事件的进一步捕获或冒泡。如果 bubbles 为 <code>true</code>，则可以使用这个方法</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">Element</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">事件的目标</td>
</tr>
<tr>
<td style="text-align:center">trusted</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">为 <code>true</code> 表示事件是浏览器生成的。为 <code>false</code> 表示事件是由开发人员通过 JavaScript 创建的（DOM3 级事件中新增）</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">String</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">被触发的事件的类型</td>
</tr>
<tr>
<td style="text-align:center">view</td>
<td style="text-align:center">AbstractView</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">与事件关联的抽象视图。等同于发生事件的 <code>window</code> 对象</td>
</tr>
</tbody>
</table>
<h4>事件处理程序内部 this 指向</h4>
<p>在事件处理程序内部，对象 <code>this</code> 始终等于 <code>currentTarget</code> 的值，而 <code>tartget</code> 则只包含事件的实际目标。如果直接将事件处理程序指定给了目标元素，则 <code>this</code>、<code>currentTarget</code> 和 <code>tartget</code> 包含相同的值。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// Example</span>
<span class="hljs-keyword">var</span> btn = doocument.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myBtn&#x27;</span>);
btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
  <span class="hljs-title function_">alert</span>(event.<span class="hljs-property">currentTarget</span> === <span class="hljs-variable language_">this</span>); <span class="hljs-comment">// true</span>
  <span class="hljs-title function_">alert</span>(event.<span class="hljs-property">target</span> === <span class="hljs-variable language_">this</span>); <span class="hljs-comment">// true</span>
};
</code></pre>
<p>当单击这个例子中的按钮时，<code>this</code> 和 <code>currentTarget</code> 都等于 <code>document.body</code>，因为事件处理程序是注册到这个元素上的。然而，<code>target</code> 元素却等于按钮元素，因为它是 <code>click</code> 事件真正的目标。由于按钮上并没有注册事件处理程序，结果 <code>click</code> 事件就冒泡到了 <code>document.body</code>，在那里事件才得到了处理。</p>
<h4>单函数处理多事件</h4>
<p>在需要通过一个函数处理多个事件时，可以使用 <code>type</code> 属性。例如：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myBtn&#x27;</span>);
<span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
  <span class="hljs-keyword">switch</span> (event.<span class="hljs-property">type</span>) {
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;click&#x27;</span>:
      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Clicked&#x27;</span>);
      <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;mouseover&#x27;</span>:
      event.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>;
      <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;mouseout&#x27;</span>:
      event.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span>;
      <span class="hljs-keyword">break</span>;
  }
};

btn.<span class="hljs-property">onclick</span> = handler;
btn.<span class="hljs-property">mouseover</span> = handler;
btn.<span class="hljs-property">mouseout</span> = handler;
</code></pre>
<p>这个例子定义了一个名为 <code>handler</code> 的函数，用于处理 3 种事件：<code>click</code>、<code>mouseover</code>和<code>mouseout</code>。当单击按钮时，会出现一个与前面例子中一样的警告框。当按钮移动到按钮上面时，背景颜色应该会变成红色，而当鼠标移动出按钮的范围时，背景颜色应该会恢复为默认值。这里通过检测 <code>event.type</code>属性，让函数能够确定发生了什么事件，并执行相应的操作。</p>
<h4>阻止浏览器默认行为</h4>
<p>要阻止特定事件的默认行为，可以使用 <code>preventDefault()</code> 方法。例如，链接的默认行为就是在被单击时会导航到其 <code>href</code> 特性指定的 URL。如果你想阻止链接导航这一默认行为，那么通过链接的 <code>onclick</code> 事件处理程序可以取消它。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> link = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myLink&#x27;</span>);
link.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
  <span class="hljs-comment">// 阻止鼠标的默认行为</span>
  event.<span class="hljs-title function_">preventDefault</span>();
};
</code></pre>
<p>只有 <code>cancelable</code> 属性设置为 <code>true</code> 的事件，才可以使用 <code>preventDefault()</code>来取消其默认行为。</p>
<h4>阻止事件冒泡</h4>
<p><code>stopPropagation()</code> 方法用于立即停止事件在 DOM 层次中的传播，即取消进一步的事件捕获或冒泡。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">stopPropagation</span>(<span class="hljs-params">e</span>) {
  <span class="hljs-keyword">const</span> event = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;
  event.<span class="hljs-property">stopPropagation</span> ? event.<span class="hljs-title function_">stopPropagation</span>() : (<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>.<span class="hljs-property">cancelBubbl</span> = <span class="hljs-literal">true</span>);
}
</code></pre>
<p>⚠️ 只有在事件处理程序执行期间，event 对象才会存在。一旦事件处理程序执行完成，event 对象就会被销毁。</p>
<h3>跨浏览器的事件对象</h3>
<p>虽然 DOM 和 IE 中的 <code>event</code> 对象不同，但基于它们之间的相似性依旧可以拿出跨浏览器的方案来。IE 中 <code>event</code> 对象的全部信息和方法 DOM 对象中都有，只不过实现方式不一样。不过，这种对应关系让实现两种事件模型之间的映射非常容易。可以对前面介绍的 EventUtil 对象加以增强，添加如下方法以求同存异。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">EventUtil</span> = {
  <span class="hljs-attr">addHandler</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">element, type, handler</span>) {
    <span class="hljs-comment">// 省略的代码</span>
  }，

  <span class="hljs-attr">getEvent</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
    <span class="hljs-keyword">return</span> event ? event : <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;
	}

	<span class="hljs-attr">getTarget</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
    <span class="hljs-keyword">return</span> event.<span class="hljs-property">target</span> || event.<span class="hljs-property">srcElement</span>;
	}

	<span class="hljs-attr">preventDefault</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">preventDefault</span>){
      event.<span class="hljs-title function_">preventDefault</span>();
    } <span class="hljs-keyword">else</span> {
      event.<span class="hljs-property">returnValue</span> = <span class="hljs-literal">false</span>;
    }
	}

	<span class="hljs-attr">removeHandler</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">element, type, handler</span>) {
    <span class="hljs-comment">// 省略的代码</span>
	}

	<span class="hljs-attr">stopPropagation</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">stopPropagation</span>) {
      event.<span class="hljs-property">stopPropagation</span>;
    } <span class="hljs-keyword">else</span> {
      event.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span>;
    }
	}
}
</code></pre>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://github.com/amandakelake/blog/issues/38">JS 事件：捕获与冒泡、事件处理程序、事件对象、跨浏览器、事件委托</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"事件对象"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

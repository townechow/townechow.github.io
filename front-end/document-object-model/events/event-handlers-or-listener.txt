1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","document-object-model","events","event-handlers-or-listener"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","document-object-model/events/event-handlers-or-listener","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","document-object-model/events/event-handlers-or-listener","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","bnLWH17tg-IGmoKgU07LY",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T33ed,<h2>事件处理程序</h2>
<p>事件就是用户或浏览器自身执行的某种动作。诸如 click、load 和 mouseover，都是事件的名字。而响应某个事件的函数就叫做<strong>事件处理程序（或事件侦听器）</strong>。事件处理程序的名字以“on”开头，因此 click 事件的事件处理程序就是 onclick，load 事件的事件处理程序就是 onload。为事件指定处理程序的方式有好几种</p>
<ul>
<li>HTML 事件处理程序</li>
<li>DOM0 级事件处理程序</li>
<li>DOM2 级事件处理程序</li>
<li>IE 事件处理程序</li>
<li>跨浏览器的事件处理程序</li>
</ul>
<h3>HTML 事件处理程序</h3>
<p>某个元素支持的每种事件，都可以使用一个与相应事件处理程序同名的 HTML 特性来指定。这个特性的值应该是能够执行的 JavaScript 代码。</p>
<pre class="hljs"><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(event.type)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<p>在事件处理程序函数内部，<code>this</code> 值等于事件的目标元素。</p>
<pre class="hljs"><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;this.innerHTML+= &#x27;1&#x27;;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<h3>DOM0 级事件处理程序</h3>
<p>通过 JavaScript 指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。这种为事件处理程序赋值的方法是在第四代 Web 浏览器中出现的，而且至今仍然为所有现代浏览器所支持。</p>
<p>每个元素都有自己的事件处理程序属性，这些属性通常全部小写，将这种属性的值设置为一个函数，就可以指定事件处理程序。</p>
<p>以 DOM0 级方式添加的事件处理程序会在<strong>事件流的冒泡阶段</strong>被处理。</p>
<pre class="hljs"><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#box&#x27;</span>);
box.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;1&#x27;</span>;
};
</code></pre>
<p><strong>删除事件处理程序</strong>：可以通过将事件处理程序属性设置为 <code>null</code> 来删除事件处理程序。</p>
<pre class="hljs"><code class="language-js">box.<span class="hljs-property">onclick</span> = <span class="hljs-literal">null</span>;
</code></pre>
<p><strong>缺点</strong>：DOM0 级事件处理程序的缺点是围绕着每个事件目标对于每种事件类型只能添加一个事件处理程序</p>
<h3>DOM2 级事件处理程序</h3>
<p>DOM2 级事件处理程序属于 W3C 标准模型，现代浏览器（除 IE6-8 之外的浏览器）都支持该模型。在该事件模型中，一次事件共有三个过程：</p>
<ul>
<li>事件捕获阶段：事件从文档节点一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>
<li>事件处理阶段：事件到达目标元素，触发目标元素的监听函数。</li>
<li>事件冒泡阶段：事件从目标元素冒泡到文档节点，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。</li>
</ul>
<p>DOM2 级事件处理程序定义了两个方法用于处理指定和删除事件处理程序的操作：</p>
<p><strong>绑定方式</strong></p>
<pre class="hljs"><code class="language-js">element.<span class="hljs-title function_">addEventListener</span>(eventType, handler, useCapture);
</code></pre>
<p><strong>移除方式</strong></p>
<pre class="hljs"><code class="language-js">element.<span class="hljs-title function_">removeEventListener</span>(eventType, handler, useCapture);
</code></pre>
<p>所有 DOM 节点中都包含这两个方法，并且它们都接受 3 个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后的布尔值参数如果是 <code>true</code>，表示在捕获阶段调用事件处理程序；如果是 <code>false</code>，表示在冒泡阶段调用事件处理程序。若最后的布尔值不填写，则和 <code>false</code> 效果一样。</p>
<h4>参数传递</h4>
<p>如果希望向监听函数传递参数，可以用匿名函数包装一下监听函数</p>
<pre class="hljs"><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:30px;width:200px;background-color:pink;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
  box.<span class="hljs-title function_">addEventListener</span>(
    <span class="hljs-string">&#x27;click&#x27;</span>,
    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
      <span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;123&#x27;</span>);
    },
    <span class="hljs-literal">false</span>
  );
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">x</span>) {
    box.<span class="hljs-property">innerHTML</span> += x;
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>
<h4>注销事件绑定</h4>
<p>通过 <code>addEventListener()</code> 添加的事件处理程序只能使用 <code>removeEventListener()</code> 来移除。</p>
<ul>
<li>移除时传入的参数与添加处理程序时使用的参数相同</li>
<li><code>addEventListener()</code> 添加的匿名函数将无法移除</li>
</ul>
<pre class="hljs"><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre>
<p>以下无效：</p>
<pre class="hljs"><code class="language-js">box.<span class="hljs-title function_">addEventListener</span>(
  <span class="hljs-string">&#x27;click&#x27;</span>,
  <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;1&#x27;</span>;
  },
  <span class="hljs-literal">false</span>
);

box.<span class="hljs-title function_">removeEventListener</span>(
  <span class="hljs-string">&#x27;click&#x27;</span>,
  <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;1&#x27;</span>;
  },
  <span class="hljs-literal">false</span>
);
</code></pre>
<p>以下有效：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> handle = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;1&#x27;</span>;
};

box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handle, <span class="hljs-literal">false</span>);
box.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handle, <span class="hljs-literal">false</span>);
</code></pre>
<h3>IE 事件处理程序</h3>
<p>IE 事件模型共有两个过程：</p>
<ul>
<li>事件处理阶段：事件到达目标元素，触发目标元素的监听函数。</li>
<li>事件冒泡阶段：事件从目标元素冒泡到文档节点，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。</li>
</ul>
<p>事件绑定：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title function_">attachEvent</span>(eventType, handler);
</code></pre>
<p>事件移除：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title function_">detachEvent</span>(evnetType, handler);
</code></pre>
<p>参数说明：</p>
<ul>
<li>eventType：指定事件类型</li>
<li>handler：事件处理函数</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// Example</span>
cont btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElmentById</span>(<span class="hljs-string">&#x27;.btn&#x27;</span>);
btn.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>, showMessage);
btn.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>, showMessage);
</code></pre>
<h3>跨浏览器的事件处理程序</h3>
<p>为了以跨浏览器的方式处理事件，不少开发人员会使用能够隔离浏览器差异的 JavaScript 库，还有一些开发人员会自己开发最合适的事件处理的方法。自己编写代码其实也不难，只要恰当地使用能力检测即可。要保证处理事件的代码能在大多数浏览器下一致运行，只需关注冒泡阶段。</p>
<p><code>EventUtil</code> 的用法如下所示</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">EventUtil</span> = {
    <span class="hljs-attr">addHandler</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">element, type, handler</span>){
    <span class="hljs-keyword">if</span> (element,.<span class="hljs-property">addEventListener</span>) {
        element.<span class="hljs-title function_">addEventListener</span>(type, handler, <span class="hljs-literal">false</span>);
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">attachEvent</span>) {
        element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + type, handler);
    } <span class="hljs-keyword">else</span> {
        element[<span class="hljs-string">&quot;on&quot;</span> + type] = handler;
    }
    <span class="hljs-attr">removeHandler</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">element, type, handler</span>) {
        <span class="hljs-keyword">if</span> (element.<span class="hljs-property">removeEventListener</span>) {
            element.<span class="hljs-title function_">removeEventListener</span>(type, handler, <span class="hljs-literal">false</span>);
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">detachEvent</span>) {
            element.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&quot;on&quot;</span> + type, handler);
        } <span class="hljs-keyword">else</span> {
            element[<span class="hljs-string">&quot;on&quot;</span> + type] = handler;
        } <span class="hljs-keyword">else</span> {
            element[<span class="hljs-string">&quot;on&quot;</span> + type] = <span class="hljs-literal">null</span>;
        }
    }
}
</code></pre>
<h3>总结</h3>
<ul>
<li>HTML 事件处理程序：用户可能在元素刚出现就触发了事件，但此时 JS 代码可能还未加载完毕。其次，HTML 代码和 JavaScript 代码紧密耦合，不利于开发和维护，所以不推荐使用这种方法。</li>
<li>DOM0 级事件处理程序：简单且兼容性好，但是在需要对一个元素设置多个事件处理程序时便显得孱弱。</li>
<li>DOM2 级事件处理程序：可以轻易的设置多个事件处理程序，但是在删除事件处理程序时，传给 <code>removeEventListener()</code> 的参数必须与之前一致，且 IE9 以下不支持。</li>
</ul>
<p>事件处理函数需要注意的：</p>
<ul>
<li><code>this</code> 指的是 <code>target</code> 或 <code>currentTarget</code>。</li>
<li>两种 DOM 方法都会给事件处理函数传一个事件对象作为参数。HTML 方法直接引用 <code>event</code>。</li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

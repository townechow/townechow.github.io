1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","document-object-model","events","event-types","touch-events"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","document-object-model/events/event-types/touch-events","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","document-object-model/events/event-types/touch-events","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","z3lniauOEy065QpTia3Mi",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3c18,<h1>触控事件</h1>
<p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少等等。</p>
<p>每个 Touch 对象代表一个触点，每个触点都由其位置、大小、形状、压力大小和目标元素描述。TouchList 对象代表多个触点的一个列表。</p>
<p>触控事件与鼠标事件类似，不同的是触控事件还提供同一表面不同位置的同步触摸。</p>
<h2>定义</h2>
<ul>
<li>表面（Surface）：可感知触摸的平面，可以是屏幕或触控板。</li>
<li>触摸点（Touch Point）：表面上的一个接触点，有可能是手指（或者胳膊肘、耳朵、鼻子都行。但一般是手指）或者触摸笔</li>
</ul>
<h2>接口</h2>
<p>触控事件包括三个接口对象：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent" target="_blank" rel="noopener noreferrer nofollow">TouchEvent</a>：表示位于表面上的一个触摸点的某个状态发生改变时产生的事件</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Touch" target="_blank" rel="noopener noreferrer nofollow">Touch</a>：表示用户与触摸表面间的一个单独的接触点</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchList" target="_blank" rel="noopener noreferrer nofollow">TouchList</a>：表示一组 Touch，用于多点触控的情况</li>
</ul>
<p>TouchEvent 的属性继承了 UIEvent 和 Event。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent#%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" target="_blank" rel="noopener noreferrer nofollow">详情见 MDN 文档</a></p>
<p>通过检查触控事件的 <code>TouchEvent.type</code> 属性来确定当前事件属于哪种类型。</p>
<blockquote>
<p>⚠️ 注意：在很多情况下，触控事件和鼠标事件会同时触发（目的是让没有对触控设备优化的代码仍可在触控设备上运行）。如果你调用了触控事件，可以阻止默认行为以防止触发相对应的鼠标事件。</p>
</blockquote>
<h2>触控事件类型</h2>
<p>为了区别触控相关的状态改变，存在多种类型的触控事件。可以通过检查触控事件的 <code>TouchEvent.type</code> 属性来确定当前事件属于哪种类型。</p>
<table>
<thead>
<tr>
<th style="text-align:left">事件</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">touchstart</td>
<td style="text-align:left">当用户触摸屏幕时触发（即使已经有手指放在屏幕上也会触发）</td>
</tr>
<tr>
<td style="text-align:left">touchmove</td>
<td style="text-align:left">当手指在屏幕上滑动时触发（在触发期间阻止默认行为可阻止画面滑动）</td>
</tr>
<tr>
<td style="text-align:left">touchend</td>
<td style="text-align:left">当手指从屏幕上离开的时候触发（触发频率因不同浏览器而不同）</td>
</tr>
<tr>
<td style="text-align:left">touchcancel</td>
<td style="text-align:left">当系统停止跟踪触摸的时候触发（取决于浏览器实现，并不常用）</td>
</tr>
</tbody>
</table>
<p>触摸屏事件触发顺序：</p>
<pre class="hljs"><code>touchstart -&gt; touchmove -&gt; touchend -&gt; click
</code></pre>
<p><code>touchcancel</code> 事件触发的常见原因：</p>
<ul>
<li>由于某事件取消了触摸：例如触摸过程被 Modal 模态框打断</li>
<li>触电离开了文档窗口，而进入了浏览器的界面元素、插件或者其他外部内容区域</li>
<li>当用户产生的触点个数超过设备支持的个数，从而导致 TouchList 中最早的 Touch 对象被取消</li>
</ul>
<p>很值得注意的是，在很多情况下，触摸事件和鼠标事件会一起触发（以使非触摸专用的代码仍然可以与用户交互）。如果你要使用触摸事件，你可以使用 <code>preventDefault()</code> 来取消鼠标事件。</p>
<h2>接口对象</h2>
<p>TouchEvent 对象：</p>
<ul>
<li><code>touches</code>：触发事件时屏幕上的触点个数</li>
<li><code>targetTouches</code>：触发事件时事件元素上的触点个数</li>
<li><code>changedTouches</code>：触发事件发生改变的触点个数</li>
<li><code>target</code>：事件元素</li>
<li><code>stopPropagation</code>：阻止事件冒泡</li>
<li><code>preventDefault</code>：阻止默认行为</li>
</ul>
<p>Touch 对象：</p>
<ul>
<li><code>clientX/clientY</code>：触点在视口上的位置</li>
<li><code>pageX/pageY</code>：触点在页面上的位置</li>
<li><code>screenX/screenY</code>：触点在屏幕上的位置</li>
</ul>
<p>Touch 对象表示在触控设备上的触摸点。通常是指手指或者触控笔在触屏设备或者触摸板上的操作。</p>
<p>以下属性描述了用户的触控行为（均为只读属性）：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>identifier</td>
<td>Touch 对象的唯一标识符，一个完整的触控过程（手指在触控面上划过没有离开）标识符不会改变。可通过此属性判断跟踪是否是同一次触摸过程。</td>
</tr>
<tr>
<td>screenX</td>
<td>触控点相对于屏幕左边沿的 X 坐标。</td>
</tr>
<tr>
<td>screenY</td>
<td>触控点相对于屏幕上边沿的 Y 坐标。</td>
</tr>
<tr>
<td>clientX</td>
<td>触控点相对于可视区左边沿的 X 坐标，不包括任何滚动偏移。</td>
</tr>
<tr>
<td>clientY</td>
<td>触控点相对于可视区左边沿的 Y 坐标，不包括任何滚动偏移。</td>
</tr>
<tr>
<td>pageX</td>
<td>触控点相对于页面文档左边沿的 X 坐标。</td>
</tr>
<tr>
<td>pageY</td>
<td>触控点相对于页面文档上边沿的 Y 坐标。</td>
</tr>
<tr>
<td>radiusX</td>
<td>能够包围用户和触摸平面的接触面的最小椭圆的水平轴（X 轴）半径。这个值的单位和 screenX 相同。</td>
</tr>
<tr>
<td>radiusY</td>
<td>能够包围用户和触摸平面的接触面的最小椭圆的垂直轴（Y 轴）半径。这个值的单位和  screenY 相同</td>
</tr>
<tr>
<td>rotationAngle</td>
<td>由 radiusX 和 radiusY 描述的正方向椭圆，需要通过顺时针旋转这个角度值，才能最精准地覆盖住用户和触控面的接触面。</td>
</tr>
<tr>
<td>force</td>
<td>手指挤压触控平面的压力大小，取值范围 0.0 到 1.0 的浮点数（没有压力到最大压力）</td>
</tr>
</tbody>
</table>
<h2>应用实例</h2>
<h3>手势事件</h3>
<p>移动端手势事件（多指事件）</p>
<pre class="hljs"><code class="language-js">(<span class="hljs-keyword">function</span>(<span class="hljs-params">w</span>) {
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">gesture</span>(<span class="hljs-params">node, callback</span>) {
    <span class="hljs-comment">// 手势开始</span>
    node.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
      <span class="hljs-comment">// 当触摸元素时，判断屏幕上触摸屏幕的手指个数</span>
      <span class="hljs-keyword">if</span> (event.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">2</span>) {
        <span class="hljs-comment">// 标记已经触发了手势开始</span>
        node.<span class="hljs-property">isGestureStart</span> = <span class="hljs-literal">true</span>;
        <span class="hljs-comment">// 计算两个触点的初始距离</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startDistance</span> = <span class="hljs-title function_">calcDistance</span>(event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>], event.<span class="hljs-property">touches</span>[<span class="hljs-number">1</span>]);
        <span class="hljs-comment">// 计算两个触点的初始角度</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">startDegree</span> = <span class="hljs-title function_">calcDegree</span>(event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>], event.<span class="hljs-property">touches</span>[<span class="hljs-number">1</span>]);
        <span class="hljs-comment">// 调用回调函数</span>
        <span class="hljs-keyword">if</span> (callback &amp;&amp; <span class="hljs-keyword">typeof</span> callback[<span class="hljs-string">&#x27;start&#x27;</span>] === <span class="hljs-string">&#x27;function&#x27;</span>) {
          callback[<span class="hljs-string">&#x27;start&#x27;</span>]();
        }
      }
    });

    <span class="hljs-comment">// 手势移动</span>
    node.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
      <span class="hljs-keyword">if</span> (event.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">2</span>) {
        <span class="hljs-comment">// 计算当前两个触点的距离</span>
        <span class="hljs-keyword">const</span> currentDistance = <span class="hljs-title function_">calcDistance</span>(event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>], event.<span class="hljs-property">touches</span>[<span class="hljs-number">1</span>])
        <span class="hljs-comment">// 计算当前两个触点的距离</span>
        <span class="hljs-keyword">const</span> currentDegree = <span class="hljs-title function_">calcDegree</span>(event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>], event.<span class="hljs-property">touches</span>[<span class="hljs-number">1</span>])
        <span class="hljs-comment">// 计算当前两个触点的距离和两个触点的初始距离比例</span>
        event.<span class="hljs-property">scale</span> = currentDistance / <span class="hljs-variable language_">this</span>.<span class="hljs-property">startDistance</span>
        <span class="hljs-comment">// 计算两个触点，夹角的变化</span>
        event.<span class="hljs-property">rotation</span> = currentDistance - <span class="hljs-variable language_">this</span>.<span class="hljs-property">startDegree</span>
        <span class="hljs-comment">// 调用回调函数</span>
        <span class="hljs-keyword">if</span> (callback &amp;&amp; <span class="hljs-title function_">typeof</span>(callback[<span class="hljs-string">&#x27;change&#x27;</span>]) === <span class="hljs-string">&#x27;function&#x27;</span>) {
          callback[<span class="hljs-string">&#x27;change&#x27;</span>](event)
        }
      }
    })

    <span class="hljs-comment">// 手势结束</span>
    <span class="hljs-comment">// 触发过手势开始并且有触摸结束的时候判断屏幕上手指数量 &lt; 2</span>
    node.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchend&#x27;</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {
      <span class="hljs-keyword">if</span> (node.<span class="hljs-property">isGestureStart</span> &amp;&amp; event.<span class="hljs-property">touches</span>.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span>) {
        <span class="hljs-comment">// 重置标记</span>
        node.<span class="hljs-property">isGestureStart</span> = <span class="hljs-literal">false</span>;
        <span class="hljs-comment">// 调用回调函数</span>
        <span class="hljs-keyword">if</span> (callback &amp;&amp; <span class="hljs-title function_">typeof</span>(callback[<span class="hljs-string">&#x27;end&#x27;</span>]) === <span class="hljs-string">&#x27;function&#x27;</span>) {
          callback[<span class="hljs-string">&#x27;end&#x27;</span>]
        }
      }
    })


    <span class="hljs-keyword">function</span> <span class="hljs-title function_">calcDistance</span>(<span class="hljs-params">touch1, touch2</span>) {
      <span class="hljs-comment">// 计算两个直角边的长度</span>
      <span class="hljs-comment">// 水平方向的距离</span>
      <span class="hljs-keyword">const</span> x = touch2.<span class="hljs-property">clientX</span> - touch1.<span class="hljs-property">clientX</span>;
      <span class="hljs-comment">// 垂直方向的距离</span>
      <span class="hljs-keyword">const</span> y = touch2.<span class="hljs-property">clientY</span> - touch2.<span class="hljs-property">clientY</span>;
      <span class="hljs-comment">// 利用勾股定力，计算两个触点的距离（斜边的长度）</span>
      <span class="hljs-keyword">const</span> z = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(x * x + y * y);

      <span class="hljs-keyword">return</span> z;
    }

    <span class="hljs-keyword">function</span> <span class="hljs-title function_">calcDegree</span>(<span class="hljs-params">touch1, touch2</span>) {
      <span class="hljs-comment">// 计算两个触点的距离，两个直角边长度</span>
      <span class="hljs-keyword">const</span> x = touch2.<span class="hljs-property">clientX</span> - touch1.<span class="hljs-property">clientX</span>;
      <span class="hljs-keyword">const</span> y = touch2.<span class="hljs-property">clientY</span> - touch1.<span class="hljs-property">clientY</span>;
      <span class="hljs-comment">// 根据两个直角边比例 tan，计算角度</span>
      <span class="hljs-keyword">const</span> angle = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">atan2</span>(y, x); <span class="hljs-comment">// 是个弧度</span>
      <span class="hljs-comment">// 根据弧度计算角度</span>
      <span class="hljs-keyword">const</span> deg = (angle / <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) * <span class="hljs-number">180</span>;

      <span class="hljs-keyword">return</span> deg;
    }
  }

  w.<span class="hljs-property">gesture</span> = gesture;
})();
</code></pre>
<h3>移动端延迟问题</h3>
<p>移动端 <code>click</code> 事件有 300ms 延迟问题，<code>touch</code> 事件没有。</p>
<p>目前最广泛使用的解决移动端 <code>click</code> 延迟问题的方案是使用 <code>fastclick</code>。</p>
<p>fastclick 的思路就是利用 touch 来模拟 tap（触碰），如果认为是一次有效的 tap，则在 touchend 时立即模拟一个 click 事件，分发到事件源（相当于主动触发一次 <code>click</code> 事件），同时阻止掉浏览器 300ms 后产生的 <code>click</code> 事件。</p>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent" target="_blank" rel="noopener noreferrer nofollow">📖 MDN：TouchEvent</a></li>
<li><a href="https://www.w3.org/TR/touch-events/#touchevent-interface" target="_blank" rel="noopener noreferrer nofollow">📖 W3C：TouchEvent</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

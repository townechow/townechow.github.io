1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","computer-networks","http","http-connection"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","computer-networks/http/http-connection","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","computer-networks/http/http-connection","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","3PHXKdMZUBEhu2BvT0Fce",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T234f,<h1>HTTP 连接</h1>
<p>HTTP 连接是 HTTP 报文传输的关键通道。</p>
<h2>持久连接</h2>
<p>持久连接（Persistent Connection）</p>
<p>HTTP 协议采用 <strong>请求-应答</strong> 模式：</p>
<ul>
<li>普通模式：每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接</li>
<li>Keep-Alive 模式：该功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接</li>
</ul>
<p>在 HTTP/1.0 版本中，如果客户端浏览器支持 Keep-Alive ，那么就在 HTTP 请求头中添加一个字段 <code>Connection: Keep-Alive</code>，当服务器收到附带有 <code>Connection: Keep-Alive</code> 的请求时，它也会在响应头中添加一个同样的字段来使用 <code>Keep-Alive</code> 。这样一来，客户端和服务器之间的 HTTP 连接就会被保持，不会断开（超过 <code>Keep-Alive</code> 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p>
<p>在 HTTP/1.1 版本中，默认情况下所有连接都被保持，如果加入 <code>Connection: close</code> 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。</p>
<p>注意事项：</p>
<ul>
<li>HTTP Keep-Alive 简单来说就是保持当前的 TCP 连接，避免了重新建立连接</li>
<li>HTTP 长连接不可能一直保持，例如 <code>Keep-Alive: timeout=5, max=100</code>，表示这个 TCP 通道可以保持 5 秒，且该长连接最多接收 100 次请求就断开</li>
<li>HTTP 是无状态协议，意味着每个请求都是独立的，Keep-Alive 没能改变这个结果</li>
</ul>
<blockquote>
<p>❓ 使用长连接后，客户端和服务端如何知道本次传输结束呢？</p>
</blockquote>
<ol>
<li>判断传输数据是否达到了 <code>Content-Length</code> 指示的大小</li>
<li>动态生成的文件采用分块传输的方式传输（<code>Transfer-Encoding: chunked</code>），这时候就要根据 <code>chunked</code> 编码来判断，<code>chunked</code> 编码的数据在最后有一个空 <code>chunked</code> 块，表明本次传输数据结束</li>
</ol>
<h2>传输编码</h2>
<p>传输编码在 HTTP 的报文中，使用 <code>Transfer-Encoding</code> 首部字段进行标记，它就是指明当前使用的传输编码。</p>
<p><code>Transfer-Encoding</code> 会改变报文的格式和传输的方式，使用它不但不会减少内容传输的大小，甚至还有可能会使传输变大，看似是一个不环保的做法，但是其实是为了解决某些特殊问题。</p>
<p>简单来说，传输编码必须配合持久连接使用，为了持久连接中，将数据分块传输，并标记传输结束而设计的。</p>
<h2>分块编码传输</h2>
<p><code>Transfer-Encoding</code> 在 HTTP/1.1 协议里，就只有 <code>chunked</code> 这个参数，标识当前为分块编码传输。</p>
<p>分块传输的规则：</p>
<ol>
<li>每个分块包含一个十六进制的数据长度值和真实数据</li>
<li>数据长度值独占一行，和真实数据通过 CRLF（\r\n）分割</li>
<li>数据长度值，不计算真实数据末尾的 CRLF，只计算当前传输块的数据长度</li>
<li>最后通过一个数据长度值为 0 的分块，来标记当前内容实体传输结束</li>
</ol>
<h3>不定长包体实现</h3>
<p>分块传输编码 Chunked Transfer Encoding</p>
<pre class="hljs"><code class="language-http"><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked
</code></pre>
<p>表示分块传输数据，设置这个字段后会自动产生两个效果：</p>
<ul>
<li><code>Content-Length</code> 首部字段会被忽略</li>
<li>基于长连接持续推送动态内容</li>
</ul>
<p>我们以 Node.js 模拟分块传输：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);

<span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>();

server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/&#x27;</span>) {
    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf8&#x27;</span>);
    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Length&#x27;</span>, <span class="hljs-number">10</span>);
    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Transfer-Encoding&#x27;</span>, <span class="hljs-string">&#x27;chunked&#x27;</span>);
    res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>);
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
      res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;第一次传输&#x27;</span>);
    }, <span class="hljs-number">1000</span>);
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
      res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;第二次传输&#x27;</span>);
    }, <span class="hljs-number">2000</span>);
  }
});

server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8010</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功启动&#x27;</span>);
});
</code></pre>
<h3>分块编码的拖挂</h3>
<p>当我们使用 <code>chunked</code> 进行分块编码传输的时候，传输结束之后，还有机会在分块报文的末尾，再追加一段数据，此数据称为拖挂（Trailer）。</p>
<p>拖挂的数据，可以是服务端在末尾需要传递的数据，客户端其实是可以忽略并丢弃拖挂的内容的，这就需要双方协商好传输的内容了。</p>
<p>在拖挂中可以包含附带的首部字段，除了 <code>Transfer-Encoding</code>、<code>Trailer</code> 以及 <code>Content-Length</code> 首部之外，其他 HTTP 首部都可以作为拖挂发送。</p>
<h3>内容编码和传输编码结合</h3>
<p>内容编码和传输编码一般都是配合使用。我们会先使用内容编码，将内容实体进行压缩，然后通过传输编码分块发送出去。客户端接收到分块的数据，再将数据进行重新整合，还原成最初的数据。</p>
<h2>管线化连接</h2>
<p>默认情况下 HTTP 协议中每个传输层连接只能承载一个 HTTP 请求和响应，浏览器会在收到上个请求的响应后，再发送下个请求。</p>
<p>在使用持久连接的情况下，某个连接上消息传递类似于 <code>请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 -&gt; 响应3</code>.</p>
<p>HTTP Pipelining（管线化）是将多个 HTTP 请求整批提交的技术，在传送过程中不需等待服务端的应答。使用 HTTP 管线化后，某个连接上的消息变成类似这样，<code>请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3</code>。</p>
<p>注意事项：</p>
<ul>
<li>管线化机制通过 <strong>持久连接</strong>（Persistent Connection）完成，仅 HTTP/1.1 支持此技术</li>
<li>只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制</li>
<li>初次创建连接时不应启动管线机制，因为服务器不一定支持 HTTP/1.1 版本的协议</li>
<li>管线化不会影响响应到来的顺序</li>
<li>HTTP/1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只要要求对于管线化的请求不失败即可</li>
<li>由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持</li>
</ul>
<h2>参考资料</h2>
<ul>
<li><a href="https://juejin.im/post/6844904100035821575">📝 HTTP 灵魂之问，巩固你的 HTTP 知识体系</a></li>
<li><a href="https://www.cnblogs.com/cswuyg/p/3653263.html">📝 HTTP 的长连接和短连接</a></li>
<li><a href="https://juejin.im/post/6844903635881558024">📝 HTTP 传输编码增加了传输量，只为解决这个问题</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"HTTP 连接"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

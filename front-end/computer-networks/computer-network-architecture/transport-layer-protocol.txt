1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","computer-networks","computer-network-architecture","transport-layer-protocol"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","computer-networks/computer-network-architecture/transport-layer-protocol","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","computer-networks/computer-network-architecture/transport-layer-protocol","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","kU3f5Mv2qcHEsSAH2v9Rt",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T57df,<h1>传输层协议</h1>
<p>传输层（Transport Layer）的主要任务就是负责向两台主机进程之间的通信提供通用的 &lt;strong style=&quot;color:red&quot;&gt;数据传输服务&lt;/strong&gt;。应用进程利用该服务传送应用层报文。</p>
<p>网络协议族中有两个具有代表性的传输层协议，分别是 TCP 和 UDP。</p>
<ul>
<li>传输控制协议 TCP：提供面向连接的，可靠的数据传输服务</li>
<li>用户数据协议 UDP：提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）</li>
</ul>
<h2>TCP</h2>
<p><strong>传输控制协议</strong>（Transmission Control Protocol，简称 TCP）是一种 <strong>面向连接</strong>（连接导向）的、可靠的、 基于 IP 协议的传输层协议。</p>
<ul>
<li><strong>面向连接</strong>：每条 TCP 连接只能有两个端点（亦即点对点，不可广播、多播），每一条 TCP 连接只能是一对一</li>
<li><strong>可靠的传输服务</strong>：通过 TCP 连接传送的数据，无差错、不丢失、不重复、并且按序到达，丢包时通过重传机制进而增加时延实现可靠性</li>
<li><strong>全双工通信</strong>：TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据</li>
<li><strong>字节流</strong>：面向字节流，TCP 中的 <strong>流</strong>（Stream）指的是流入进程或从进程流出的字节序列</li>
<li><strong>流量缓冲</strong>：解决速度不匹配问题</li>
</ul>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/transport-layer-protocol/tcp-status-machine.jpeg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;TCP 状态机&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{400}</span> /&gt;</span></span>;
</code></pre>
<h3>数据包结构</h3>
<p>参考：<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer nofollow">数据包结构</a></p>
<p>TCP 首部标志比特有 6 个：URG、ACK、PSH、RST、SYN、FIN</p>
<table>
<thead>
<tr>
<th style="text-align:left">控制位</th>
<th style="text-align:left">名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">URG</td>
<td style="text-align:left">Urgent Flag</td>
<td style="text-align:left">紧急指针</td>
</tr>
<tr>
<td style="text-align:left">ACK</td>
<td style="text-align:left">Acknowledge Flag</td>
<td style="text-align:left">确认序号有效</td>
</tr>
<tr>
<td style="text-align:left">PSH</td>
<td style="text-align:left">Push Flag</td>
<td style="text-align:left">尽可能快地将数据送往接收进程</td>
</tr>
<tr>
<td style="text-align:left">RST</td>
<td style="text-align:left">Reset Flag</td>
<td style="text-align:left">可能需要重现创建建 TCP 连接</td>
</tr>
<tr>
<td style="text-align:left">SYN</td>
<td style="text-align:left">Synchronize</td>
<td style="text-align:left">同步序号来发起一个连接</td>
</tr>
<tr>
<td style="text-align:left">FIN</td>
<td style="text-align:left">Finish</td>
<td style="text-align:left">发送方完成发送任务，要求释放连接</td>
</tr>
<tr>
<td style="text-align:left">Seq</td>
<td style="text-align:left">Sequance number</td>
<td style="text-align:left">序列号</td>
</tr>
</tbody>
</table>
<h3>三次握手</h3>
<p>TCP 提供 &lt;strong style=&quot;color:red&quot;&gt;面向连接&lt;/strong&gt; 的通信传输。面向有连接是指在数据通信开始之前先做好两端之间的准备工作，也就是说无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。</p>
<p>三次握手是指建立一个 TCP 连接时需要客户端和服务器端总共发送三个包以确认连接的建立。</p>
<h4>握手的目标</h4>
<p>三次握手的目的：</p>
<ul>
<li><strong>同步连接双方的 Sequence 序列号和确认号</strong>
<ul>
<li>初始序列号 ISN（Initial Sequence Number）</li>
</ul>
</li>
<li><strong>交换 TCP 窗口大小信息</strong>
<ul>
<li>如 MSS、窗口比例因子、选择性确认、指定校验和算法</li>
</ul>
</li>
</ul>
<p>在 Socket 编程中，这一过程由客户端执行 <code>connect</code> 来触发。</p>
<h4>三次握手流程图</h4>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/transport-layer-protocol/handshake.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;三次握手流程图&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{800}</span> /&gt;</span></span>;
</code></pre>
<ol>
<li><strong>第一次握手</strong>：<strong>建立连接</strong>。客户端发送连接请求报文段，将标志比特位 SYN 置为 1，随机产生一个序列号码 Sequence Number 值为 X（由操作系统动态随机选取一个 32 位长的序列号），并将该数据包发送给服务端，客户端进入 <code>SYN_SENT</code> 状态，等待服务端确认。</li>
<li><strong>第二次握手</strong>：<strong>服务端收到 SYN 报文段</strong>。服务端收到数据包后需要对标志位 SYN 报文段进行确认，确认后设置确认号码 Acknowledgment Number 为 X+1（Sequence Number+1）；同时，自己还要发送 SYN 请求信息（以建立服务端对客户端的连接），将 SYN 设置为 1，设置 Sequence Number 值为 Y（由操作系统动态随机选取一个 32 位长的序列号），服务端将上述所有信息放到一个报文段（即 SYN+ACK 报文段）中，一并发送给客户端<strong>以确认建立连接请求</strong>，服务端进入 <code>SYN_RCVD</code> 状态。</li>
<li><strong>第三次握手</strong>：<strong>客户端收到服务端的 SYN+ACK 报文段</strong>。确认后，然后将 Acknowledgment Number 设置为 Y+1，向服务端发送 ACK 报文段，这个报文段发送完毕后，客户端和服务器端进入 ESTABLISHED 状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了。</li>
</ol>
<p>握手过程中传送的包里&lt;span style=&quot;font-weight:bold;color:red&quot;&gt;不包含数据&lt;/span&gt;，只有三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP 连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</p>
<h4>握手报文</h4>
<p>SYN 报文</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/transport-layer-protocol/tcp-handshaking-1.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;三次握手-1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{640}</span> /&gt;</span></span>;
</code></pre>
<p>SYN/ACK 报文</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/transport-layer-protocol/tcp-handshaking-2.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;三次握手-2&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{640}</span> /&gt;</span></span>;
</code></pre>
<p>ACK 报文</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/transport-layer-protocol/tcp-handshaking-3.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;三次握手-3&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{640}</span> /&gt;</span></span>;
</code></pre>
<h4>其他问题</h4>
<p><strong>未连接队列</strong></p>
<p>在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的 SYN 包（syn=j）开设一个条目，该条目表明服务器已收到 SYN 包，并向客户端发出确认，正在等待客户端的确认包。这些条目所标识的连接在服务器处于 <code>SYN_RECV</code> 状态，当服务器收到客户端的确认包时，删除该条目，服务器进入 <code>ESTABLISHED</code> 状态。</p>
<p><strong>为什么建立 TCP 连接需要三次握手？</strong></p>
<p>主要是为了防止服务端开启无用的连接。</p>
<p>因为我们知道网络传输是有延时的，因为终端间隔了非常远的距离，数据包通过光纤以及各种中间代理服务器进行传输，但是在服务端和客户端的传输过程中，往往由于网络传输的不稳定原因丢失了数据包，客户端一直没有收到服务端返回的数据包，客户端可能设置了超时时间关闭了连接创建，那么就会再发起新的请求。如果没有第三次握手，服务端是不知道客户端到底有没有接收到服务端返回给他的数据的，客户端也没有一个确认说要关闭还是要创建这个请求，服务端的端口就一直开着，等着客户端发送实际的请求数据，那么这个时候开销就浪费了，服务端不知道这个连接已经创建失败了，可能客户端已经创建别的连接去了。</p>
<p>所以我们需要三次握手来确认这个过程，让服务端和客户端能及时察觉到网络原因导致的网络连接的关闭的问题，从而规避网络传输中因为延时导致导致的服务器开销问题。</p>
<p><strong>三次握手中的第一次握手可以携带数据吗？</strong></p>
<p>不可以，因为三次握手还没完成。</p>
<p><strong>第三次握手可以发送数据吗？为何？</strong></p>
<p>可以。因为能够发出第三次握手报文的主机，肯定接收到第二次（来自服务端）的握手报文。因为伪造 IP 的主机不会收到第二次报文。</p>
<p><strong>对方难道不可以将数据缓存下来，等握手成功后再提交给应用程序？</strong></p>
<p>这样会放大 SYN FLOOD 攻击。如果攻击者伪造了成千上万的握手报文，携带了 1K+ 字节的数据，而接收方会开辟大量的缓存来容纳这些巨大数据，内存会很容易耗尽，从而拒绝服务。</p>
<h3>四次挥手</h3>
<p>四次挥手即终止 TCP 连接，就是指断开一个 TCP 连接时，需要客户端和服务端总共发送 4 个包以确认连接的断开。在 Socket 编程中，这一过程由客户端或服务端任一方执行 <code>close</code> 来触发。</p>
<p>由于 TCP 连接是&lt;span style=&quot;font-weight:bold;color:red&quot;&gt;全双工&lt;/span&gt;的，因此，每个方向都必须要<strong>单独进行关闭</strong>，这一原则是当一方完成数据发送任务后，发送一个 <code>FIN</code> 来终止这一方向的连接，收到一个 <code>FIN</code> 只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个 TCP 连接上仍然能够发送数据，直到这一方向也发送了 <code>FIN</code>。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。</p>
<p><strong>四次挥手流程图</strong></p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/transport-layer-protocol/wave.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;四次挥手流程图&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{800}</span> /&gt;</span></span>;
</code></pre>
<ol>
<li><strong>第一次挥手</strong>：客户端设置 Sequence Number，发送一个 <code>FIN</code> 报文段，用于关闭客户端到服务器端的数据传送，客户端进入 <code>FIN_WAIT_1</code> 状态。意思是说「我客户端没有数据要发给你了」，但是如果你服务器端还有数据没有发送完成，则不必急着关闭连接，可以继续发送数据。</li>
<li><strong>第二次挥手</strong>：服务器端收到 <code>FIN</code> 报文段，回复 <code>ACK</code> 报文段，Acknowledgment Number 为 Sequence Number 加 1，告诉客户端，你的请求我收到了，我同意你的关闭请求。这个时候客户端就进入 <code>FIN_WAIT_2</code> 状态。</li>
<li><strong>第三次挥手</strong>：当服务器端确定数据已发送完成，则向客户端发送 <code>FIN</code> 报文段，告诉客户端，好了，我这边数据发完了，准备好关闭连接了。服务器端进入 <code>LAST_ACK</code> 状态。</li>
<li><strong>第四次挥手</strong>：客户端收到 <code>FIN</code> 报文段后，就知道可以关闭连接了，但是他还是不相信网络，怕服务器端不知道要关闭，所以发送 <code>ACK</code> 报文段回复服务端，然后进入 <code>TIME_WAIT</code> 状态，如果服务端端没有收到 <code>ACK</code> 则可以重传。服务器端收到 <code>ACK</code> 后，就知道可以断开连接了。客户端等待了 2MSL（通常是两分钟）后依然没有收到回复，则证明服务器端已正常关闭，那好，我客户端也可以关闭连接了。最终完成了四次握手。</li>
</ol>
<blockquote>
<p>MSL（Maximum Segment Lifetime）报文最大生存时间。维持 2MSL 时长的 TIME-WAIT 状态，保证至少一次报文的往返时间内端口是不可复用。</p>
</blockquote>
<ul>
<li>第一次挥手是<strong>服务端确认客户端需要断开连接</strong></li>
<li>第二次挥手是<strong>客户端确认服务器接收断开请求</strong></li>
<li>第三次挥手是<strong>客户端确认服务器数据发完，断开连接</strong></li>
<li>第四次挥手是<strong>服务端确认客户端断开连接，断开连接</strong></li>
</ul>
<p>所以如果服务端的数据全部发送完，是没有第三次挥手，直接进入第四次挥手。</p>
<p><strong>为什么断开 TCP 连接需要四次挥手？</strong></p>
<p>由于 TCP 连接采取全双工的通信方式，因此每个方向都必须单独进行关闭，这个原则是当一方完成它的数据发送任务后就能发送一个 <code>FIN</code> 来终止这个方向的连接。收到一个 <code>FIN</code> 只意味着这一方向上没有数据流动，一个 TCP 连接在收到一个 <code>FIN</code> 后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p>
<p><strong>为什么基于 TCP 的程序往往都有个应用层的心跳检测机制？</strong></p>
<p>TCP 建立链接后，只是在两端的内核里面维持 TCP 信息，实际上并没有一个物理的连接通路，对端这个时候挂了，谁也不知道。</p>
<h3>重传机制</h3>
<h3>拥塞控制机制</h3>
<h3>流量控制机制</h3>
<h3>可靠传输机制</h3>
<h2>UDP</h2>
<p>用户数据报协议（User Datagram Protocol，UDP），又称使用者资料包协定，是一个简单的面向数据包的传输层协议，正式规范为 RFC 768。</p>
<p>在 TCP/IP 模型中，UDP 为网络层以上和应用层以下提供了一个简单的接口。UDP 只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以 UDP 有时候也被认为是不可靠的数据报协议）。UDP 在 IP 数据报的头部仅仅加入了复用和数据校验（字段）。</p>
<h3>特点</h3>
<ul>
<li>&lt;strong style=&quot;color:red&quot;&gt;无需建立连接&lt;/strong&gt;（减少延迟）</li>
<li>尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态</li>
<li>UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要短</li>
<li>没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如直播，实时视频会议等）</li>
<li>支持一对一、一对多、多对一和多对多的交互通信</li>
</ul>
<h3>实践</h3>
<p><strong>基于 UDP 协议的有：</strong></p>
<ul>
<li>域名系统（DNS）</li>
<li>简单网络管理协议（SNMP）</li>
<li>动态主机配置协议（DHCP）</li>
<li>路由信息协议（RIP）</li>
<li>自举协议（BOOTP）</li>
<li>简单文件传输协议（TFTP）</li>
</ul>
<h2>数据通信形式</h2>
<ul>
<li>单工数据传输只支持数据在一个方向上传输</li>
<li>半双工数据传输允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信</li>
<li>全双工数据通信允许数据同时在两个方向上传输，因此，<strong>全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力</strong></li>
</ul>
<h2>TCP 与 UDP</h2>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">TCP</th>
<th style="text-align:left">UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">连接性</td>
<td style="text-align:left">面向连接</td>
<td style="text-align:left">无连接</td>
</tr>
<tr>
<td style="text-align:left">双工性</td>
<td style="text-align:left">全双工（1:1）</td>
<td style="text-align:left"><code>n:m</code></td>
</tr>
<tr>
<td style="text-align:left">可靠性</td>
<td style="text-align:left">可靠（重传机制）</td>
<td style="text-align:left">不可靠（丢包后数据丢失）</td>
</tr>
<tr>
<td style="text-align:left">有序性</td>
<td style="text-align:left">有序（通过 SYN 排序）</td>
<td style="text-align:left">无序</td>
</tr>
<tr>
<td style="text-align:left">有界性</td>
<td style="text-align:left">无，有沾包情况</td>
<td style="text-align:left">有消息边界，无沾包</td>
</tr>
<tr>
<td style="text-align:left">拥塞控制</td>
<td style="text-align:left">有</td>
<td style="text-align:left">无</td>
</tr>
<tr>
<td style="text-align:left">传输速度</td>
<td style="text-align:left">慢</td>
<td style="text-align:left">快</td>
</tr>
<tr>
<td style="text-align:left">量级</td>
<td style="text-align:left">低</td>
<td style="text-align:left">20-60 字节</td>
</tr>
<tr>
<td style="text-align:left">头部大小</td>
<td style="text-align:left">高</td>
<td style="text-align:left">8 字节</td>
</tr>
</tbody>
</table>
<h2>参考资料</h2>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer nofollow">📖 维基百科：传输控制协议</a></li>
<li><a href="https://juejin.im/post/5ba895a06fb9a05ce95c5dac" target="_blank" rel="noopener noreferrer nofollow">📝 TCP 协议详解</a></li>
<li><a href="https://juejin.im/post/5a069b6d51882509e5432656" target="_blank" rel="noopener noreferrer nofollow">📝 一篇文章带你熟悉 TCP/IP 协议</a></li>
<li><a href="https://juejin.im/post/5ba3b68c6fb9a05d287345ab" target="_blank" rel="noopener noreferrer nofollow">📝 前端必须懂的计算机网络知识</a></li>
<li><a href="http://jm.taobao.org/2017/06/08/20170608/" target="_blank" rel="noopener noreferrer nofollow">📝 就是要你懂 TCP</a></li>
<li><a href="https://segmentfault.com/a/1190000024571707" target="_blank" rel="noopener noreferrer nofollow">📝 TCP / IP 协议没有哪篇文章能讲的这么明明白白！</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

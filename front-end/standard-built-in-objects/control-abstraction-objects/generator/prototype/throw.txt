1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","standard-built-in-objects","control-abstraction-objects","generator","prototype","throw"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/control-abstraction-objects/generator/prototype/throw","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/control-abstraction-objects/generator/prototype/throw","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","jYcH_xbGaZ03poWRBNsgW",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T4932,<h1>Generator.prototype.throw</h1>
<p>Generator 函数返回的遍历器对象，都有一个 <code>throw</code> 方法，可以在<strong>函数体外抛出错误</strong>，然后在 Generator <strong>函数体内捕获</strong>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> geratorgenerator = <span class="hljs-keyword">function</span>* () {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">yield</span>;
  } <span class="hljs-keyword">catch</span> (e) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部捕获&#x27;</span>, e);
  }
};

<span class="hljs-keyword">const</span> iterator = <span class="hljs-title function_">generator</span>();
iterator.<span class="hljs-title function_">next</span>();

<span class="hljs-keyword">try</span> {
  iterator.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;a&#x27;</span>);
  iterator.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;b&#x27;</span>);
} <span class="hljs-keyword">catch</span> (e) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;外部捕获&#x27;</span>, e);
}

<span class="hljs-comment">// 内部捕获 a</span>
<span class="hljs-comment">// 外部捕获 b</span>
</code></pre>
<p>上面代码中，遍历器对象 <code>iterator</code> 连续抛出两个错误。</p>
<ul>
<li>
<p>第一个错误被 Generator 函数体内的 <code>catch</code> 语句捕获。</p>
</li>
<li>
<p><code>iterator</code> 第二次抛出错误，由于 Generator 函数内部的 <code>catch</code> 语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就被抛出了 Generator 函数体，被函数体外的 <code>catch</code> 语句捕获。</p>
</li>
</ul>
<h2>可接收参数</h2>
<p>💡 <code>throw</code> 方法可以接受一个参数，该参数会被 <code>catch</code> 语句接收，建议抛出 <code>Error</code> 对象的实例。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> generator = <span class="hljs-keyword">function</span>* () {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">yield</span>;
  } <span class="hljs-keyword">catch</span> (e) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);
  }
};

<span class="hljs-keyword">const</span> iterator = <span class="hljs-title function_">generator</span>();

iterator.<span class="hljs-title function_">next</span>();

iterator.<span class="hljs-keyword">throw</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;出错了！&#x27;</span>));
<span class="hljs-comment">// Error: 出错了！(…)</span>
</code></pre>
<p>⚠️ <strong>注意</strong>：不要混淆遍历器对象的 <code>throw</code> 方法和全局的 <code>throw</code> 命令。</p>
<p>上面代码的错误，是用遍历器对象的 <code>throw</code> 方法抛出的，而不是用 <a href="/front-end/basic-concept/statements-and-declarations/the-throw-statement">throw</a> 命令抛出的。后者只能被函数体外的 <code>catch</code> 语句捕获。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> generator = <span class="hljs-keyword">function</span>* () {
  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
    <span class="hljs-keyword">try</span> {
      <span class="hljs-keyword">yield</span>;
    } <span class="hljs-keyword">catch</span> (e) {
      <span class="hljs-keyword">if</span> (e != <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">throw</span> e;
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部捕获&#x27;</span>, e);
    }
  }
};

<span class="hljs-keyword">const</span> iterator = <span class="hljs-title function_">generator</span>();

iterator.<span class="hljs-title function_">next</span>();

<span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;a&#x27;</span>);
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;b&#x27;</span>);
} <span class="hljs-keyword">catch</span> (e) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;外部捕获&#x27;</span>, e);
}

<span class="hljs-comment">// 外部捕获 [Error: a]</span>
</code></pre>
<p>上面代码之所以只捕获了 <code>a</code>，是因为函数体外的 <code>catch</code> 语句块，捕获了抛出的 <code>a</code> 错误以后，就不会再继续 <code>try</code> 代码块里面剩余的语句了。</p>
<h2>外部捕获</h2>
<p>如果 Generator 函数内部没有部署 <code>try...catch</code> 代码块，那么 <code>throw</code> 方法抛出的错误，将被外部 <code>try...catch</code> 代码块捕获。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> generator = <span class="hljs-keyword">function</span>* () {
  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
    <span class="hljs-keyword">yield</span>;
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部捕获&#x27;</span>, e);
  }
};

<span class="hljs-keyword">const</span> iterator = <span class="hljs-title function_">generator</span>();
iterator.<span class="hljs-title function_">next</span>();

<span class="hljs-keyword">try</span> {
  iterator.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;a&#x27;</span>);
  iterator.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;b&#x27;</span>);
} <span class="hljs-keyword">catch</span> (e) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;外部捕获&#x27;</span>, e);
}
<span class="hljs-comment">// 外部捕获 a</span>
</code></pre>
<p>上面代码中，Generator 函数 <code>gerator</code> 内部没有部署 <code>try...catch</code> 代码块，所以抛出的错误直接被外部 <code>catch</code> 代码块捕获。</p>
<h2>中断执行</h2>
<p>如果 Generator 函数内部和外部，都没有部署 <code>try...catch</code> 代码块，那么程序将报错，直接中断执行。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> gen = <span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);
  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;World&#x27;</span>);
};

<span class="hljs-keyword">const</span> generator = <span class="hljs-title function_">gen</span>();

generator.<span class="hljs-title function_">next</span>();

generator.<span class="hljs-keyword">throw</span>();
<span class="hljs-comment">// Hello</span>
<span class="hljs-comment">// Uncaught undefined</span>
</code></pre>
<p>上面代码中，<code>generator.throw</code> 抛出错误以后，没有任何 <code>try...catch</code> 代码块可以捕获这个错误，导致程序报错，中断执行。</p>
<h2>内部捕获的前提条件</h2>
<p><code>throw</code> 方法抛出的错误要被内部捕获，前提是必须至少执行过一次 <code>next</code> 方法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;
  } <span class="hljs-keyword">catch</span> (e) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部捕获&#x27;</span>);
  }
}

<span class="hljs-keyword">const</span> generator = <span class="hljs-title function_">gen</span>();

generator.<span class="hljs-keyword">throw</span>(<span class="hljs-number">1</span>);
<span class="hljs-comment">// Uncaught 1</span>
</code></pre>
<p>上面代码中，<code>generator.throw(1)</code> 执行时，<code>next</code> 方法一次都没有执行过。这时，抛出的错误不会被内部捕获，而是直接在外部抛出，导致程序出错。这种行为其实很好理解，因为第一次执行 <code>next</code> 方法，等同于启动执行 Generator 函数的内部代码，否则 Generator 函数还没有开始执行，这时 <code>throw</code> 方法抛错只可能抛出在函数外部。</p>
<h2>附带执行</h2>
<p><code>throw</code> 方法被捕获以后，会附带执行下一条 <code>yield</code> 表达式。也就是说，会附带执行一次 <code>next</code> 方法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> gen = <span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>);
  } <span class="hljs-keyword">catch</span> (e) {
    <span class="hljs-comment">// ...</span>
  }
  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>);
  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c&#x27;</span>);
};

<span class="hljs-keyword">const</span> generator = <span class="hljs-title function_">gen</span>();

generator.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">// a</span>
generator.<span class="hljs-keyword">throw</span>(); <span class="hljs-comment">// b</span>
generator.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">// c</span>
</code></pre>
<p>上面代码中，<code>generator.throw</code> 方法被捕获以后，自动执行了一次 <code>next</code> 方法，所以会打印 <code>b</code>。另外，也可以看到，只要 Generator 函数内部部署了 <code>try...catch</code> 代码块，那么遍历器的 <code>throw</code> 方法抛出的错误，不影响下一次遍历。</p>
<h2>独立状态</h2>
<p>另外，<code>throw</code> 命令与 <code>generator.throw</code> 方法是无关的，两者互不影响。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> gen = <span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);
  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;world&#x27;</span>);
};

<span class="hljs-keyword">const</span> gerator = <span class="hljs-title function_">gen</span>();

gerator.<span class="hljs-title function_">next</span>();

<span class="hljs-keyword">try</span> {
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>();
} <span class="hljs-keyword">catch</span> (e) {
  gerator.<span class="hljs-title function_">next</span>();
}

<span class="hljs-comment">// hello</span>
<span class="hljs-comment">// world</span>
</code></pre>
<p>上面代码中，<code>throw</code> 命令抛出的错误不会影响到遍历器的状态，所以两次执行 <code>next</code> 方法，都进行了正确的操作。</p>
<h2>总结归纳</h2>
<p>这种函数体内捕获错误的机制，大大方便了对错误的处理。多个 <code>yield</code> 表达式，可以只用一个 <code>try...catch</code> 代码块来捕获错误。如果使用回调函数的写法，想要捕获多个错误，就不得不为每个函数内部写一个错误处理语句，现在只在 Generator 函数内部写一次 <code>catch</code> 语句就可以了。</p>
<p>Generator 函数体外抛出的错误，可以在函数体内捕获；反过来，Generator 函数体内抛出的错误，也可以被函数体外的 <code>catch</code> 捕获。</p>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">var</span> x = <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;
  <span class="hljs-keyword">var</span> y = x.<span class="hljs-title function_">toUpperCase</span>();
  <span class="hljs-keyword">yield</span> y;
}

<span class="hljs-keyword">var</span> it = <span class="hljs-title function_">foo</span>();

it.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">// { value:3, done:false }</span>

<span class="hljs-keyword">try</span> {
  it.<span class="hljs-title function_">next</span>(<span class="hljs-number">42</span>);
} <span class="hljs-keyword">catch</span> (err) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);
}
</code></pre>
<p>上面代码中，第二个 <code>next</code> 方法向函数体内传入一个参数 42，数值是没有 <code>toUpperCase</code> 方法的，所以会抛出一个 TypeError 错误，被函数体外的 <code>catch</code> 捕获。</p>
<p>一旦 Generator 执行过程中抛出错误，且没有被内部捕获，就不会再执行下去了。如果此后还调用 <code>next</code> 方法，将返回一个 <code>value</code> 属性等于 <code>undefined</code>、<code>done</code> 属性等于 <code>true</code> 的对象，即 JavaScript 引擎认为这个 Generator 已经运行结束了。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">g</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;throwing an exception&#x27;</span>);
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;generator broke!&#x27;</span>);
  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;
  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">generator</span>) {
  <span class="hljs-keyword">var</span> v;
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;starting generator&#x27;</span>);
  <span class="hljs-keyword">try</span> {
    v = generator.<span class="hljs-title function_">next</span>();
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一次运行next方法&#x27;</span>, v);
  } <span class="hljs-keyword">catch</span> (err) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;捕捉错误&#x27;</span>, v);
  }
  <span class="hljs-keyword">try</span> {
    v = generator.<span class="hljs-title function_">next</span>();
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二次运行next方法&#x27;</span>, v);
  } <span class="hljs-keyword">catch</span> (err) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;捕捉错误&#x27;</span>, v);
  }
  <span class="hljs-keyword">try</span> {
    v = generator.<span class="hljs-title function_">next</span>();
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第三次运行next方法&#x27;</span>, v);
  } <span class="hljs-keyword">catch</span> (err) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;捕捉错误&#x27;</span>, v);
  }
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;caller done&#x27;</span>);
}

<span class="hljs-title function_">log</span>(<span class="hljs-title function_">g</span>());
<span class="hljs-comment">// starting generator</span>
<span class="hljs-comment">// 第一次运行next方法 { value: 1, done: false }</span>
<span class="hljs-comment">// throwing an exception</span>
<span class="hljs-comment">// 捕捉错误 { value: 1, done: false }</span>
<span class="hljs-comment">// 第三次运行next方法 { value: undefined, done: true }</span>
<span class="hljs-comment">// caller done</span>
</code></pre>
<p>上面代码一共三次运行 <code>next</code> 方法，第二次运行的时候会抛出错误，然后第三次运行的时候，Generator 函数就已经结束了，不再执行下去了。</p>
<hr>
<p><strong>参考书籍：</strong></p>
<ul>
<li><a href="http://es6.ruanyifeng.com/#docs/generator#Generator-prototype-throw" target="_blank" rel="noopener noreferrer nofollow">《ECMAScript 6 入门》阮一峰著</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Generator.prototype.throw"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

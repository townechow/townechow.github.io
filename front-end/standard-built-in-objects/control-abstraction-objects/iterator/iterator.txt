1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","standard-built-in-objects","control-abstraction-objects","iterator","iterator"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/control-abstraction-objects/iterator/iterator","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/control-abstraction-objects/iterator/iterator","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","TSLIWjWaVfF6LX_K6MZTm",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2b6e,<h1>Iterator</h1>
<p>遍历器（Iterator）为各种不同的数据结构提供统一的接口访问机制。任何数据结构只要部署 Iterator 接口，即无须初始化集合，以及索引的变量，而是使用迭代器对象的 <code>next</code> 方法，依次返回集合的下一项值，便于逐项处理该数据结构的所有成员，偏向程序化。</p>
<p><strong>ES5 中的 Loop 的缺点</strong></p>
<table>
<thead>
<tr>
<th>循环方法</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>for</code> 语句</td>
<td>条件部分冗杂；多层嵌套需要定义多个变量，复杂度过高</td>
</tr>
<tr>
<td><code>for...in</code> 语句</td>
<td>只能获取对象键名，需要通过属性访问器的方括号形式获取键值；只适用于对象，其他数组类型不适用</td>
</tr>
<tr>
<td><code>forEach</code> 方法</td>
<td>不能中断，跳出循环</td>
</tr>
</tbody>
</table>
<h2>迭代器</h2>
<p>迭代器是带有特殊接口的对象。含有一个 <code>next()</code> 方法，调用后返回一个包含两个属性的对象，分别是 <code>value</code>（表示属性值） 和 <code>done</code>（表示迭代是否完成）。当迭代完成后，即 <code>done</code> 属性为 <code>true</code> 时，调用 <code>next()</code> 无效。</p>
<p>模拟 Iterator 的内部实现（实质是一个返回迭代器对象的工厂函数）：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> iterable = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]

<span class="hljs-keyword">function</span> <span class="hljs-title function_">createIterator</span>(<span class="hljs-params">array</span>){
    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>
    <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">next</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){
            <span class="hljs-keyword">return</span> count &lt; array.<span class="hljs-property">length</span> ?
                {<span class="hljs-attr">value</span>: array[count], <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>}:
            	{<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>}
        }
    }
}

<span class="hljs-keyword">let</span> myIterator = <span class="hljs-title function_">createIterator</span>(iterable)

myIterator.<span class="hljs-title function_">next</span>()	<span class="hljs-comment">// {value: 1, done: false}</span>
myIterator.<span class="hljs-title function_">next</span>()	<span class="hljs-comment">// {value: 2, done: false}</span>
myIterator.<span class="hljs-title function_">next</span>()	<span class="hljs-comment">// {value: 3, done: false}</span>
myIterator.<span class="hljs-title function_">next</span>()	<span class="hljs-comment">// {value: undefined, done: true}</span>
</code></pre>
<h2>迭代器协议</h2>
<p>迭代器对象不是新的语法或新的内置对象，而一种协议（ <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">迭代器协议</a>)，所有遵守这个协议的对象，都可以称之为迭代器。也就是说我们上面 ES5 的写法得到的对象遵循迭代器协议，即包含 <code>next</code>，调用 <code>next</code> 返回一个<code>result{value，done}</code>。</p>
<h2>可迭代对象</h2>
<p>满足可迭代协议的对象是可迭代对象。</p>
<p>可迭代协议：对象的 <code>Symbol.iterator</code> 属性的值是一个无参函数，该函数返回一个迭代器。</p>
<p>下面是数组的 <code>Symbol.iterator</code> 属性实现的迭代。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-keyword">const</span> iter = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]()

iter.<span class="hljs-title function_">next</span>()		<span class="hljs-comment">// Output: {value: 0, done: false}</span>
iter.<span class="hljs-title function_">next</span>()		<span class="hljs-comment">// Output: {value: 1, done: false}</span>
iter.<span class="hljs-title function_">next</span>()		<span class="hljs-comment">// Output: {value: 2, done: false}</span>
iter.<span class="hljs-title function_">next</span>()		<span class="hljs-comment">// Output: {value: undefined, done: true}</span>
</code></pre>
<h3>内置可迭代对象</h3>
<p>原生具备 Iterator 接口的数据结构：</p>
<ul>
<li>Array</li>
<li>Map</li>
<li>Set</li>
<li>String</li>
<li>TypedArray</li>
<li>函数的 arguments 对象</li>
<li>NodeList 对象</li>
</ul>
<h3>自定义可迭代对象</h3>
<p>我们可以实现一个自己的可迭代对象：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> myIterable = {}

myIterable[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span>*(){
    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>
    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>
    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>
}

[...myIterable]		<span class="hljs-comment">// Output: [1, 2, 3]</span>
</code></pre>
<h3>接受可迭代对象的内置 API</h3>
<p>许多 API 接受可迭代对象, 例如：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Map"><code>Map([iterable])</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/WeakMap"><code>WeakMap([iterable])</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set"><code>Set([iterable])</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet"><code>WeakSet([iterable])</code></a>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> myObj = {};
<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-number">1</span>,<span class="hljs-string">&quot;a&quot;</span>],[<span class="hljs-number">2</span>,<span class="hljs-string">&quot;b&quot;</span>],[<span class="hljs-number">3</span>,<span class="hljs-string">&quot;c&quot;</span>]]).<span class="hljs-title function_">get</span>(<span class="hljs-number">2</span>);               <span class="hljs-comment">// &quot;b&quot;</span>
<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>([[{},<span class="hljs-string">&quot;a&quot;</span>],[myObj,<span class="hljs-string">&quot;b&quot;</span>],[{},<span class="hljs-string">&quot;c&quot;</span>]]).<span class="hljs-title function_">get</span>(myObj); <span class="hljs-comment">// &quot;b&quot;</span>
<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).<span class="hljs-title function_">has</span>(<span class="hljs-number">3</span>);                               <span class="hljs-comment">// true</span>
<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-string">&quot;123&quot;</span>).<span class="hljs-title function_">has</span>(<span class="hljs-string">&quot;2&quot;</span>);                                 <span class="hljs-comment">// true</span>
<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>(<span class="hljs-keyword">function</span>*() {
    <span class="hljs-keyword">yield</span> {};
    <span class="hljs-keyword">yield</span> myObj;
    <span class="hljs-keyword">yield</span> {};
}()).<span class="hljs-title function_">has</span>(myObj);
</code></pre>
<p>另外还有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"><code>Promise.all(iterable)</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"><code>Promise.race(iterable)</code></a> 以及 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from"><code>Array.from()</code></a>。</p>
<h2>for...of 循环</h2>
<p><code>for...of</code> 接受一个可迭代对象（Iterable），或者能被强制转换/包装成一个可迭代对象的值。遍历时，<code>for...of</code> 会获取可迭代对象的 <code>[Symbol.iterator]()</code>，对该迭代器逐次调用 <code>next()</code>，直到迭代器返回对象的 <code>done</code> 属性为 <code>true</code> 时，遍历结束，不对该 <code>value</code> 处理。</p>
<p><code>for...of</code> 循环实例：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>];

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> val <span class="hljs-keyword">of</span> a) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( val );
}
<span class="hljs-comment">// &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot;</span>
</code></pre>
<p>转换成普通 <code>for</code> 循环示例，等价于上面 <code>for...of</code> 循环：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>];

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> val, ret, it = a[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();
    (ret = it.<span class="hljs-title function_">next</span>()) &amp;&amp; !ret.<span class="hljs-property">done</span>;
) {
    val = ret.<span class="hljs-property">value</span>;
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( val );
}
<span class="hljs-comment">// &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot;</span>
</code></pre>
<hr>
<p><strong>参考文章</strong>：</p>
<ul>
<li><a href="http://es6.ruanyifeng.com/#docs/iterator">ECMAScript 6 入门：Iterator</a></li>
<li><a href="https://juejin.im/entry/5924f5302f301e006b35fba5">ES6 之迭代器（Iterator）</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Iterator"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

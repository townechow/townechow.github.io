1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","standard-built-in-objects","control-abstraction-objects","promise","promise"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/control-abstraction-objects/promise/promise","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/control-abstraction-objects/promise/promise","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","KvQhvjqDBu1TQTb5TIhBm",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3bbf,<h1>Promise</h1>
<p>传统异步编程最大特点是地狱式回调嵌套，一旦嵌套层级过深，项目代码将难以理解和维护。而 Promise 能让我们通过 &lt;strong style=&quot;color:red&quot;&gt;链式调用&lt;/strong&gt; 的方法去解决回调地狱的问题。</p>
<p>Promise 是异步编程的一种解决方案，可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果。可以在对象之间传递和操作 Promise，帮助我们处理队列。</p>
<p>语法：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(executor);
</code></pre>
<p><code>executor</code> 函数参数语法：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>){...}
</code></pre>
<p>Promise 的参数 <code>executor</code> 是带有 <code>resolve</code> 和 <code>reject</code> 两个参数的函数。而这两个参数也是函数。</p>
<ul>
<li><code>resolve</code>：从 Pending（待定） 变为 Fullfilled（实现），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。该函数的参数除了<strong>正常的值</strong>以外，还可能是<strong>另一个 Promise 实例</strong>。</li>
<li><code>reject</code>：从 Pending（待定） 变为 Rejected（否决），在异步失败时调用，并将异步操作报出的错误，作为参数传递出去。该函数的参数通常是 <strong>Error 对象</strong>的实例，表示抛出的错误。</li>
</ul>
<p>类型声明：</p>
<pre class="hljs"><code class="language-ts"><span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">executor</span>: (resolve: (result: R) =&gt; <span class="hljs-built_in">void</span>, reject: (error: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span>) =&gt; <span class="hljs-built_in">void</span></span>): <span class="hljs-title class_">Promise</span>

<span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">executor</span>: (resolve: (thenable: Thenable&lt;R&gt;) =&gt; <span class="hljs-built_in">void</span>, reject: (error: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span>) =&gt; <span class="hljs-built_in">void</span></span>): <span class="hljs-title class_">Promise</span>
</code></pre>
<h2>描述</h2>
<ul>
<li>Promise 构造函数执行时<strong>立即调用</strong> <code>executor</code> 函数，<code>resolve</code> 和 <code>reject</code> 两个函数作为参数传入 <code>executor</code> （<code>executor</code> 函数会在 Promise 构造函数返回新建对象前被调用）。</li>
<li><code>executor</code> 内部通常会执行一些异步操作，一旦完成，可以调用 <code>resolve</code> 函数来将 Promise 状态改成 Fulfilled，或者在发生错误时将它的状态改为 Rejected</li>
<li>无法取消 Promise，一旦新建它就会立即执行，<strong>无法中途取消</strong></li>
<li>如果不设置回调函数（executor），Promise 内部抛出错误，不会反应到外部</li>
<li>当处于 Pending 状态时，无法得知目前进展到哪一个阶段</li>
</ul>
<p>如果某些事件不断地反复发生，一般来说，使用  <a href="https://nodejs.org/api/stream.html" target="_blank" rel="noopener noreferrer nofollow">Stream</a>  模式是比部署 Promise 更好的选择。</p>
<p>🌰 <strong>代码示例</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(
  <span class="hljs-comment">/* 执行器 */</span>
  <span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) {
    <span class="hljs-comment">// 异步处理</span>

    <span class="hljs-comment">// 数据处理完成后执行</span>
    <span class="hljs-title function_">resolve</span>();

    <span class="hljs-comment">// 数据处理出错时执行</span>
    <span class="hljs-title function_">reject</span>();
  }
).<span class="hljs-title function_">then</span>(
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">/* 成功，下一步 */</span>
  },
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">/* 失败，做相应处理 */</span>
  }
);
</code></pre>
<h2>工作流</h2>
<p>Promise 是一个代理对象（代理一个值），被代理的值在 Promise 对象创建时可能是未知的。它允许你为异步操作的 <strong>Fulfilled</strong> 和 <strong>Rejected</strong> 分别绑定相应的处理方法（handlers）。这让异步方法可以像同步方法那样返回值，但<strong>并不是立即返回</strong>最终执行结果，而是一个能代表<strong>未来出现</strong>的结果的 Promise 对象。</p>
<p>由于 <code>Promise.prototype.then</code> 和 <code>Promise.prototype.catch</code> 方法返回 Promise 对象，所以它们可以被 <a href="/front-end/core-modules/ecmascript-function-objects/function-types/cascade-function">链式调用</a>。</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/promise/workflow.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Promise Workflow&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{720}</span> /&gt;</span></span>;
</code></pre>
<h2>状态</h2>
<p>用 <code>new</code> 实例化的 Promise 对象有以下三种状态：</p>
<table>
<thead>
<tr>
<th style="text-align:left">状态</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Pending</td>
<td style="text-align:left">待定</td>
<td style="text-align:left">初始状态</td>
</tr>
<tr>
<td style="text-align:left">Fulfilled</td>
<td style="text-align:left">实现</td>
<td style="text-align:left">操作成功，此时会调用 <code>onFulfilled</code></td>
</tr>
<tr>
<td style="text-align:left">Rejected</td>
<td style="text-align:left">否决</td>
<td style="text-align:left">操作失败，此时会调用 <code>onRejected</code></td>
</tr>
</tbody>
</table>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/promise/state.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Promise State&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{720}</span> /&gt;</span></span>;
</code></pre>
<p>⚠️ <strong>注意</strong>：Promise 的状态，从 &lt;span style=&quot;font-weight:bold;color:red&quot;&gt;Pending&lt;/span&gt;转换为 &lt;span style=&quot;font-weight:bold;color:red&quot;&gt;Fulfilled&lt;/span&gt; 或 &lt;span style=&quot;font-weight:bold;color:red&quot;&gt;Rejected&lt;/span&gt; 之后，这个 Promise 对象的状态就不会发生任何变化。</p>
<p>而当 Promise 状态一旦发生变化，就会触发 <code>.then()</code> 里的响应函数处理后续步骤。</p>
<p>但是，<code>.then()</code> 参数中的函数只会调用其中一个，调用哪个取决于该 Promise 的状态。</p>
<p>另外，<strong>Fulfilled</strong> 和 <strong>Rejected</strong> 这两个中的任何一种状态都可以表示为 <strong>Settled（不变的）</strong>。</p>
<h2>静态方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/properties-of-the-promise-constructor/all">Promise.all(iterable)</a></td>
<td>将多个 Promise 实例包装成一个新的 Promise 实例。全部成员 Fulfilled 或某个成员 Rejected 时触发回调</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/properties-of-the-promise-constructor/race">Promise.race(iterable)</a></td>
<td>将多个 Promise 实例包装成一个新的 Promise 实例。某个成员状态变更后触发回调</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/properties-of-the-promise-constructor/reject">Promise.reject(reason)</a></td>
<td>返回新的 Promise 实例，该实例的状态为 Rejected</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/properties-of-the-promise-constructor/resolve">Promise.resolve(value)</a></td>
<td>返回新的 Promise 实例，该实例的状态为 Fulfilled</td>
</tr>
</tbody>
</table>
<h2>原型对象</h2>
<h3>属性</h3>
<table>
<thead>
<tr>
<th>原型属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Promise.prototype.constructor</code></td>
<td>返回被创建的实例函数，默认为 Promise 函数</td>
</tr>
</tbody>
</table>
<h3>方法</h3>
<table>
<thead>
<tr>
<th>原型方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/properties-of-the-promise-prototype-object/catch">Promise.prototype.catch(onRejected)</a></td>
<td>相当于 <code>.then(null, rejection)</code>，用于指定发生错误时的回调函数</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/properties-of-the-promise-prototype-object/then">Promise.prototype.then(onFulfilled, onRejected)</a></td>
<td>添加 <code>fulfillment</code> 和 <code>rejection</code> 回调到当前 Promise，返回一个新的 Promise，将以回调的返回值来 <code>resolve</code></td>
</tr>
<tr>
<td><code>Promise.prototype.finally(onFinally)</code></td>
<td>用于指定无论 Promise 对象最后状态如何，都会执行的操作</td>
</tr>
</tbody>
</table>
<h2>最佳实践</h2>
<h3>多任务串行</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Task</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">result, isSuccess = <span class="hljs-literal">true</span></span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span>
    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
        <span class="hljs-keyword">if</span> (isSuccess) {
          <span class="hljs-title function_">resolve</span>(result);
        } <span class="hljs-keyword">else</span> {
          <span class="hljs-title function_">reject</span>(result);
        }
      }, <span class="hljs-number">1000</span>);
    });
};

<span class="hljs-title function_">execute</span>([<span class="hljs-title class_">Task</span>(<span class="hljs-string">&#x27;A&#x27;</span>), <span class="hljs-title class_">Task</span>(<span class="hljs-string">&#x27;B&#x27;</span>), <span class="hljs-title class_">Task</span>(<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-literal">false</span>), <span class="hljs-title class_">Task</span>(<span class="hljs-string">&#x27;D&#x27;</span>)]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">resultList</span>) =&gt;</span> {
  <span class="hljs-comment">// do something</span>
});
</code></pre>
<p>注意事项：</p>
<ol>
<li>每个 Task 无论成功与否，都不能阻断下个 Task 的执行</li>
<li>最后的 <code>then</code> 需要把每个 Task 的执行结果 <code>决议</code> 出去</li>
</ol>
<p>实现思路：</p>
<ol>
<li>每个 Task 外层包装一层 Promise，捕获 Task 的 <code>rejected</code> 状态</li>
<li>可以利用中间变量，缓存所有 Task 的输出结果，然后在最后一个 Promise 的 <code>then</code> 里把中间变量 <code>决议</code> 出去</li>
</ol>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">execute</span>(<span class="hljs-params">tasks</span>) {
  <span class="hljs-keyword">return</span>;
  task.<span class="hljs-title function_">reduce</span>(
    <span class="hljs-function">(<span class="hljs-params">previousPromise, currentPromise</span>) =&gt;</span>
      previousPromise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">resultList</span>) =&gt;</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
          <span class="hljs-title function_">currentPromise</span>()
            .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> {
              <span class="hljs-title function_">resolve</span>(resultList.<span class="hljs-title function_">concat</span>(result));
            })
            .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> {
              <span class="hljs-title function_">resolve</span>(resultList.<span class="hljs-title function_">concat</span>(<span class="hljs-literal">null</span>));
            });
        });
      }),
    []
  );
}
</code></pre>
<h3>同步并发</h3>
<h3>异步并发</h3>
<h2>参考资料</h2>
<ul>
<li><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener noreferrer nofollow">📚 JavaScript Promise 迷你书</a></li>
<li><a href="https://juejin.im/post/5aa7868b6fb9a028dd4de672" target="_blank" rel="noopener noreferrer nofollow">📝 Promise 原理讲解(遵循 Promise/A+ 规范)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/90850451" target="_blank" rel="noopener noreferrer nofollow">📝 Promise 串行</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

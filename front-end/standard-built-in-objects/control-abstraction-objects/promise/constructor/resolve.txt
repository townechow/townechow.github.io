1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","standard-built-in-objects","control-abstraction-objects","promise","constructor","resolve"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/control-abstraction-objects/promise/constructor/resolve","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/control-abstraction-objects/promise/constructor/resolve","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","GbF1MyKH-aiTH1tbwALFW",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2003,<h1>Promise.resolve</h1>
<p><code>Promise.resolve()</code> 方法返回一个以给定值解析后的 Promise 对象。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(value);
</code></pre>
<p>类型声明：</p>
<pre class="hljs"><code class="language-ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PromiseConstructor</span> {
  <span class="hljs-title function_">resolve</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt;;

  resolve&lt;T&gt;(<span class="hljs-attr">value</span>: T | <span class="hljs-title class_">PromiseLike</span>&lt;T&gt;): <span class="hljs-title class_">Promise</span>&lt;T&gt;;
}
</code></pre>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">value</td>
<td style="text-align:left">见下方</td>
<td style="text-align:left">any</td>
</tr>
</tbody>
</table>
<p>根据传入参数的不同，会有不同的响应效果。</p>
<ul>
<li><strong>Promise 实例</strong>：返回传入的 Promise 实例</li>
<li><strong>Thenable 对象</strong>：将该 Thenable 对象转化为 Promise 对象，然后立即执行 <code>.then()</code> 方法</li>
<li><strong>非 Thenable 对象</strong>：返回新的 Fulfilled 状态的 Promise 实例</li>
<li><strong>不带参数</strong>：返回新的 Fulfilled 状态的 Promise 实例</li>
</ul>
<h3>Promise 实例</h3>
<p>如果参数是 Promise 实例，那么 <code>Promise.resolve</code> 将不做任何修改、原封不动地返回这个实例。</p>
<h3>Thenable 对象</h3>
<p><code>thenable</code> 对象指的是具有 <code>then</code> 方法的对象，比如下面这个对象。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> thenable = {
  <span class="hljs-attr">then</span>: <span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">100</span>),
};
</code></pre>
<p><code>Promise.resolve</code> 方法会将这个对象转为 Promise 对象，然后就立即执行 <code>thenable</code> 对象的 <code>.then()</code> 方法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> thenable = {
  <span class="hljs-attr">then</span>: <span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">100</span>),
};

<span class="hljs-keyword">let</span> promise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(thenable);

promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)); <span class="hljs-comment">// 100</span>
</code></pre>
<p>上述代码中，当 <code>thenable</code> 对象的 <code>then</code> 方法执行后，对象 <code>promise</code> 的状态就变为 Fulfilled，从而立即执行最后那个 <code>.then()</code> 方法指定的回调函数。</p>
<h3>非 Thenable 对象</h3>
<p>如果参数是一个原始值，或者是一个不具有 <code>then</code> 方法的对象，则 <code>Promise.resolve</code> 方法返回一个新的 Promise 对象，状态为 Fulfilled。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> promise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);

promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v));
<span class="hljs-comment">// &#x27;Hello&#x27;</span>
</code></pre>
<p>由于传入 <code>Promise.resolve</code> 方法的参数非具有 <code>then</code> 方法的对象，因此判断该参数不属于异步操作，返回状态为 Resolve 的 Promise 实例，并且立即执行回调函数。<code>Promise.resolve</code> 方法的参数，会同时传给回调函数。</p>
<h3>不带参数</h3>
<p><code>Promise.resolve</code> 方法允许调用时不带参数，直接返回一个 Fulfilled 状态的 Promise 对象。</p>
<p>如果希望得到一个 Promise 对象，比较方便的方法就是直接调用 <code>Promise.resolve</code> 方法。</p>
<p>需要注意的是，状态为 Fulfilled 的 Promise 对象，是在本轮 <a href="/front-end/core-modules/executable-code-and-execution-contexts/concurrency-model/event-loop">事件循环</a>（Event Loop）的结束时，而不是在下一轮事件循环的开始时。</p>
<h2>代码示例</h2>
<h3>基本用法</h3>
<p><code>Promise.resolve(value)</code> 可以认为是 <code>new Promise()</code> 的快捷方式。返回的 Promise 对象将立即进入 Fulfilled 状态。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Fulfilled&#x27;</span>).<span class="hljs-title function_">then</span>(
  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res); <span class="hljs-comment">// &#x27;Fulfilled&#x27;</span>
  },
  <span class="hljs-function">(<span class="hljs-params">rej</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rej); <span class="hljs-comment">// 不会调用</span>
  }
);
</code></pre>
<h3>数组作参数</h3>
<p>如果传入的参数为数组，则参数为非 Thenable 对象，会返回新的 Fulfilled 状态的 Promise 实例。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> promise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);

promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 0</span>
});
</code></pre>
<h3>Promise 作为参数</h3>
<p>如果传入的参数为 Promise 的实例对象，那么会直接返回该 Promise 的实力对象。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);

<span class="hljs-keyword">const</span> bar = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(foo);

bar.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);
  <span class="hljs-comment">// 2. 输出: &#x27;foo&#x27;</span>
});

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo === bar);
<span class="hljs-comment">// 1. 输出: true</span>

<span class="hljs-comment">// 这里有同步异步先后执行的区别</span>
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.es2015.promise.d.ts" target="_blank" rel="noopener noreferrer nofollow">TypeScript - lib.es2015.promise.d.ts</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

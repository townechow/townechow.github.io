1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","standard-built-in-objects","control-abstraction-objects","promise","constructor","all-settled"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/control-abstraction-objects/promise/constructor/all-settled","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/control-abstraction-objects/promise/constructor/all-settled","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","sBTnona3sH3ddT5votI4A",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T28a7,<h1>Promise.allSettled</h1>
<p>⭐️ <code>ES2020(ES11)新特性</code></p>
<p><code>Promise.allSettled</code> 方法返回一个在所有给定的 Promise 都已经 <code>fullfilled</code> 或 <code>rejected</code> 后的 Promise，并带有一个对象数组，每个对象表示对应的 Promise 结果。</p>
<p>当您有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个 Promise 的结果时，通常使用它。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>(iterable);
</code></pre>
<p>类型声明：</p>
<pre class="hljs"><code class="language-ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PromiseFulfilledResult</span>&lt;T&gt; {
  <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;fulfilled&#x27;</span>;
  <span class="hljs-attr">value</span>: T;
}

<span class="hljs-keyword">interface</span> <span class="hljs-title class_">PromiseRejectedResult</span> {
  <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;rejected&#x27;</span>;
  <span class="hljs-attr">reason</span>: <span class="hljs-built_in">any</span>;
}

<span class="hljs-keyword">type</span> <span class="hljs-title class_">PromiseSettledResult</span>&lt;T&gt; = <span class="hljs-title class_">PromiseFulfilledResult</span>&lt;T&gt; | <span class="hljs-title class_">PromiseRejectedResult</span>;

<span class="hljs-keyword">interface</span> <span class="hljs-title class_">PromiseConstructor</span> {
  allSettled&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">unknown</span>[] | <span class="hljs-keyword">readonly</span> [<span class="hljs-built_in">unknown</span>]&gt;(
    <span class="hljs-attr">values</span>: T
  ): <span class="hljs-title class_">Promise</span>&lt;
    { -<span class="hljs-keyword">readonly</span> [P <span class="hljs-keyword">in</span> keyof T]: <span class="hljs-title class_">PromiseSettledResult</span>&lt;T[P] <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PromiseLike</span>&lt;infer U&gt; ? U : T[P]&gt; }
  &gt;;

  allSettled&lt;T&gt;(
    <span class="hljs-attr">values</span>: <span class="hljs-title class_">Iterable</span>&lt;T&gt;
  ): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">PromiseSettledResult</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PromiseLike</span>&lt;infer U&gt; ? U : T&gt;[]&gt;;
}
</code></pre>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">iterable</td>
<td style="text-align:left">见下方</td>
<td style="text-align:left">any</td>
</tr>
</tbody>
</table>
<p>根据传入参数的不同，会有不同的响应效果：</p>
<ul>
<li>空的具备 Iterator 接口的对象，返回状态为 Fulfilled 的 Promise</li>
<li>不包含任何 Promise，返回异步完成的 Promise</li>
<li>其他情况，返回状态为 Pending 的 Promise</li>
</ul>
<p>&lt;br /&gt;</p>
<ul>
<li>参数 <code>iterable</code> 必须具备 <a href="/front-end/standard-built-in-objects/control-abstraction-objects/iterator-objects/iterator">Iterator</a> 接口，且每个成员都是 Promise 实例</li>
<li>如果 <code>iterable</code> 内每个成员都不是 Promise 实例，会先调用 <a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/constructor/resolve">Promise.resolve</a> 将每个成员转化为 Promise 实例，再进一步处理</li>
</ul>
<h2>方法描述</h2>
<p>对于 <code>Promise.allSettled</code> 执行集合中的每个 Promise 都已经完成后，无论时成功（<code>fulfiiled</code>）或是拒绝（<code>rejected</code>），未决议的 Promise 将被异步完成。那时，所返回的 Promise 的处理器将传入一个数组作为输入，该数组包含原始 Promise 集合中每个 Promise 的结果。</p>
<p>对于每个结果对象，都有一个 <code>status</code> 字段。</p>
<ul>
<li>如果值为 <code>fulfilled</code>，则结果对象上存在一个 <code>value</code></li>
<li>如果值为 <code>rejected</code>，则存在一个 <code>reason</code></li>
</ul>
<p><code>value</code> 和 <code>reason</code> 分别反映了每个 Promise 决议（或拒绝）的值。</p>
<h2>代码示例</h2>
<p>应用场景：</p>
<ul>
<li>同时上传多张图片，实现异步并发（例如使用阿里云 OSS 同时批量上传多张图片）</li>
</ul>
<h3>基本用法</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>);
<span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(reject, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;foo&#x27;</span>));
<span class="hljs-keyword">const</span> promises = [promise1, promise2];

<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>(promises).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">results</span>) =&gt;</span>
  results.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">status</span>))
);

<span class="hljs-comment">// 结果：</span>
<span class="hljs-comment">// fulfilled</span>
<span class="hljs-comment">// rejected</span>
</code></pre>
<h3>异步并发</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> files = [{ <span class="hljs-attr">file</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>() }, { <span class="hljs-attr">file</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>() }];
<span class="hljs-keyword">const</span> ossConfig = {
  <span class="hljs-attr">accessKeyId</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,
  <span class="hljs-attr">accessKeySecret</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,
  <span class="hljs-attr">stsToken</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,
  <span class="hljs-attr">bucket</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,
  <span class="hljs-attr">region</span>: xxx<span class="hljs-string">&#x27;&#x27;</span>,
};

<span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadFile</span>(<span class="hljs-params">file</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    <span class="hljs-keyword">try</span> {
      <span class="hljs-keyword">const</span> filePath = <span class="hljs-title function_">genPath</span>(<span class="hljs-string">&#x27;&#x27;</span>);
      <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title function_">OSS</span>(ossConfig);
      client.<span class="hljs-title function_">put</span>(filePath, file).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> {
        <span class="hljs-keyword">if</span> (res?.<span class="hljs-property">res</span>?.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) {
          <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">url</span>);
        } <span class="hljs-keyword">else</span> {
          <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;上传失败&#x27;</span>);
        }
      });
    } <span class="hljs-keyword">catch</span> (err) {
      <span class="hljs-title function_">reject</span>(err);
    }
  });
}

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadFiles</span>(<span class="hljs-params">files</span>) {
  <span class="hljs-keyword">const</span> promises = [],
    urls = [];

  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> files) {
      <span class="hljs-keyword">const</span> promise = <span class="hljs-title function_">uploadFile</span>(item.<span class="hljs-property">file</span>);

      promises.<span class="hljs-title function_">push</span>(promise);
    }

    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>(promises);

    urls = result.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> {
      <span class="hljs-keyword">if</span> (item.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) {
        acc.<span class="hljs-title function_">push</span>({ <span class="hljs-attr">url</span>: item.<span class="hljs-property">value</span> });
      }

      <span class="hljs-keyword">return</span> acc;
    }, []);
  } <span class="hljs-keyword">catch</span> (err) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);
  }

  <span class="hljs-keyword">return</span> urls;
}
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://tc39.es/proposal-promise-allSettled/" target="_blank" rel="noopener noreferrer nofollow">ECMAScript(ECMA-262)：The definition of Promise.allSettled in taht specification</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

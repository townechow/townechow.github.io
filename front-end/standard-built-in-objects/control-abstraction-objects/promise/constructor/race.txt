1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","standard-built-in-objects","control-abstraction-objects","promise","constructor","race"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/control-abstraction-objects/promise/constructor/race","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/control-abstraction-objects/promise/constructor/race","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","7_oWUHE3eMdRmGOo1lQYa",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T19b3,<h1>Promise.race</h1>
<p><code>Promise.race</code> 接收一个可迭代对象作为参数，当某个成员 Promise 状态变更后（无论是 Fulfilled 状态还是 Rejected 状态），立即调用指定的函数。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>(iterator);
</code></pre>
<p>类型声明：</p>
<pre class="hljs language-ts"  style=--lang:"ts" ><code><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PromiseConstructor</span> {
  race&lt;T&gt;(<span class="hljs-attr">values</span>: <span class="hljs-keyword">readonly</span> T[]): <span class="hljs-title class_">Promse</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PromiseLike</span>&lt;infer U&gt; ? U : T&gt;;
}

<span class="hljs-keyword">interface</span> <span class="hljs-title class_">PromiseLike</span>&lt;T&gt; {
  then&lt;<span class="hljs-title class_">TResult1</span> = T, <span class="hljs-title class_">TResult2</span> = <span class="hljs-built_in">never</span>&gt;(
    <span class="hljs-attr">onfulfilled</span>?: (<span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">value</span>: T</span>) =&gt;</span> <span class="hljs-title class_">TResult1</span> | <span class="hljs-title class_">PromiseLike</span>&lt;<span class="hljs-title class_">TResult1</span>&gt;) | <span class="hljs-literal">undefined</span> | <span class="hljs-literal">null</span>,
    <span class="hljs-attr">onrejected</span>?: (<span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">reason</span>: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-title class_">TResult2</span> | <span class="hljs-title class_">PromiseLike</span>&lt;<span class="hljs-title class_">TResult2</span>&gt;) | <span class="hljs-literal">undefined</span> | <span class="hljs-literal">null</span>
  ): <span class="hljs-title class_">PromiseLike</span>&lt;<span class="hljs-title class_">TResult1</span> | <span class="hljs-title class_">TResult2</span>&gt;;
}
</code></pre>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">iterator</td>
<td style="text-align:left">可迭代对象，例如数组</td>
<td style="text-align:left">Iterator</td>
</tr>
</tbody>
</table>
<p>&lt;br /&gt;</p>
<ul>
<li>与 <a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/constructor/all">Promise.all</a> 相似，<code>Promise.race</code> 的 <code>iterator</code> 参数必须是 <a href="/front-end/standard-built-in-objects/control-abstraction-objects/iterator-objects/iterator">Iterator</a></li>
<li>只要参数 <code>iterator</code> 的其中某个 Promise 实例成员的状态变更，那么 <code>Promise.race</code> 会立即返回一个新创建的 Promise 实例，并将返回值传递给回调函数</li>
<li><code>Promise.race</code> 方法的参数与 <code>Promise.all</code> 方法一样，如果不是 Promise 实例，就会先调用 <a href="/front-end/standard-built-in-objects/control-abstraction-objects/promise/constructor/resolve">Promise.resolve</a> 方法，将参数转为 Promise 实例，再进一步处理。</li>
</ul>
<h2>代码示例</h2>
<pre class="hljs language-ts"  style=--lang:"ts" ><code><span class="hljs-keyword">const</span> getPromise = (<span class="hljs-attr">value</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">delay</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">fail</span>: <span class="hljs-built_in">boolean</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">number</span>&gt; =&gt; {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> (fail ? <span class="hljs-title function_">reject</span>(value) : <span class="hljs-title function_">resolve</span>(value)), delay);
  });
};

<span class="hljs-keyword">const</span> fastestPromise = <span class="hljs-title class_">Promise</span>.<span class="hljs-property">race</span>&lt;<span class="hljs-built_in">number</span>&gt;([
  <span class="hljs-title function_">getPromise</span>(<span class="hljs-number">0</span>, <span class="hljs-number">500</span>, <span class="hljs-literal">false</span>), <span class="hljs-comment">// 0.5s</span>
  <span class="hljs-title function_">getPromise</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2000</span>, <span class="hljs-literal">false</span>), <span class="hljs-comment">// 2s</span>
  <span class="hljs-title function_">getPromise</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1000</span>, <span class="hljs-literal">true</span>), <span class="hljs-comment">// 1s (rejects)</span>
]);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;settled-in&#x27;</span>);

fastestPromise
  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Fulfilled:&#x27;</span>, value);
  })
  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Rejected:&#x27;</span>, err);
  })
  .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;settled-in&#x27;</span>);
  });
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.es2015.promise.d.ts" target="_blank" rel="noopener noreferrer nofollow">TypeScript - lib.es2015.promise.d.ts</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","standard-built-in-objects","keyed-collections","set","set"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/keyed-collections/set/set","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/keyed-collections/set/set","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","q_1yXSltkHguQ3HesJhK0",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T44cc,<h1>Set</h1>
<p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([iterable]);
</code></pre>
<h3>参数</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>iterable</code></td>
<td>如果传递一个可迭代对象，它的所有元素将被添加到新的 Set 中。如果不指定此参数或其值为 <code>null</code>，则新的 Set 为空。</td>
</tr>
</tbody>
</table>
<h3>描述</h3>
<p>向 Set 加入值时不会发生类型转换，所以 <code>5</code> 和 <code>'5'</code> 是两个不同的值。Set 内部判断两个值是否相同时使用的算法叫做 <strong>Same-value equality</strong>，它类似于精准相等运算符（<code>===</code>），主要的区别是 <code>NaN</code> 等于自身，而精准相等运算符认为 <code>NaN</code> 不等于自身。</p>
<h2>原型对象</h2>
<h3>属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Set.prototype.constructor</code></td>
<td>构造函数，默认是 <code>Set</code> 函数。</td>
</tr>
<tr>
<td><code>Set.prototype.size</code></td>
<td>返回 <code>Set</code> 实例的成员总数</td>
</tr>
</tbody>
</table>
<h3>方法</h3>
<p><code>Set</code> 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。</p>
<h4>操作方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Set.prototype.add(value)</code></td>
<td>用来向一个 Set 对象的末尾添加一个指定的值。</td>
</tr>
<tr>
<td><code>Set.prototype.delete(value)</code></td>
<td>可以从一个 Set 对象中删除指定的元素。</td>
</tr>
<tr>
<td><code>Set.prototype.has(value)</code></td>
<td>返回一个布尔值来指示对应的值 <code>value</code> 是否存在 Set 对象中。</td>
</tr>
<tr>
<td><code>Set.prototype.clear()</code></td>
<td>清空一个 Set 对象中的所有元素。</td>
</tr>
</tbody>
</table>
<h4>遍历方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Set.prototype.keys()</code></td>
<td>与 <code>values()</code> 方法相同，返回一个新的迭代器对象，该对象包含 Set 对象中的按插入顺序排列的所有元素的值。</td>
</tr>
<tr>
<td><code>Set.prototype.values()</code></td>
<td>返回一个 Iterator 对象，这个对象以插入 Set 对象的顺序包含了原 Set 对象里的每个元素。</td>
</tr>
<tr>
<td><code>Set.prototype.entries()</code></td>
<td>返回一个新的迭代器对象，这个对象的元素是类似 <code>[value, value]</code> 形式的数组，<code>value</code> 是集合对象爱你个中的每个元素，迭代器对象元素的顺序即集合对象爱你个中元素插入的顺序。由于集合对象不像 Map 对象那样拥有 <code>key</code> ，然而，为了与 Map 对象的 API 形式保持一致，故使得每一个 <code>entry</code> 的 <code>key</code> 和 <code>value</code> 都拥有相同的值，因而最终返回一个 <code>[value, value]</code> 形式的数组。</td>
</tr>
<tr>
<td><code>Set.prototype.forEach()</code></td>
<td>根据集合中元素的顺序，对每个元素都执行提供的回调函数一次。</td>
</tr>
</tbody>
</table>
<p>需要特别指出的是，Set 的遍历顺序就是<strong>插入顺序</strong>。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p>
<p><code>keys</code> 方法、<code>values</code> 方法、<code>entries</code> 方法返回的都是遍历器对象爱你个。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以 <code>keys</code> 方法和 <code>values</code> 方法的行为完全一致。</p>
<h5><code>Set.prototype.keys()</code></h5>
<p>用于获取 Set 对象中的按插入顺序排列的所有元素的值。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>]);

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">keys</span>()) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);
}
<span class="hljs-comment">// Output: &#x27;x&#x27;</span>
<span class="hljs-comment">// Output: &#x27;y&#x27;</span>
<span class="hljs-comment">// Output: &#x27;z&#x27;</span>
</code></pre>
<h4><code>Set.prototype.values()</code></h4>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>]);

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">values</span>()) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);
}
<span class="hljs-comment">// Output: &#x27;x&#x27;</span>
<span class="hljs-comment">// Output: &#x27;y&#x27;</span>
<span class="hljs-comment">// Output: &#x27;z&#x27;</span>
</code></pre>
<h4><code>Set.prototype.entries()</code></h4>
<p><code>entries</code> 方法返回的遍历器同时包括键名和键值，所以每次输出一个数据，其两个成员完全相等。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>]);

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">entries</span>()) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);
}
<span class="hljs-comment">// Output: [&quot;x&quot;, &quot;x&quot;]</span>
<span class="hljs-comment">// Output: [&quot;y&quot;, &quot;y&quot;]</span>
<span class="hljs-comment">// Output: [&quot;z&quot;, &quot;z&quot;]</span>
</code></pre>
<p>Set 结构的实例默认可遍历，其默认遍历器生成函数就是它的 <code>values</code> 方法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Set</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] === <span class="hljs-title class_">Set</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">values</span>); <span class="hljs-comment">// Output: true</span>
</code></pre>
<p>这意味着，可以省略 <code>values</code> 方法，直接用 <code>for...of</code> 循环遍历 <code>Set</code>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>]);

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> set) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);
}
<span class="hljs-comment">// Output: &#x27;x&#x27;</span>
<span class="hljs-comment">// Output: &#x27;y&#x27;</span>
<span class="hljs-comment">// Output: &#x27;z&#x27;</span>
</code></pre>
<h4><code>Set.prototype.forEach()</code></h4>
<p>Set 结构实例的 <code>forEach</code> 方法用于对每个成员执行某种操作，没有返回值。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);

set.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value * <span class="hljs-number">2</span>));
<span class="hljs-comment">// Output: 2</span>
<span class="hljs-comment">// Output: 4</span>
<span class="hljs-comment">// Output: 6</span>
</code></pre>
<p>上面代码说明，<code>forEach</code> 方法的参数就是一个处理函数。该函数的参数依次为键值、键名、集合本身（上例省略了该参数）。另外，<code>forEach</code> 方法还可以有第二个参数，表示绑定的 <code>this</code> 对象。</p>
<h2>示例</h2>
<h3>基本用法</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();

[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> s.<span class="hljs-title function_">add</span>(x));

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);
}
<span class="hljs-comment">// Output: 2 3 5 4</span>
</code></pre>
<h3>内部判断机制</h3>
<p><strong>NaN 相等</strong></p>
<p>下面的代码向 <code>Set</code> 实例添加了两个 <code>NaN</code> ，但是实际上只能添加一个。这表明，在 <code>Set</code> 内部，两个 <code>NaN</code> 是相等的。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();

<span class="hljs-keyword">let</span> a = <span class="hljs-title class_">NaN</span>;
<span class="hljs-keyword">let</span> b = <span class="hljs-title class_">NaN</span>;

set.<span class="hljs-title function_">add</span>(a);
set.<span class="hljs-title function_">add</span>(b);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set); <span class="hljs-comment">// Output: Set{NaN}</span>
</code></pre>
<p><strong>对象不相等</strong></p>
<p>下面的代码表示，由于两个空对象不是精准相等，所以它们被视为两个值。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();

set.<span class="hljs-title function_">add</span>({});
set.<span class="hljs-property">size</span>; <span class="hljs-comment">// Output: 1</span>

set.<span class="hljs-title function_">add</span>({});
set.<span class="hljs-property">size</span>; <span class="hljs-comment">// Output: 2</span>
</code></pre>
<h3>数组类型转换</h3>
<p><code>Array.from</code> 方法可以将 Set 结构转为数组。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);
<span class="hljs-keyword">const</span> array = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(items);
</code></pre>
<h3>数组去重</h3>
<p>这就提供了一种去除数组重复元素的方法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">dedupe</span> = array =&gt; <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array));

<span class="hljs-title function_">dedupe</span>([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">// [1, 2, 3]</span>
</code></pre>
<h3>扩展运算的应用</h3>
<p>扩展运算符 <code>...</code> 内部使用 <code>for...of</code> 循环，所以也可以用于 <code>Set</code> 结构。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]);

<span class="hljs-keyword">let</span> arr = [...set];

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// Output: [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span>
</code></pre>
<h3>并集、交集和差集的实现</h3>
<p>使用 Set 可以很容易地实现并集（Union）、交集（Interest）和差集（Difference）。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);
<span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]);

<span class="hljs-comment">// 并集</span>
<span class="hljs-keyword">let</span> union = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...a, ...b]);
<span class="hljs-comment">// Set {1, 2, 3, 4}</span>

<span class="hljs-comment">// 交集</span>
<span class="hljs-keyword">let</span> interest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...a].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> b.<span class="hljs-title function_">has</span>(x)));
<span class="hljs-comment">// Set {2, 3}</span>

<span class="hljs-comment">// 差集</span>
<span class="hljs-keyword">let</span> difference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...a].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> !b.<span class="hljs-title function_">has</span>(x)));
<span class="hljs-comment">// Set {1}</span>
</code></pre>
<h3>结构变动</h3>
<p>如果想在遍历操作中同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用 <code>Array.from</code> 方法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// Method A</span>
<span class="hljs-keyword">let</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);
s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...set].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> val * <span class="hljs-number">2</span>));

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set); <span class="hljs-comment">// Output: 2, 4, 6</span>

<span class="hljs-comment">// Method B</span>
<span class="hljs-keyword">let</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);
s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(set, <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> val * <span class="hljs-number">2</span>));

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s2);
<span class="hljs-comment">// Output: 2, 4, 6</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Set"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","standard-built-in-objects","fundamental-objects","function","bind"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/fundamental-objects/function/bind","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/fundamental-objects/function/bind","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","xYgW99pUaJVw0d5XSt2VS",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2f71,<h1>Function.prototype.bind</h1>
<p><code>Function.prototype.bind</code> 方法创建一个新函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs"><code class="language-ts"><span class="hljs-title function_">bind</span>(<span class="hljs-attr">thisArg</span>: <span class="hljs-built_in">any</span>, ...<span class="hljs-attr">argArray</span>: <span class="hljs-built_in">any</span>[]): <span class="hljs-built_in">any</span>;
</code></pre>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">thisArg</td>
<td style="text-align:left">可选参数。调用函数时指向的 <code>this</code> 指针。</td>
<td style="text-align:left">/</td>
</tr>
<tr>
<td style="text-align:left">arg1,arg2,...</td>
<td style="text-align:left">可选参数。当目标函数被调用时，被预置入绑定函数的参数列表中的参数。</td>
<td style="text-align:left">any</td>
</tr>
</tbody>
</table>
<h2>描述</h2>
<p><code>Function.prototype.bind</code> 函数会创建一个新 <strong>绑定函数</strong>（Bound Function，BF）。绑定函数是一个 Exotic Function Object（怪异函数对象，ECMAScript 2015 中的术语），它包装了原函数对象。调用绑定函数通常会导致执行 <strong>包装函数</strong>。</p>
<p>绑定函数具有以下内部属性：</p>
<ul>
<li><code>[[BoundTargetFunction]]</code>：包装的函数对象</li>
<li><code>[[BoundThis]]</code>：在调用包装函数时始终作为 <code>this</code> 值传递的值。</li>
<li><code>[[BoundArguments]]</code>：列表，在对包装函数做任何调用都会优先用列表元素填充参数列表。</li>
<li><code>[[Call]]</code>：执行与此对象关联的代码。通过函数调用表达式调用。内部方法的参数是一个 <code>this</code> 值和一个包含通过调用表达式传递给函数的参数的列表。</li>
</ul>
<p>当调用绑定函数时，它调用 <code>[[BoundTargetFunction]]</code> 上的内部方法 <code>[[Call]]</code>，就像这样 <code>Call(boundThis, args)</code>。其中，<code>boundThis</code> 是 <code>[[BoundThis]]</code>，<code>args</code> 是 <code>[[BoundArguments]]</code> 加上通过函数调用传入的参数列表。</p>
<p>绑定函数也可以使用 <code>new</code> 运算符构造，它会表现为目标函数已经被构建完毕。提供的 <code>this</code> 值会被忽略，但前置参数仍会提供给模拟函数。</p>
<h2>示例</h2>
<h3>创建绑定函数</h3>
<p><code>Function.prototype.bind()</code> 最简单的用法是创建一个函数，不论怎么调用，这个函数都有同样的 <code>this</code> 引用。JavaScript 新手经常犯的一个错误是将一个方法从对象中拿出来，然后再调用，期望方法中的 <code>this</code> 是原来的对象（比如在回调中传入这个方法）。如果不做特殊处理的话，一般会丢失原来的对象。基于这个函数，用原始的对象创建一个绑定函数，巧妙地解决了这个问题。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-string">&#x27;100&#x27;</span>;

<span class="hljs-keyword">const</span> foo = {
  <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;99&#x27;</span>,
  <span class="hljs-attr">getA</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>;
  },
};

foo.<span class="hljs-title function_">getA</span>();
<span class="hljs-comment">// &#x27;99&#x27;</span>

<span class="hljs-keyword">const</span> retrieveA = foo.<span class="hljs-property">getA</span>;

<span class="hljs-title function_">retrieveA</span>();
<span class="hljs-comment">// &#x27;100&#x27;</span>

<span class="hljs-keyword">const</span> boundGetA = retrieveA.<span class="hljs-title function_">bind</span>(foo);

<span class="hljs-title function_">boundGetA</span>();
<span class="hljs-comment">// &#x27;99&#x27;</span>
</code></pre>
<h3>偏函数</h3>
<p><code>Function.prototype.bind()</code> 方法的另一个最简单的用法是使一个函数拥有预设的初始参数。只要将这些参数（如果有的话）作为 <code>bind()</code> 的参数写在 <code>this</code> 后面。当绑定函数被调用时，这些参数会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们后面。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e, f</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c, d, e, f);
};

<span class="hljs-comment">// 预设三个参数 1 2 3 -&gt; 对应 foo 参数 a b c</span>
<span class="hljs-keyword">const</span> bar = foo.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);

<span class="hljs-title function_">bar</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);
<span class="hljs-comment">// 1 2 3 4 5 6</span>
</code></pre>
<h3>配合定时器</h3>
<p>默认情况下，使用 <a href="/browser-object-model/the-window-object/timers/setTimeOut">window.setTimeout</a> 时，<code>this</code> 关键字会指向 Window 对象。当类的方法中需要 <code>this</code> 指向类的实例时，你可能需要显式地把 <code>this</code> 绑定到回调函数，就不会丢失该实例的引用。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">LaterBloomer</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">petalCount</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">12</span>) + <span class="hljs-number">1</span>;
}

<span class="hljs-title class_">LaterBloomer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bloom</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">declare</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">1000</span>);
};

<span class="hljs-title class_">LateBloomer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">declare</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I am a beautiful flower with &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">petalCount</span> + <span class="hljs-string">&#x27; petals!&#x27;</span>);
};

<span class="hljs-keyword">const</span> flower = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LateBloomer</span>();

flower.<span class="hljs-title function_">bloom</span>();
</code></pre>
<h2>兼容实现</h2>
<p>关键点：</p>
<ul>
<li>创建新函数</li>
<li><code>bind</code> 被调用时，新函数的 <code>this</code> 被 <code>bind</code> 的第一个参数指定</li>
</ul>
<p>实现步骤：</p>
<ol>
<li>确保调用 <code>call</code> 方法的调用方为 <code>function</code> 类型</li>
<li>参数：使用 <code>Array.prototype.slice.call</code> 将 <code>context</code> 参数去除 ❗️（重点）</li>
<li>当前执行上下文：就是调用 <code>bind</code> 的函数 <code>this</code></li>
<li>创建返回的新函数
<ul>
<li>调用方是 <code>bind</code> 函数的执行上下文 <code>currentContext</code></li>
<li>使用 <code>apply</code> 实现</li>
<li>执行方看调用新函数的所在上下文是否是新函数的实例，是则 <code>this</code> 否则 <code>context</code></li>
<li>参数是 <code>bind</code> 的参数与新函数参数的合并</li>
</ul>
</li>
<li>处理原型链</li>
<li>返回新函数</li>
</ol>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) {
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;当前调用 call 方法的不是函数.&#x27;</span>);
  }

  <span class="hljs-comment">// 参数要拼接</span>
  <span class="hljs-keyword">const</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>);

  <span class="hljs-keyword">const</span> currentContext = <span class="hljs-variable language_">this</span>;

  <span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> currentContext.<span class="hljs-title function_">apply</span>(
      <span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> fn ? <span class="hljs-variable language_">this</span> : context,
      args.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>))
    );
  };

  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OP</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {};

  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) {
    <span class="hljs-variable constant_">OP</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;
  }

  <span class="hljs-comment">// 将 fn.prototype 是 OP 的实例，因此返回 fn 若作为 new 的构造函数</span>
  <span class="hljs-comment">// new 生成的新对象作为 this 传入 fn，新对象的 __proto__ 就是 OP 的实例</span>
  fn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">OP</span>();

  <span class="hljs-keyword">return</span> fn;
};
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Function.prototype.bind"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

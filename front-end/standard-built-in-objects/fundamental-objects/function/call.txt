1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","standard-built-in-objects","fundamental-objects","function","call"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/fundamental-objects/function/call","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/fundamental-objects/function/call","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","-VYmNlIJeGKamK2omMhpe",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1afe,<h1>Function.prototype.call</h1>
<p><code>Function.prototype.call</code> 方法用于指定函数调用指向的 <code>this</code> 指针，并分别提供参数作为指定函数的参数。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs"><code class="language-ts"><span class="hljs-title function_">call</span>(<span class="hljs-attr">thisArg</span>: <span class="hljs-built_in">any</span>, ...<span class="hljs-attr">argArray</span>: <span class="hljs-built_in">any</span>[]): <span class="hljs-built_in">any</span>;
</code></pre>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">thisArg</td>
<td style="text-align:left">可选参数。调用函数时指向的 <code>this</code> 指针。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">args</td>
<td style="text-align:left">可选参数。调用函数参数列表。</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2>示例</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Product</span>(<span class="hljs-params">name, price</span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Food</span>(<span class="hljs-params">name, price</span>) {
  <span class="hljs-title class_">Product</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name, price);
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">category</span> = <span class="hljs-string">&#x27;food&#x27;</span>;
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Toy</span>(<span class="hljs-params">name, price</span>) {
  <span class="hljs-title class_">Product</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name, price);
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">category</span> = <span class="hljs-string">&#x27;toy&#x27;</span>;
}

<span class="hljs-keyword">const</span> cheese = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Food</span>(<span class="hljs-string">&#x27;cheese&#x27;</span>, <span class="hljs-number">5</span>);
<span class="hljs-keyword">const</span> robot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Toy</span>(<span class="hljs-string">&#x27;robot&#x27;</span>, <span class="hljs-number">40</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cheese);
<span class="hljs-comment">// {</span>
<span class="hljs-comment">//   category: &quot;food&quot;,</span>
<span class="hljs-comment">//   name: &quot;cheese&quot;,</span>
<span class="hljs-comment">//   price: 5,</span>
<span class="hljs-comment">// }</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(robot);
<span class="hljs-comment">// {</span>
<span class="hljs-comment">//   category: &quot;toy&quot;,</span>
<span class="hljs-comment">//   name: &quot;robot&quot;,</span>
<span class="hljs-comment">//   price: 40,</span>
<span class="hljs-comment">// }</span>
</code></pre>
<h2>兼容实现</h2>
<p>实现步骤：</p>
<ol>
<li>确保调用 <code>call</code> 方法的调用方为 <code>function</code> 类型</li>
<li>参数：将参数数组转化为数组形式 ❗️（重点）</li>
<li>执行上下文：确保 <code>context</code> 执行上下文，用 <code>window</code> 全局变量兜底</li>
<li>将 <code>this</code>（调用方函数）赋值到执行上下文上，用 <code>Symbol</code> 创建属性键名以防冲突</li>
<li>执行调用方函数，并保存调用结果 ❗️（重点）</li>
<li>删除调用方（执行上下文）的键值对</li>
<li>返回结果</li>
</ol>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">call</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) {
  <span class="hljs-comment">// context 是调用 call 的时候参数中的第一个参数</span>

  <span class="hljs-comment">// 先判断当前的调用方是不是一个函数</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-variable language_">this</span>}</span>.call is not a function.`</span>);
  }

  <span class="hljs-comment">// 保存调用方给的参数</span>
  <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);

  <span class="hljs-comment">// 确定执行方的类型，因为可以传 null 和 undefined</span>
  context = context || <span class="hljs-variable language_">window</span>;

  <span class="hljs-comment">// 将调用方的内容保存为执行方的一个属性，为了保证不与执行方中的 key 键名重复</span>
  <span class="hljs-keyword">const</span> fn = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;fn&#x27;</span>);

  context[fn] = <span class="hljs-variable language_">this</span>;

  <span class="hljs-comment">// 执行保存的函数，这个时候作用域就是在调用方的对象的作用域下执行，改变 this 的指向</span>
  <span class="hljs-keyword">const</span> result = context[fn](...args);

  <span class="hljs-comment">// 执行完删除刚才新增的属性值</span>
  <span class="hljs-keyword">delete</span> context[fn];

  <span class="hljs-comment">// 返回执行结果</span>
  <span class="hljs-keyword">return</span> result;
};
</code></pre>
<p>由于 <code>call</code> 和 <code>apply</code> 的区别就在于传参的方式不同：</p>
<pre class="hljs"><code class="language-js">fn.<span class="hljs-title function_">call</span>(ctx, arg1, arg2, arg3);
fn.<span class="hljs-title function_">call</span>(ctx, [arg1, arg2, arg3]);
</code></pre>
<ul>
<li><code>call</code> 调用函数的参数是散列的形式</li>
<li><code>apply</code> 调用函数的参数是数组的形式</li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"Function.prototype.call"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","standard-built-in-objects","fundamental-objects","object","getOwnPropertyNames"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/fundamental-objects/object/getOwnPropertyNames","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/fundamental-objects/object/getOwnPropertyNames","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","HrCf30Gi8h3YpNvca7uuF",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1e3e,<h1>Object.getOwnPropertyNames</h1>
<p><code>Object.getOwnPropertyNames()</code> 方法用于获取指定对象的所有自身 Property 的键名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(O);
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>O</td>
<td>用于获取 Property 键名的目标对象</td>
<td>object</td>
</tr>
</tbody>
</table>
<p>返回 Properties 键名组成的数组。</p>
<h2>描述</h2>
<p>如果只需要获取可枚举属性，可以使用 <a href="/front-end/standard-built-in-objects/fundamental-objects/object/keys">Object.keys</a> 或用 <a href="/basic-concept/statements-and-declarations/iteration-statement/the-for-in-statement">for-in 语句</a>（还会获取到原型链上的可枚举属性，不过可以使用 <a href="/front-end/standard-built-in-objects/fundamental-objects/properties-of-the-object-prototype-object/hasOwnProperty">Object.prototype.hasOwnProperty</a> 方法过滤）。</p>
<h2>示例</h2>
<h3>数组</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// Array</span>
<span class="hljs-keyword">const</span> foo = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(foo).<span class="hljs-title function_">sort</span>());
<span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;length&#x27;]</span>
</code></pre>
<h3>类数组</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 类数组对象</span>
<span class="hljs-keyword">const</span> foo = { <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;c&#x27;</span> };
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(foo).<span class="hljs-title function_">sort</span>());
<span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span>

<span class="hljs-comment">// 使用 Array.forEach 输出属性名和属性值</span>
<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(foo).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">val, idx, array</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">${val}</span>:<span class="hljs-subst">${foo[val]}</span>`</span>);
});
<span class="hljs-comment">// 0:a</span>
<span class="hljs-comment">// 1:b</span>
<span class="hljs-comment">// 2:c</span>
</code></pre>
<h3>不可枚举属性</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 不可枚举属性</span>
<span class="hljs-keyword">const</span> foo = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(
  {},
  {
    <span class="hljs-attr">getBar</span>: {
      <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span>;
      },
      <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,
    },
  }
);
foo.<span class="hljs-property">bar</span> = <span class="hljs-number">1</span>;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(foo).<span class="hljs-title function_">sort</span>());
<span class="hljs-comment">// [&#x27;foo&#x27;, &#x27;getBar&#x27;]</span>
</code></pre>
<h3>仅获取自有 Property</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperClass</span>(<span class="hljs-params"></span>) {}
<span class="hljs-title class_">SuperClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">inheritedMethod</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {};

<span class="hljs-keyword">function</span> <span class="hljs-title function_">SubClass</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">prop</span> = <span class="hljs-number">5</span>;
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">method</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {};
}

<span class="hljs-title class_">SubClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperClass</span>();
<span class="hljs-title class_">SubClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">prototypeMethod</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {};

<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubClass</span>());
<span class="hljs-comment">// [&#x27;prop&#x27;, &#x27;method&#x27;]</span>
</code></pre>
<h3>只获取不可枚举 Property</h3>
<p>使用 <a href="/front-end/indexed-collections/array-objects/properties-of-the-array-prototype-object/iteration-methods/filter">Array.prototype.filter</a> 方法，从所有的 Property 键名数组（使用 <code>Object.getOwnPropertyNames</code> 方法获取）中去除可枚举的属性（使用 <a href="/front-end/standard-built-in-objects/fundamental-objects/object/keys">Object.keys</a> 方法获取），剩余的属性便是不可枚举的属性。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> enum_and_nonenum = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(target);
<span class="hljs-keyword">const</span> enum_only = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(target);
<span class="hljs-keyword">const</span> nonenum_only = enum_and_nonenum.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) {
  <span class="hljs-keyword">const</span> indexInEnum = enum_only.<span class="hljs-title function_">indexOf</span>(key);
  <span class="hljs-keyword">if</span> (indexInEnum === -<span class="hljs-number">1</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
  }
});
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

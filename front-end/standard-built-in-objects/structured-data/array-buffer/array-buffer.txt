1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","standard-built-in-objects","structured-data","array-buffer","array-buffer"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/structured-data/array-buffer/array-buffer","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/structured-data/array-buffer/array-buffer","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","XE4tj4NVT4uEhfXHyxFiT",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2460,<h1>ArrayBuffer 对象</h1>
<p><code>ArrayBuffer</code> 对象用来表示通用的、固定长度的原始二进制数据缓冲区。</p>
<p><code>ArrayBuffer</code> 不能直接操作，而是要通过 <strong>TypeArray 类型数组对象</strong> 或 <strong>DataView 数据视图对象</strong> 来操作，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。</p>
<ul>
<li>读取：
<ul>
<li>通过 FileReader 将文件转化为 ArrayBuffer 数据</li>
</ul>
</li>
<li>写入：
<ul>
<li>通过 TypeArray 对象进行操作</li>
<li>通过 DataView 对象进行操作</li>
</ul>
</li>
</ul>
<p>JavaScript 中的 Array 类型，因为有很多功能，而且是不限制类型的，或者它还可能是稀疏的。而如果你从 XHR、FileAPI、Canvas 等各种地方，读取了一大串字节流，如果用 JavaScript 里的 Array 去存储，不仅浪费空间且低效。于是为了配合这些新的 API，增强 JavaScript 的二进制处理能力，就有了 ArrayBuffer。</p>
<p>ArrayBuffer 和 Array 存在很大的区别：</p>
<ul>
<li>ArrayBuffer 初始化后固定大小，数组可以自由增减</li>
<li>数组放在堆中，ArrayBuffer 把数据放在栈中</li>
<li>ArrayBuffer 没有 <code>push</code> 和 <code>pop</code> 等数组的方法</li>
<li>ArrayBuffer 只能读不能写，写要借助 TypeArray 或 DataView</li>
</ul>
<p>ArrayBuffer 简单来说就是一片内存，但是你不能（也不方便）直接访问它里面的字节。而要访问 ArrayBuffer，则需要通过 TypedArray 类型引用。（可以将 ArrayBuffer 理解为 <strong>带类型的高速数组</strong> 或 <strong>类型化数组</strong>）</p>
<p>使用场景：</p>
<ul>
<li>上传图片读取和显示</li>
<li>Canvas 转换图片下载</li>
<li>WebGL</li>
</ul>
<h2>语法</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(length);
</code></pre>
<p>&lt;br /&gt;</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>length</code></td>
<td style="text-align:left"><code>Number</code> 类型</td>
<td style="text-align:left">要创建的 <code>ArrayBuffer</code> 的大小，单位为字节。</td>
</tr>
</tbody>
</table>
<p>一个指定大小的 <code>ArrayBuffer</code> 对象，其内容被初始化为 0。</p>
<h2>描述</h2>
<p><code>ArrayBuffer</code> 构造函数用来创建一个指定字节长度的 <code>ArrayBuffer</code> 对象。</p>
<p><strong>以现有数据获取 ArrayBuffer</strong></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Appendix.3A_Decode_a_Base64_string_to_Uint8Array_or_ArrayBuffer">从 Base64 字符串</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader#readAsArrayBuffer()">从本地文件</a></li>
</ul>
<h2>静态属性和方法</h2>
<h3>属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayBuffer.length</code></td>
<td>ArrayBuffer 构造函数的 length 属性，其值为 1。</td>
</tr>
<tr>
<td><code>get ArrayBuffer[@@species]</code></td>
<td>返回 ArrayBuffer 的构造函数。</td>
</tr>
<tr>
<td><code>ArrayBuffer.prototype</code></td>
<td>通过 ArrayBuffer 的原型对象可以为所有 ArrayBuffer 对象添加属性。</td>
</tr>
</tbody>
</table>
<h3>方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayBuffer.isView(arg)</code></td>
<td>如果参数是 ArrayBuffer 的视图实例则返回 <code>true</code>，例如 类型数组对象 或 <code>DataView</code> 对象；否则返回 <code>false</code>。</td>
</tr>
<tr>
<td><code>ArrayBuffer.transfer(oldBuffer [, newByteLength]);</code></td>
<td>返回一个新的 ArrayBuffer 对象，其内容取自 <code>oldBuffer</code> 中的数据，并且根据 <code>newByteLength</code> 的大小对数据进行截取或补 0。</td>
</tr>
<tr>
<td><code>ArrayBuffer.slice()</code></td>
<td>和 <code>ArrayBuffer.prototype.slice()</code> 功能相同。</td>
</tr>
</tbody>
</table>
<h2>原型属性和方法</h2>
<h3>属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayBuffer.prototype.constructor</code></td>
<td>指定函数，它创建一个对象的原型。其初始值是标准 ArrayBuffer 内置构造函数。</td>
</tr>
<tr>
<td><code>ArrayBuffer.prototype.byteLength</code></td>
<td>数组的字节大小。在数组创建时确定，并且不可变更。<strong>只读</strong>。</td>
</tr>
</tbody>
</table>
<h3>方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayBuffer.prototype.slice()</code></td>
<td>返回一个新的 <code>ArrayBuffer</code> ，它的内容是这个 <code>ArrayBuffer</code> 的字节副本，从 <code>begin</code>（包括），到 <code>end</code>（不包括）。如果 <code>begin</code> 或 <code>end</code> 是负数，则指的是从数组末尾开始的索引，而不是从头开始。</td>
</tr>
</tbody>
</table>
<h2>示例</h2>
<h3>代码示例</h3>
<p>下面的例子创建了一个 8 字节的缓冲区，并使用一个 <code>Int32Array</code> 来引用它：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">8</span>);
<span class="hljs-keyword">const</span> view = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>(buffer);
</code></pre>
<h3>视图生成</h3>
<p>ArrayBuffer 作为内存区域，可以存放多种类型的数据。不同数据有不同的存储方式，这就叫做<strong>视图</strong>。</p>
<p>目前，JavaScript 提供以下类型的视图：</p>
<ul>
<li>Int8Array：8 位有符号整数，长度 1 个字节。</li>
<li>Uint8Array：8 位无符号整数，长度 1 个字节。</li>
<li>Int16Array：16 位有符号整数，长度 2 个字节。</li>
<li>Uint16Array：16 位无符号整数，长度 2 个字节。</li>
<li>Int32Array：32 位有符号整数，长度 4 个字节。</li>
<li>Uint32Array：32 位无符号整数，长度 4 个字节。</li>
<li>Float32Array：32 位浮点数，长度 4 个字节。</li>
<li>Float64Array：64 位浮点数，长度 8 个字节。</li>
</ul>
<p>每一种视图都有一个 BYTES_PER_ELEMENT 常数，表示这种数据类型占据的字节数。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Int8Array</span>.<span class="hljs-property">BYTES_PER_ELEMENT</span>;
<span class="hljs-comment">// 1</span>
<span class="hljs-title class_">Uint8Array</span>.<span class="hljs-property">BYTES_PER_ELEMENT</span>;
<span class="hljs-comment">// 1</span>
<span class="hljs-comment">//...</span>
</code></pre>
<p>每一种视图都是一个构造函数，有多种方法可以生成。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 浏览器控制台输出：</span>
&gt; <span class="hljs-title class_">Int32Array</span>
&gt; <span class="hljs-keyword">function</span> <span class="hljs-title function_">Int32Array</span>(<span class="hljs-params"></span>) { [native code] }
</code></pre>
<h3>通过 TypeArray 对 ArrayBuffer 进行写操作</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> typedArray1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int8Array</span>(<span class="hljs-number">8</span>);
typeArray1[<span class="hljs-number">0</span>] = <span class="hljs-number">32</span>;

<span class="hljs-keyword">const</span> typedArray2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int8Array</span>(typedArray1);
typedArray2[<span class="hljs-number">1</span>] = <span class="hljs-number">42</span>;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(typedArray1);
<span class="hljs-comment">// Int8Array [32, 0, 0, 0, 0, 0, 0, 0]</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(typedArray2);
<span class="hljs-comment">// Int8Array [32, 42, 0, 0, 0, 0, 0, 0]</span>
</code></pre>
<h3>通过 DataView 对 ArrayBuffr 进行写操作</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">16</span>);
<span class="hljs-keyword">const</span> viwe = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(buffer);

view.<span class="hljs-title function_">setInt8</span>(<span class="hljs-number">2</span>, <span class="hljs-number">42</span>);
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(view.<span class="hljs-title function_">getInt8</span>(<span class="hljs-number">2</span>));
<span class="hljs-comment">// 42</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"ArrayBuffer"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

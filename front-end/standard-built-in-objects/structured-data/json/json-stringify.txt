1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","standard-built-in-objects","structured-data","json","json-stringify"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/structured-data/json/json-stringify","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/structured-data/json/json-stringify","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","dWGMzyx_hDIR_fdeCNTQ5",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3663,<h1>JSON.stringify()</h1>
<p><code>JSON.stringify()</code> 方法是将一个 JavaScript 值（对象或者数组）转换为一个 JSON 字符串，如果指定了 <code>replacer</code> 是一个函数，则可以替换值，或者如果指定了 <code>replacer</code> 是一个数组，可选的仅包括指定的属性。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>( value[, replacer [, space]] )
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>value</code></td>
<td style="text-align:center">任何类型</td>
<td style="text-align:center">将要序列化成 一个 JSON 字符串的值。</td>
</tr>
<tr>
<td style="text-align:center"><code>replacer</code></td>
<td style="text-align:center">可选，<code>Function</code> 类型</td>
<td style="text-align:center">如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 <code>null</code> 或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例，请参考使用原生的 JSON 对象一文。</td>
</tr>
<tr>
<td style="text-align:center"><code>space</code></td>
<td style="text-align:center">可选，<code>String</code> 类型</td>
<td style="text-align:center">指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为 10。该值若小于 1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为 <code>null</code>）将没有空格。</td>
</tr>
</tbody>
</table>
<h3>返回值</h3>
<p>一个表示给定值的 JSON 字符串。</p>
<h2>示例</h2>
<h3>代码示例</h3>
<ul>
<li>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。</li>
<li>JavaScript 基本数据类型</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// return &#x27;1&#x27;</span>
<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// return &#x27;true&#x27;</span>
<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// return &#x27;&quot;foo&quot;&#x27;</span>
</code></pre>
<ul>
<li>JavaScript 复杂数据类型</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">x</span>: <span class="hljs-number">5</span> }); <span class="hljs-comment">// return &#x27;{&quot;x&quot;:5}&#x27;</span>
<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>([<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;false&#x27;</span>, <span class="hljs-literal">false</span>]); <span class="hljs-comment">// return &#x27;[1,&quot;false&quot;,false]&#x27;</span>
<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">x</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">6</span> }); <span class="hljs-comment">// return &quot;{&quot;x&quot;:5,&quot;y&quot;:6}</span>
</code></pre>
<ul>
<li>布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>([<span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;false&#x27;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">false</span>)]);
<span class="hljs-comment">// &#x27;[1,&quot;false&quot;,false]&#x27;</span>
</code></pre>
<ul>
<li><code>undefined</code>、任意的函数以及 <code>Symbol</code> 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 <code>null</code>（出现在数组中时）。</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">x</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">y</span>: <span class="hljs-title class_">Object</span>, <span class="hljs-attr">z</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;&#x27;</span>) });
<span class="hljs-comment">// &#x27;{}&#x27;</span>

<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>([<span class="hljs-literal">undefined</span>, <span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;&#x27;</span>)]);
<span class="hljs-comment">// &#x27;[null,null,null]&#x27;</span>
</code></pre>
<ul>
<li>所有以 <code>Symbol</code> 为属性键的属性都会被完全忽略掉，即便 <code>replacer</code> 参数中强制指定包含了它们。</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ [<span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)]: <span class="hljs-string">&#x27;foo&#x27;</span> });
<span class="hljs-comment">// &#x27;{}&#x27;</span>

<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ [<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)]: <span class="hljs-string">&#x27;foo&#x27;</span> }, [<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)]);
<span class="hljs-comment">// &#x27;{}&#x27;</span>

<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ [<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)]: <span class="hljs-string">&#x27;foo&#x27;</span> }, <span class="hljs-keyword">function</span> (<span class="hljs-params">k, v</span>) {
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> k === <span class="hljs-string">&#x27;symbol&#x27;</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;a symbol&#x27;</span>;
  }
});
<span class="hljs-comment">// undefined</span>
</code></pre>
<ul>
<li>不可枚举的属性会被忽略。</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(
  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>, {
    <span class="hljs-attr">x</span>: { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span> },
    <span class="hljs-attr">y</span>: { <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span> },
  })
);

<span class="hljs-comment">// &quot;{&quot;y&quot;:&quot;y&quot;}&quot;</span>
</code></pre>
<h3><code>replacer</code> 参数</h3>
<p><code>replacer</code> 参数可以是一个函数或者一个数组。作为函数，它有两个参数，键（key）值（value）都会被序列化。</p>
<ul>
<li>如果返回一个 <code>Number</code> 类型的值，转换成相应的字符串被添加入 JSON 字符串。</li>
<li>如果返回一个 <code>String</code> 类型的值，该字符串作为属性值被添加入 JSON。</li>
<li>如果返回一个 <code>Boolean</code> 类型的值，<code>true</code> 或者 <code>false</code> 被作为属性值被添加入 JSON 字符串。</li>
<li>如果返回任何其他对象，该对象递归地序列化成 JSON 字符串，对每个属性调用 <code>replacer</code> 方法。除非该对象是一个函数，这种情况将不会被序列化成 JSON 字符串。</li>
<li>如果返回 <code>undefined</code>，该属性值不会在 JSON 字符串中输出。</li>
</ul>
<p><strong>注意：不能用 <code>replacer</code> 方法，从数组中移除值（<code>values</code>）如若返回 <code>undefined</code> 或者一个函数，将会被 <code>null</code> 取代。</strong></p>
<h4>例子（当参数为 <code>Function</code>）</h4>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">replacer</span>(<span class="hljs-params">key, value</span>) {
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;string&#x27;</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;
  }
  <span class="hljs-keyword">return</span> value;
}

<span class="hljs-keyword">var</span> foo = { <span class="hljs-attr">foundation</span>: <span class="hljs-string">&#x27;Mozilla&#x27;</span>, <span class="hljs-attr">model</span>: <span class="hljs-string">&#x27;box&#x27;</span>, <span class="hljs-attr">week</span>: <span class="hljs-number">45</span>, <span class="hljs-attr">transport</span>: <span class="hljs-string">&#x27;car&#x27;</span>, <span class="hljs-attr">month</span>: <span class="hljs-number">7</span> };

<span class="hljs-keyword">var</span> jsonString = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(foo, replacer); <span class="hljs-comment">// {&quot;week&quot;: 45,&quot;month&quot;: 7}</span>
</code></pre>
<h4>例子（当参数为 <code>Array</code>）</h4>
<p>如果 <code>replacer</code> 是一个数组，数组的值代表将被序列化成 JSON 字符串的属性名。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(foo, [<span class="hljs-string">&#x27;week&#x27;</span>, <span class="hljs-string">&#x27;month&#x27;</span>]);
<span class="hljs-comment">// &#x27;{&quot;week&quot;: 45,&quot;month&quot;:7}&#x27;, 只保留“week”和“month”属性值</span>
</code></pre>
<h3><code>space</code> 参数</h3>
<p><code>space</code> 参数用来控制结果字符串里面的间距。如果一个数字，则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多 10 个空格）；如果是一个字符串，则每一级别会比上一级别多缩进用该字符串（或该字符串的前十个字符）。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">a</span>: <span class="hljs-number">2</span> }, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// &#x27;{\n &quot;a&quot;: 2\n}&#x27;</span>
</code></pre>
<p>使用制表符（<code>\t</code>）来缩进：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">uno</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">dos</span>: <span class="hljs-number">2</span> }, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;\t&#x27;</span>);
<span class="hljs-comment">//&#x27;{            \</span>
<span class="hljs-comment">//    &quot;uno&quot;: 1, \</span>
<span class="hljs-comment">//    &quot;dos&quot;: 2  \</span>
<span class="hljs-comment">//}&#x27;</span>
</code></pre>
<h3><code>toJSON</code> 方法</h3>
<p>如果一个被序列化的对象拥有 <code>toJSON</code> 方法，那么该 <code>toJSON</code> 方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用 <code>toJSON</code> 方法后的返回值会被序列化。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> obj = {
  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;foo&#x27;</span>,
  <span class="hljs-attr">toJSON</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;bar&#x27;</span>;
  },
};

<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj); <span class="hljs-comment">// &#x27;&quot;bar&quot;&#x27;</span>
<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({ <span class="hljs-attr">x</span>: obj }); <span class="hljs-comment">// &#x27;{&quot;x&quot;: &quot;bar&quot;}&#x27;</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","standard-built-in-objects","structured-data","json","json"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/structured-data/json/json","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/structured-data/json/json","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","sM3ks7AL1OifN0McF0oZt",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T21dd,<h1>JSON</h1>
<p>JSON 英文全称 JavaScript Object Notation（JavaScript 对象表示法）是一种轻量级的用于存储和交换文本信息的语法，被设计用于可读的数据交换。</p>
<p>JSON 是从 JavaScript 脚本语言中演变而来，使用 JavaScript 语法来描述数据对象，文件名扩展是 <code>.json</code>，但是 JSON 格式仅仅是一个文本，仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。目前非常多的动态（PHP、JSP、.NET）编程语言都支持 JSON。</p>
<p>JSON 格式可以用于通过网络连接序列化和传输结构化数据，用于编写基于 JavaScript 应用程序，包括浏览器扩展和网站。JSON 主要用于在服务器和 Web 应用程序之间传输数据，Web 服务和 APIs 可以使用 JSON 格式提供公用数据，还可以用于现代编程语言中。</p>
<h2>语法</h2>
<p>JSON 语法是 JavaScript 对象语法的子集。</p>
<ul>
<li>数据使用名称/值对表示</li>
<li>数据由逗号分隔</li>
<li>使用花括号保存对象，每个名称后面跟着冒号，名值对使用逗号分隔</li>
<li>使用方括号保存数组，数组值用逗号分隔</li>
</ul>
<pre class="hljs"><code class="language-js">{
    <span class="hljs-string">&quot;book&quot;</span>: [
        {
            <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1562366</span>,
            <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">21.5</span>,
            <span class="hljs-string">&quot;isPromotion&quot;</span>: <span class="hljs-literal">true</span>,
            <span class="hljs-string">&quot;language&quot;</span>: <span class="hljs-string">&quot;Java&quot;</span>,
            <span class="hljs-string">&quot;edition&quot;</span>: <span class="hljs-string">&quot;third&quot;</span>,
            <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;Herbert Schildt&quot;</span>,
        },
        {
            <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;07&quot;</span>,
            <span class="hljs-string">&quot;language&quot;</span>: <span class="hljs-string">&quot;C++&quot;</span>,
            <span class="hljs-string">&quot;edition&quot;</span>: <span class="hljs-string">&quot;second&quot;</span>,
            <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;E.Balagurusamy&quot;</span>
        }
    ]
}
</code></pre>
<h3>JSON 键值对</h3>
<p>JSON 数据的书写格式是：键/值对</p>
<p>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：</p>
<pre class="hljs"><code class="language-json"><span class="hljs-punctuation">{</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;John&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Doe&quot;</span> <span class="hljs-punctuation">}</span>
</code></pre>
<p>等价于这条 JavaScript 语句：</p>
<pre class="hljs"><code class="language-js">{ firstName = <span class="hljs-string">&quot;John&quot;</span>, lastName = <span class="hljs-string">&quot;Doe&quot;</span>}
</code></pre>
<p>JSON 值允许的 JavaScript 类型：</p>
<ul>
<li>数字（整数或浮点数）</li>
<li>字符串（在双引号中）</li>
<li>逻辑值（<code>true</code> 或 <code>false</code>）</li>
<li>数组（在方括号中）</li>
<li>对象（在花括号中）</li>
<li>null</li>
</ul>
<p><strong>注意：JSON 不支持 JavaScript 中的特殊值 <code>undefined</code>。</strong></p>
<h3>JSON 对象</h3>
<p><strong>JSON 字面量</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> person = {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xianyu&#x27;</span>,
  <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>,
  <span class="hljs-attr">love</span>: <span class="hljs-string">&#x27;Online Game&#x27;</span>,
};
</code></pre>
<p>从上我们可以看出这就是用字面量表示的一个对象，而这个格式就是 JSON 格式的，因为本身 JSON 就是 JavaScript 语法集的一种，所以 JSON 字面量就是用 JSON 格式的 JavaScript 对象字面量。</p>
<p><strong>与 JavaScript 对象的差异</strong></p>
<ul>
<li>JSON 中没有变量的概念（不用声明变量）</li>
<li>JSON 没有末尾的的分号（因为不是 JavaScript 语句，所以不需要分号）</li>
<li>JSON 对象的属性必须加双引号</li>
</ul>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// JavaScript</span>
<span class="hljs-keyword">let</span> person = {
    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nicholas&quot;</span>,
    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">29</span>
}

<span class="hljs-comment">// JSON</span>
{
    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nicholas&quot;</span>,
    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">29</span>
}
</code></pre>
<ul>
<li>JSON 属性的值可以是简单值，也可以是复杂类型值（因此可以像下面这样在对象中嵌入对象）。</li>
</ul>
<pre class="hljs"><code class="language-js">{
    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Nicolas&quot;</span>,
    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">29</span>,
    <span class="hljs-string">&quot;school&quot;</span>: {
        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Merrimack College&quot;</span>,
        <span class="hljs-string">&quot;location&quot;</span>: <span class="hljs-string">&quot;North Andover, MA&quot;</span>
    }
}
</code></pre>
<p><strong>注意：同一对象中绝对不应该出现两个同名属性。</strong></p>
<h3>JSON 数组</h3>
<p>JSON 数组采用的就是 JavaScript 中的数组字面量形式。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> values = [<span class="hljs-number">25</span>, <span class="hljs-string">&#x27;hi&#x27;</span>, <span class="hljs-literal">true</span>];
</code></pre>
<p>JSON 数组也没有变量和分号。把数组和对象结合起来，可以构成更复杂的数据集合。</p>
<pre class="hljs"><code class="language-js">[
  {
    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Professional JavaScript&#x27;</span>,
    <span class="hljs-attr">authors</span>: [<span class="hljs-string">&#x27;Nicholas C. Zakas&#x27;</span>],
    <span class="hljs-attr">edition</span>: <span class="hljs-number">3</span>,
    <span class="hljs-attr">year</span>: <span class="hljs-number">2011</span>,
  },
  {
    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Professional JavaScript&#x27;</span>,
    <span class="hljs-attr">authors</span>: [<span class="hljs-string">&#x27;Nicholas C. Zakas&#x27;</span>],
    <span class="hljs-attr">edition</span>: <span class="hljs-number">3</span>,
    <span class="hljs-attr">year</span>: <span class="hljs-number">2009</span>,
  },
  {
    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Professional JavaScript&#x27;</span>,
    <span class="hljs-attr">authors</span>: [<span class="hljs-string">&#x27;Nicholas C. Zakas&#x27;</span>],
    <span class="hljs-attr">edition</span>: <span class="hljs-number">3</span>,
    <span class="hljs-attr">year</span>: <span class="hljs-number">2008</span>,
  },
];
</code></pre>
<h2>方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>JSON.stringify()</code></td>
<td>用来解析 JSON 字符串，构造由字符串描述的 JavaScript 值或对象。提供可选的 <code>reviver</code> 函数用以在返回之前对所得到的对象进行变换（操作）。</td>
</tr>
<tr>
<td><code>JSON.parse()</code></td>
<td>将一个 JavaScript 值（对象或者数组）转换为一个 JSON 字符串，如果指定了 <code>replace</code> 是一个函数，则可以替换值，或者如果指定了 <code>replacer</code> 是一个数组，可选的仅包括指定的属性。</td>
</tr>
</tbody>
</table>
<h2>JSON 文件</h2>
<p>JSON 文件的文件类型是 <code>.json</code></p>
<p>JSON 文本的 MIME 类型是 <code>application/json</code></p>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

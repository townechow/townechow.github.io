1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","standard-built-in-objects","text-processing","string","string"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/text-processing/string/string","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/text-processing/string/string","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Tu-s4vlrUB3ck51RTGj1w",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T38ed,<h1>String 对象</h1>
<p>String 对象是一个用于 <strong>字符串</strong> 或一个 <strong>字符序列</strong> 的构造函数。</p>
<p>String 对象是文本字符串的对象形式。String 对象允许操作和格式化文本字符串以及确定和定位字符串中的子字符串。</p>
<h2>语法</h2>
<p><strong>构造函数</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>([value]);
</code></pre>
<p><strong>字符串类型转换函数</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">String</span>([value]);
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>value</code></td>
<td>任意类型</td>
<td>任何可以被转换成字符串的值。</td>
</tr>
</tbody>
</table>
<h2>说明</h2>
<h3>模板字面量</h3>
<p>从 ECMAScript 2015 开始，字符串字面量也可以称为 <strong>模板字面量</strong>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> w = <span class="hljs-string">&#x27;world&#x27;</span><span class="hljs-string">`Hello <span class="hljs-subst">${w}</span>!`</span>;
</code></pre>
<h3>转义字符</h3>
<p>除了普通的可打印字符以外，一些有特殊功能的字符可以通过转义字符的形式放入字符串中：</p>
<table>
<thead>
<tr>
<th style="text-align:left">转义字符</th>
<th style="text-align:left">输出</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\0</code></td>
<td style="text-align:left">空字符</td>
</tr>
<tr>
<td style="text-align:left"><code>\'</code></td>
<td style="text-align:left">单引号</td>
</tr>
<tr>
<td style="text-align:left"><code>\&quot;</code></td>
<td style="text-align:left">双引号</td>
</tr>
<tr>
<td style="text-align:left"><code>\\</code></td>
<td style="text-align:left">反斜杠</td>
</tr>
<tr>
<td style="text-align:left"><code>\n</code></td>
<td style="text-align:left">换行</td>
</tr>
<tr>
<td style="text-align:left"><code>\r</code></td>
<td style="text-align:left">回车</td>
</tr>
<tr>
<td style="text-align:left"><code>\v</code></td>
<td style="text-align:left">垂直制表符</td>
</tr>
<tr>
<td style="text-align:left"><code>\t</code></td>
<td style="text-align:left">水平制表符</td>
</tr>
<tr>
<td style="text-align:left"><code>\b</code></td>
<td style="text-align:left">退格</td>
</tr>
<tr>
<td style="text-align:left"><code>\f</code></td>
<td style="text-align:left">换页</td>
</tr>
<tr>
<td style="text-align:left"><code>\uXXXX</code></td>
<td style="text-align:left">Unicode 码</td>
</tr>
<tr>
<td style="text-align:left"><code>\xXX</code></td>
<td style="text-align:left">Latin-1 字符（x 小写）</td>
</tr>
</tbody>
</table>
<p>和其他语言不同，JavaScript 的字符串不区分单引号和双引号，所以不论是单引号还是双引号的字符串，上面的转义字符都能运行 。</p>
<h2>原型对象</h2>
<h3>原型属性</h3>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>String.prototype.constructor</td>
<td>返回创建该对象的构造函数。</td>
</tr>
<tr>
<td>String.prototype.length</td>
<td>返回字符串的长度(字符数)。</td>
</tr>
<tr>
<td>String.prototype.N</td>
<td>用于访问第 N 个位置的字符，其中 N 是小于 length 和 0 之间的正整数。这些属性都是只读性质，不能编辑。</td>
</tr>
</tbody>
</table>
<h3>原型方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/from-char-code">String.fromCharCode()</a></td>
<td>获取指定 UTF-16 代码单元序列创建的字符串</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/from-code-point">String.fromCodePoint()</a></td>
<td>获取指定代码点序列创建的字符串</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/char-at">String.prototype.charAt()</a></td>
<td>返回字符串中指定位置的子字符</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/char-code-at">String.prototype.charCodeAt()</a></td>
<td>返回字符串中指定位置的子字符的 Unicode 的值（值的范围是 0 到 65535）</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/code-point-at">String.prototype.codePointAt()</a></td>
<td>返回使用 UTF-16 编码的给定位置的值的非负整数。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/concat">String.prototype.concat()</a></td>
<td>将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/ends-with">String.prototype.endsWith()</a></td>
<td>用于判断当前字符串是否是以另外一个给定的字符串结尾的，根据判断结果返回 <code>true</code> 或 <code>false</code>。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/includes">String.prototype.includes()</a></td>
<td>用于判断一个字符串里是否包含在另一个字符串中，根据情况返回 <code>true</code> 和 <code>false</code>。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/index-of">String.prototype.indexOf()</a></td>
<td>返回调用 String 对象中第一个发现的指定值的索引值，如果没有找到则返回 -1。从 <code>startIndex</code> 进行搜索。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/last-index-of">String.prototype.lastIndexOf()</a></td>
<td>返回调用该方法的字符串中最后出现的位置，如果没有找到则返回 -1。从该字符串的后面向前查找，从 <code>startIndex</code> 处开始。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/locale-compare">String.prototype.localeCompare()</a></td>
<td>返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/match">String.prototype.match()</a></td>
<td>检索一个字符串与一个正则表达式的匹配项。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/match-all">String.prototype.matchAll()</a></td>
<td>获取一个包含所有匹配正则表达式</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/normalize">String.prototype.normalize()</a></td>
<td>按照指定一种 Unicode 正规形式将当前字符串正规化。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/pad-end">String.prototype.padEnd()</a></td>
<td>用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/pad-start">String.prototype.padStart()</a></td>
<td>用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的开头（右侧）开始填充。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/repeat">String.prototype.repeat()</a></td>
<td>构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/replace">String.prototype.replace()</a></td>
<td>返回一个由替换值替换一些或所有匹配的模式后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的函数。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/search">String.prototype.search()</a></td>
<td>对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/slice">String.prototype.slice()</a></td>
<td>摘取一个字符串区域（字符串的一部分），返回一个新的字符串。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/split">String.prototype.split()</a></td>
<td>使用指定的分隔符字符串将一个 String 对象分割成字符串数组，以将字符串分割为子字符串，以确定每个拆分的位置。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/start-with">String.prototype.startsWith()</a></td>
<td>判断字符串的起始位置是否匹配其他字符串中的字符，根据判断结果返回 <code>true</code> 或 <code>false</code>。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/substr">String.prototype.substr()</a></td>
<td>通过指定字符数返回从指定位置开始到指定字符串数的字符。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/substring">String.prototype.substring()</a></td>
<td>返回一个字符串在开始索引到结束索引之间的一个子集，或从开始索引知道字符串的末尾的一个子集。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/to-locale-lower-case">String.prototype.toLocaleLowerCase()</a></td>
<td>根据任何特定于语言环境的案例映射，返回调用字符串值转换为小写的值。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/to-locale-upper-case">String.prototype.toLocaleUpperCase()</a></td>
<td>使用本地化的大小写映射规则将输入的字符串转化成大写形式并返回结果字符串。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/to-lower-case">String.prototype.toLowerCase()</a></td>
<td>将字符串转换成小写并返回。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/to-string">String.prototype.toString()</a></td>
<td>返回用字符串表示的特定对象。重写 <code>Object.prototype.toString</code> 方法。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/to-upper-case">String.prototype.toUpperCase()</a></td>
<td>将调用该方法的字符串值转换为大写形式，并返回。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/trim">String.prototype.trim()</a></td>
<td>从字符串的两端删除空白字符。在这个上下文的空白字符是所有的空白字符（<code>space</code>、<code>tab</code>、<code>no-break space</code>）。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/trim-end">String.prototype.trimEnd()</a></td>
<td>移除原字符串的左侧的连续空白符。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/trim-start">String.prototype.trimStart()</a></td>
<td>移除原字符串的左侧的连续空白符。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/value-of">String.prototype.valueOf()</a></td>
<td>返回特定对象的原始值。重写 <code>Object.prototype.valueOf</code> 方法。</td>
</tr>
<tr>
<td><a href="/front-end/standard-built-in-objects/text-processing/string/raw">String.raw()</a></td>
<td>模版字符串的标签函数，它的作用类似于 Python 中的字符串前缀 r 和 C# 中的字符串前缀 @ ，是用来获取一个模版字符串的原始字符串的</td>
</tr>
</tbody>
</table>
<h2>示例</h2>
<h3>从字符串中获取单个字符</h3>
<p>获取字符串的某个字符有两种方法。 第一种是使用 charAt 方法：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;cat&#x27;</span>.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">1</span>);
<span class="hljs-comment">// &quot;a&quot;</span>
</code></pre>
<p>另一种把字符串当作一个类似数组的对象，其中的每个字符对应一个数值索引：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;cat&#x27;</span>[<span class="hljs-number">1</span>];
(<span class="hljs-string">&#x27;a&#x27;</span>);
</code></pre>
<p>使用括号访问字符串不可以对其进行删除或添加，因为字符串对应未知的属性并不是可读或配置的。 (更多的信息请参阅 Object.defineProperty )</p>
<h3>长字符串</h3>
<p>有时，你的代码可能含有很长的字符串。你可能想将这样的字符串写成多行，而不是让这一行无限延长或着被编辑器折叠。有两种方法可以做到这一点。</p>
<p>可以使用 <code>+</code> 运算符将多个字符串连接起来。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> longString =
  <span class="hljs-string">&#x27;This is a very long string which needs &#x27;</span> +
  <span class="hljs-string">&#x27;to wrap across multiple lines because &#x27;</span> +
  <span class="hljs-string">&#x27;otherwise my code is unreadable.&#x27;</span>;
</code></pre>
<p>可以在每行末尾使用反斜杠字符（<code>\</code>），以指示字符串将在下一行继续。确保反斜杠后面没有空格或任何除换行符之外的字符或缩进；否则反斜杠将不会工作。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> longString =
  <span class="hljs-string">&#x27;This is a very long string which needs \
to wrap across multiple lines because \
otherwise my code is unreadable.&#x27;</span>;
</code></pre>
<p>或者使用 ES6+ 提供的模版字符串</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> longString = <span class="hljs-string">`This is a very long string which needs
to wrap across multiple lines because
otherwise my code is unreadable.`</span>;
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"String"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

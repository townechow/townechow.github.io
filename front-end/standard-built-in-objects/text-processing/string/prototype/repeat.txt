1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","standard-built-in-objects","text-processing","string","prototype","repeat"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/text-processing/string/prototype/repeat","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/text-processing/string/prototype/repeat","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Te9u2HWeE9HdAZLYFaLVG",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T155b,<h1>String.prototype.repeat()</h1>
<p><code>repeat()</code> 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</p>
<h2>语法</h2>
<pre class="hljs language-js"  style=--lang:"js" ><code>str.<span class="hljs-title function_">repeat</span>(count);
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>count</code></td>
<td>介于 0 与正无穷大之间的整数。表示在新构造的字符串中重复了多少遍原字符串。</td>
<td>number</td>
</tr>
</tbody>
</table>
<h2>示例</h2>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;abc&#x27;</span>;

str.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">0</span>);
<span class="hljs-comment">// &#x27;&#x27;</span>

str.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">1</span>);
<span class="hljs-comment">// &#x27;abc&#x27;</span>

str.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">2</span>);
<span class="hljs-comment">// &#x27;abcabc&#x27;</span>

str.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3.5</span>);
<span class="hljs-comment">// &#x27;abcabcabc&#x27;</span>

str.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);
<span class="hljs-comment">// RangeError: repeat count must be positive and less than infinity</span>

str.<span class="hljs-title function_">repeat</span>(-<span class="hljs-number">1</span>);
<span class="hljs-comment">// RangeError: repeat count mutst be positive and less than infinity</span>
</code></pre>
<h2>Polyfill</h2>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">repeat</span>) {
  <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">repeat</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">count</span>) {
    <span class="hljs-string">&#x27;use strict&#x27;</span>;

    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> === <span class="hljs-literal">null</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&quot;Can&#x27;t convert &quot;</span> + <span class="hljs-variable language_">this</span> + <span class="hljs-string">&#x27; to object&#x27;</span>);
    }
    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span> + <span class="hljs-variable language_">this</span>;
    count = +count;

    <span class="hljs-keyword">if</span> (count !== count) {
      count = <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RangeError</span>(<span class="hljs-string">&#x27;repeat count must be non-negative&#x27;</span>);
    }
    <span class="hljs-keyword">if</span> (count === <span class="hljs-title class_">Infinity</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RangeError</span>(<span class="hljs-string">&#x27;repeat count must be less than Infinity&#x27;</span>);
    }

    count = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(count);

    <span class="hljs-keyword">if</span> (str.<span class="hljs-property">length</span> === <span class="hljs-number">0</span> || count === <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;
    }

    <span class="hljs-comment">// 确保 count 是一个 31 位的整数，这样我们就可以使用如下优化的算法</span>
    <span class="hljs-comment">// 当前，绝大多数浏览器都不能支持 1&lt;&lt;28 长的字符串</span>
    <span class="hljs-keyword">if</span> (str.<span class="hljs-property">length</span> * count &gt;= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">28</span>) {
      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RangeError</span>(<span class="hljs-string">&#x27;repeat count must not overflow maximum string size&#x27;</span>);
    }

    <span class="hljs-keyword">var</span> repeat = <span class="hljs-string">&#x27;&#x27;</span>;

    <span class="hljs-keyword">for</span> (;;) {
      <span class="hljs-keyword">if</span> ((count &amp; <span class="hljs-number">1</span>) === <span class="hljs-number">1</span>) {
        repeat += str;
      }

      count &gt;&gt;&gt;= <span class="hljs-number">1</span>;

      <span class="hljs-keyword">if</span> (count === <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">break</span>;
      }
      str += str;
    }
    <span class="hljs-keyword">return</span> repeat;
  };
}
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","standard-built-in-objects","text-processing","string","prototype","replace"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/text-processing/string/prototype/replace","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/text-processing/string/prototype/replace","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","UNIULn4e-1lVUVvPrqDjE",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3996,<h1>String.prototype.replace()</h1>
<p><code>replace()</code> 函数用于使用指定字符串替换当前字符串中匹配指定正则表达式模式的子字符串，并返回完成替换后的字符串。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js">str.<span class="hljs-title function_">replace</span>(pattern, replacement);
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>pattern</code></td>
<td style="text-align:left">指定的正则表达式模式的 RegExp 对象的实例。也可以是字符串。</td>
<td style="text-align:left">string / RegExp</td>
</tr>
<tr>
<td style="text-align:left"><code>replacement</code></td>
<td style="text-align:left">用于替换的字符串，或返回替换字符串的函数。</td>
<td style="text-align:left">string / function</td>
</tr>
</tbody>
</table>
<p>一个部分或全部匹配由替代模式所取代的新的字符串。</p>
<h2>描述</h2>
<ul>
<li>如果参数 <code>pattern</code> 是字符串，则 <code>replace()</code> 函数将直接根据该字符串进行精确匹配，而不会试图转换为正则表达式，并且 <strong>只替换第一个匹配到</strong> 的子字符串</li>
<li>参数 <code>replacement</code> 可以使用以下以 <code>$</code> 开头的 <strong>匹配变量</strong> 来动态确定用于替换的字符串内容（参数 <code>pattern</code> 为正则表达式时才生效）</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>$n</code></td>
<td style="text-align:left">假如第一个参数是 <code>RegExp</code> 对象，并且 <code>n</code> 是个小于 100 的非负整数，那么插入第 <code>n</code> 个括号匹配的字符串。</td>
</tr>
<tr>
<td style="text-align:left"><code>$&amp;</code></td>
<td style="text-align:left">插入匹配的子串。</td>
</tr>
<tr>
<td style="text-align:left">&lt;code&gt;$`&lt;/code&gt;</td>
<td style="text-align:left">插入当前匹配的子串左边的内容。</td>
</tr>
<tr>
<td style="text-align:left"><code>$'</code></td>
<td style="text-align:left">插入当前匹配的子串右边的内容。</td>
</tr>
<tr>
<td style="text-align:left"><code>$$</code></td>
<td style="text-align:left">插入一个 <code>$</code>。</td>
</tr>
</tbody>
</table>
<p>在进行全局的搜索替换时，正则表达式需包含 <code>g</code> 标志。</p>
<ul>
<li>指定一个函数作为参数</li>
</ul>
<p>你可以指定一个函数作为第二个参数。在这种情况下，当匹配执行后， 该函数就会执行。 函数的返回值作为替换字符串。（注意: 上面提到的特殊替换参数在这里不能被使用。) 另外要注意的是， 如果第一个参数是正则表达式， 并且其为全局匹配模式， 那么这个方法将被多次调用， 每次匹配都会被调用。</p>
<p>下面是该函数的参数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量名</th>
<th style="text-align:left">代表的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">match</td>
<td style="text-align:left">匹配的子串。（对应于上述的 <code>\$&amp;</code>。）</td>
</tr>
<tr>
<td style="text-align:center">p1,p2, ...</td>
<td style="text-align:left">假如 <code>replace()</code> 方法的第一个参数是一个 <code>RegExp</code> 对象，则代表第 <code>n</code> 个括号匹配的字符串。（对应于上述的 <code>$1</code>，<code>$2</code>等。）</td>
</tr>
<tr>
<td style="text-align:center">offset</td>
<td style="text-align:left">匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是 <code>'abcd'</code>，匹配到的子字符串是 <code>'bc'</code>，那么这个参数将是 1）</td>
</tr>
<tr>
<td style="text-align:center">string</td>
<td style="text-align:left">被匹配的原字符串。</td>
</tr>
</tbody>
</table>
<p>精确的参数个数依赖于 <code>replace()</code>的第一个参数是否是一个正则表达式对象， 以及这个正则表达式中指定了多少个括号子串。</p>
<h2>示例</h2>
<h3>代码示例</h3>
<p>在下面的例子中，<code>replace()</code> 中使用了正则表达式及忽略大小写标示。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;Twas the night before Xmas...&#x27;</span>;

<span class="hljs-keyword">var</span> newstr = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/xmas/i</span>, <span class="hljs-string">&#x27;Christmas&#x27;</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr);
<span class="hljs-comment">// Twas the night before Christmas...</span>

<span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;Hello world!&#x27;</span>;

<span class="hljs-comment">// 将字符 &#x27;lo&#x27; 替换为 &#x27;**&#x27;</span>
str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;lo&#x27;</span>, <span class="hljs-string">&#x27;**&#x27;</span>);
<span class="hljs-comment">// &quot;Hel** world!&quot;</span>

<span class="hljs-comment">// 将所有 &#x27;h&#x27; 替换为 &#x27;**&#x27;（全局，忽略大小写）</span>
str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/h/ig</span>);
 <span class="hljs-comment">// &#x27;**ello world!&#x27;</span>

<span class="hljs-comment">// 将位于单词边界前的两个字母替换为 &#x27;**&#x27;</span>
str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\w{2}\b/g</span>, <span class="hljs-string">&#x27;**&#x27;</span>);
 <span class="hljs-comment">// &quot;Hel** wor**!&quot;</span>

<span class="hljs-comment">// 将位于起始位置与单词边界的两个字母替换为 &#x27;**&#x27;（没有匹配项）</span>
str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\w{2}\b/g</span>/, <span class="hljs-string">&#x27;**&#x27;</span>);
<span class="hljs-comment">// &quot;Hello world!&quot;</span>

<span class="hljs-comment">// 在所有的连续两个字母并且后面不跟字母 &#x27;l&#x27; 的字母前添加 &quot;**&quot;</span>
<span class="hljs-comment">// 这里的 &quot;$1&quot; 就表示正则表达式中第一个小括号内的子表达式匹配到的内容</span>
str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\w{2}(?!l))/g</span>, <span class="hljs-string">&#x27;**$1&#x27;</span>);
<span class="hljs-comment">// &quot;He**llo **wo**rld!&quot;</span>
</code></pre>
<h3>全局模式和区分大小写模式</h3>
<p>下面的例子中，正则表达式包含有全局替换（g）和忽略大小写（i）的选项，这使得 <code>replace()</code> 方法用 <code>oranges</code> 替换掉了所有出现的 <code>apples</code>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/apples/gi</span>;
<span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;Apples are round, and apples are juicy.&#x27;</span>;
<span class="hljs-keyword">var</span> newstr = str.<span class="hljs-title function_">replace</span>(re, <span class="hljs-string">&#x27;oranges&#x27;</span>);

<span class="hljs-comment">// oranges are round, and oranges are juicy.</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr);
</code></pre>
<h3>单词互换</h3>
<p>下面的例子演示了如何交换一个字符串中两个单词的位置，这个脚本使用 <code>$1</code> 和 <code>$2</code> 代替替换文本。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/(\w+)\s(\w+)/</span>;
<span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;John Smith&#x27;</span>;
<span class="hljs-keyword">var</span> newstr = str.<span class="hljs-title function_">replace</span>(re, <span class="hljs-string">&#x27;$2, $1&#x27;</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newstr); <span class="hljs-comment">// Smith, John</span>
</code></pre>
<h3>使用行内函数来修改匹配到的字符</h3>
<p>在这个例子中，所有出现的大写字母转换为小写，并且在匹配位置前加一个连字符。重要的是，在返回一个替换了的字符串前需要在匹配元素前需要进行添加操作。</p>
<p>在返回前，替换函数允许匹配片段作为参数，并且将它和连字符进行连接作为新的片段。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">styleHyphenFormat</span>(<span class="hljs-params">propertyName</span>) {
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">upperToHyphenLower</span>(<span class="hljs-params">match</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-&#x27;</span> + match.<span class="hljs-title function_">toLowerCase</span>();
  }
  <span class="hljs-keyword">return</span> propertyName.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[A-Z]/g</span>, upperToHyphenLower);
}
</code></pre>
<p>此代码 <code>styleHyphenFormat('borderTop')</code> 将返回 'border-top'。</p>
<p>因为我们想在最终的替换中进一步转变匹配结果，所以我们必须使用一个函数。这迫使我们在使用 <code>toLowerCase()</code> 方法前进行评估。如果我们尝试不用一个函数进行匹配，那么使用 <code>toLowerCase()</code> 方法将不会有效。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> newString = propertyName.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[A-Z]/g</span>, <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-string">&#x27;$&amp;&#x27;</span>.<span class="hljs-title function_">toLowerCase</span>()); <span class="hljs-comment">// won&#x27;t work</span>
</code></pre>
<p>这是因为 <code>'$&amp;'.toLowerCase()</code> 会先被解析成字符串字面量（这会导致相同的'$&amp;')而不是当作一个模式。</p>
<h3>将华氏温度转换为对等的摄氏温度</h3>
<p>下面的例子演示如何将华氏温度转换为对等的摄氏温度。华氏温度用一个数字加一个&quot;F&quot;来表示，这个函数将返回一个数字加&quot;C&quot;来表示的摄氏温度。例如，如果输入是 212F，这个函数将返回 100C。如果输入数字时 0F，这个方法将返回 <code>&quot;-17.77777777777778C&quot;</code>。</p>
<p>正则表达式 test 检查任何数字是否以 F 结尾。华氏温度通过第二个参数 p1 进入函数。这个函数基于华氏温度作为字符串传递给 f2c 函数设置成摄氏温度。然后 f2c() 返回摄氏温度。这个函数与 Perl 的 s///e 标志相似。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2c</span>(<span class="hljs-params">x</span>) {
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">str, p1, offset, s</span>) {
    <span class="hljs-keyword">return</span> ((p1 - <span class="hljs-number">32</span>) * <span class="hljs-number">5</span>) / <span class="hljs-number">9</span> + <span class="hljs-string">&#x27;C&#x27;</span>;
  }
  <span class="hljs-keyword">var</span> s = <span class="hljs-title class_">String</span>(x);
  <span class="hljs-keyword">var</span> test = <span class="hljs-regexp">/(\d+(?:\.\d*)?)F\b/g</span>;
  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">replace</span>(test, convert);
}
</code></pre>
<h3>转义用户输入特殊字符</h3>
<p>把用户输入的特殊字符进行转义，避免 XSS 攻击。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">htmlEscape</span>(<span class="hljs-params">text</span>) {
  <span class="hljs-keyword">return</span> text.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[&lt;&gt;&quot;&amp;]/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">match, pos, originalText</span>) {
    <span class="hljs-keyword">switch</span> (match) {
      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&lt;&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&gt;&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&amp;&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>;
    }
  });
}
</code></pre>
<h3>转换驼峰命名</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">camelCased</span>(<span class="hljs-params">str</span>) {
  <span class="hljs-keyword">const</span> regexp = <span class="hljs-regexp">/-(\w)/g</span>;
  str.<span class="hljs-title function_">replace</span>(regexp, <span class="hljs-keyword">function</span> (<span class="hljs-params">match, pos</span>) {
    <span class="hljs-keyword">return</span> pos.<span class="hljs-title function_">toUpperCase</span>();
  });
}
</code></pre>
<h3>数值千位隔断</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;123456789&#x27;</span>;

<span class="hljs-keyword">const</span> res = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\B(?=(\d{3})+(?!\d))/g</span>, <span class="hljs-string">&#x27;,&#x27;</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// 123,456,789</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","standard-built-in-objects","text-processing","string","prototype","split"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/text-processing/string/prototype/split","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/text-processing/string/prototype/split","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","PO8oM7qE_a5fQ5rLiZLB_",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1cb8,<h1>String.prototype.split()</h1>
<p><code>split()</code> 函数用于使用指定分隔符分割字符串，并返回分割后的若干个子字符串组成的数组。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js">str.<span class="hljs-title function_">split</span>( [separator [, limit]] )
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>separator</code></td>
<td>指定表示每个拆分应发生的点的字符串。<code>separator</code> 可以是一个字符串或正则表达式。 如果纯文本分隔符包含多个字符，则必须找到整个字符串来表示分割点。如果在 str 中省略或不出现分隔符，则返回的数组包含一个由整个字符串组成的元素。如果分隔符为空字符串，则将 str 原字符串中每个字符的数组形式返回。</td>
<td>string / RegExp</td>
</tr>
<tr>
<td><code>limit</code></td>
<td>可选，一个整数，限定返回的分割片段数量。当提供此参数时，<code>split</code> 方法会在指定分隔符的每次出现时分割该字符串，但在限制条目已放入数组时停止。如果在达到指定限制之前达到字符串的末尾，它可能仍然包含少于限制的条目。新数组中不返回剩下的文本。</td>
<td>number</td>
</tr>
</tbody>
</table>
<ul>
<li>找到分隔符后，将其从字符串中删除，并将子字符串的数组返回。</li>
</ul>
<ul>
<li>如果没有找到或者省略了分隔符，则该数组包含一个由整个字符串组成的元素。</li>
<li>如果分隔符为空字符串，则字符串会在每个字符之间分割。</li>
<li>如果分隔符出现在字符串的开始或结尾，或两者都分开，分别以空字符串开头，结尾或两者开始和结束。因此，如果字符串仅由一个分隔符实例组成，则该数组由两个空字符串组成。</li>
<li>如果分隔符是包含捕获括号的正则表达式，则每次分隔符匹配时，捕获括号的结果（包括任何未定义的结果）将被拼接到输出数组中。但是，并不是所有浏览器都支持此功能。</li>
<li>当被查找的字符串为空时，返回一个包含一个空字符串的数组，而不是一个空数组，如果字符串和分隔符都是空字符串，则返回一个空数组。</li>
</ul>
<h2>描述</h2>
<p>如果提供了 <code>limit</code> 参数，此函数返回的数组最多包含 <code>limit</code> 个元素。如果参数 <code>limit</code> 为负数，则该参数将被忽略掉。如果省略了 <code>limit</code>，则 <code>split()</code> 函数不会考虑长度，直到分割完毕为止。如果 <code>limit</code> 为 0，则返回空的数组。</p>
<h2>示例</h2>
<h3>代码示例</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-string">&#x27;abcd&#x27;</span>.<span class="hljs-title function_">split</span>();
<span class="hljs-comment">// [&quot;abcd&quot;]</span>
<span class="hljs-string">&#x27;abcd&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;b&#x27;</span>);
<span class="hljs-comment">// [&quot;a&quot;, &quot;cd&quot;]</span>
<span class="hljs-string">&#x27;abcd&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;a&#x27;</span>);
<span class="hljs-comment">// [&quot;&quot;, &quot;bcd&quot;]</span>
<span class="hljs-string">&#x27;abcd&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;d&#x27;</span>);
<span class="hljs-comment">// [&quot;abc&quot;, &quot;&quot;]</span>
<span class="hljs-string">&#x27;abcd&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>);
<span class="hljs-comment">// [&quot;&quot;, &quot;&quot;]</span>
<span class="hljs-string">&#x27;abcd&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);
<span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>
<span class="hljs-string">&#x27;abcd&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>);
<span class="hljs-comment">// [&quot;abcd&quot;]</span>

<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">split</span>();
<span class="hljs-comment">// [&quot;&quot;]</span>
<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);
<span class="hljs-comment">// []</span>
<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>);
<span class="hljs-comment">// [&quot;&quot;]</span>
</code></pre>
<h3>移除字符串中的空格</h3>
<p>下例中，<code>split</code> 方法会查找 0 或多个空白符接着的分号，再接着 0 或多个空白符模式的字符串，找到后，就将空白符从字符串中移除，<code>nameList</code> 是 <code>split</code> 的返回数组。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> names = <span class="hljs-string">&#x27;Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand &#x27;</span>;
<span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/\s*;\s*/</span>;
<span class="hljs-keyword">var</span> nameList = names.<span class="hljs-title function_">split</span>(re);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameList);
<span class="hljs-comment">// [&quot;Harry Trump&quot;, &quot;Fred Barney&quot;, &quot;Helen Rigby&quot;, &quot;Bill Abel&quot;, &quot;Chris Hand &quot;]</span>
</code></pre>
<h3>限制返回值中分割元素数量</h3>
<p>下例中，<code>split</code> 查找字符串中的 0 或多个空格，并返回找到的前 3 个分割元素（splits）。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> myString = <span class="hljs-string">&#x27;Hello World. How are you doing?&#x27;</span>;
<span class="hljs-keyword">var</span> splits = myString.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">3</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(splits);
<span class="hljs-comment">// [&quot;Hello&quot;, &quot;World.&quot;, &quot;How&quot;]</span>
</code></pre>
<h3>捕获括号（Capturing parentheses）</h3>
<p>如果 <code>separator</code> 包含捕获括号（capturing parentheses），则其匹配结果将会包含在返回的数组中。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> myString = <span class="hljs-string">&#x27;Hello 1 word. Sentence number 2.&#x27;</span>;
<span class="hljs-keyword">var</span> splits = myString.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/(\d)/</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(splits);
<span class="hljs-comment">// [ &quot;Hello &quot;, &quot;1&quot;, &quot; word. Sentence number &quot;, &quot;2&quot;, &quot;.&quot; ]</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

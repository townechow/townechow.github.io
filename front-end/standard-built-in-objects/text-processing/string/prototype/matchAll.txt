1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","standard-built-in-objects","text-processing","string","prototype","matchAll"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/text-processing/string/prototype/matchAll","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/text-processing/string/prototype/matchAll","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","69xt5tTZgTz4vk5gex5jT",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:Teac,<h1>String.prototype.matchAll()</h1>
<p><code>matchAll()</code> 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js">str.<span class="hljs-title function_">match</span>(regexp);
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>regexp</code></td>
<td>正则表达式，如果传参非正则会通过构造函数转换</td>
<td>RegExp</td>
</tr>
</tbody>
</table>
<h2>示例</h2>
<h3>获取字符串所有匹配项</h3>
<p>使用 <code>matchAll</code> 会得到一个迭代器的返回值，配合 <code>for...of</code>、解构赋值或者 <code>Array.from</code> 可以更方便实现功能：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;table football foosball&#x27;</span>;
<span class="hljs-keyword">const</span> regexp = <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;foo[a-z]*&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>);
<span class="hljs-keyword">const</span> matches = str.<span class="hljs-title function_">matchAll</span>(regexp);

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> match <span class="hljs-keyword">of</span> matches) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(match[<span class="hljs-number">0</span>], match.<span class="hljs-property">index</span>, match.<span class="hljs-property">index</span> + match[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>);
}

<span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(str.<span class="hljs-title function_">matchAll</span>(regexp), <span class="hljs-function"><span class="hljs-params">m</span> =&gt;</span> m[<span class="hljs-number">0</span>]);
<span class="hljs-comment">// [&#x27;football&#x27;, &#x27;foosball&#x27;]</span>
</code></pre>
<h3>捕获组的最佳途径</h3>
<p><code>matchAll</code> 的另一个亮点是更好地获取捕获组，因为当使用 <code>match</code> 和 <code>/g</code> 标志方式获取匹配信息时，捕获组会被忽略：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> regexp = <span class="hljs-regexp">/t(e)(st(\d?))/g</span>;

<span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;test1test2&#x27;</span>;

<span class="hljs-keyword">const</span> arr = str.<span class="hljs-title function_">match</span>(regexp);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);
<span class="hljs-comment">// [&#x27;test1&#x27;, &#x27;test2&#x27;]</span>
</code></pre>
<p>使用 <code>matchAll</code> 可以通过如下方式获取分组捕获：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> arr = [...str.<span class="hljs-title function_">matchAll</span>(regexp)];

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>]);
<span class="hljs-comment">// [&#x27;test1&#x27;, &#x27;e&#x27;, &#x27;st1&#x27;, &#x27;1&#x27;, index: 0, input: &#x27;test1test2&#x27;, length: 4]</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">1</span>]);
<span class="hljs-comment">// [&#x27;test2&#x27;, &#x27;e&#x27;, &#x27;st2&#x27;, &#x27;2&#x27;, index: 5, input: &#x27;test1test2&#x27;, length: 4]</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

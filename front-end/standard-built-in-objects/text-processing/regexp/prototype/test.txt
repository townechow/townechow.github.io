1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","standard-built-in-objects","text-processing","regexp","prototype","test"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/text-processing/regexp/prototype/test","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/text-processing/regexp/prototype/test","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","DaXhgscFDFZ-c1bnZdylu",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:Tf2a,<h1>RegExp.prototype.test()</h1>
<p><code>test()</code> 方法执行一个检索，用来测试正则表达式与指定的字符串是否匹配。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js">regExpObject.<span class="hljs-title function_">test</span>(str);
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>regExpObject</code></td>
<td><code>RegExp</code> 类型</td>
<td>匹配的正则表达式。</td>
</tr>
<tr>
<td><code>str</code></td>
<td><code>String</code> 类型</td>
<td>指定的字符串。将在该字符串中执行搜索。</td>
</tr>
</tbody>
</table>
<p>如果正则表达式与指定的字符串匹配 ，返回 <code>true</code>；否则 <code>false</code>。</p>
<h2>描述</h2>
<ul>
<li>值得注意的是，每次执行<code>test()</code>函数都只查找最多一个匹配，如果找到就立即返回 <code>true</code>，否则返回 <code>false</code>。</li>
<li>如果为正则表达式设置了全局标志 <code>g</code>，<code>test()</code>函数仍然只查找最多一个匹配，不过我们再次调用该对象的 <code>test()</code> 函数就可以查找下一个匹配。</li>
</ul>
<p>其原因是：如果 <code>regExpObject</code> 带有全局标志 <code>g</code>，<code>test()</code> 函数不是从字符串的开头开始查找，而是从属性 <code>regExpObject.lastIndex</code> 所指定的索引处开始查找。该属性值默认为 0，所以第一次仍然是从字符串的开头查找。当找到一个匹配时，<code>test()</code> 函数会将 <code>regExpObject.lastIndex</code> 的值改为字符串中本次匹配内容的最后一个字符的下一个索引位置。当再次执行 <code>test()</code> 函数时，将会从该索引位置处开始查找，从而找到下一个匹配。</p>
<p>因此，当我们使用 <code>test()</code> 函数执行了一次匹配之后，如果想要重新使用 <code>test()</code> 函数<strong>从头开始</strong>查找，则需要手动将 <code>regExpObject.lastIndex</code> 的值重置为 0。如果 <code>test()</code> 函数再也找不到可以匹配的文本时，该函数会自动把 <code>regExpObject.lastIndex</code> 属性重置为 0。</p>
<h2>示例</h2>
<h3>代码示例</h3>
<p>一个简单的例子，测试 &quot;hello&quot; 是否包含在字符串的最开始，返回布尔值。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;hello world!&#x27;</span>;

<span class="hljs-keyword">let</span> result = <span class="hljs-regexp">/^hello/</span>.<span class="hljs-title function_">test</span>(str);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// true</span>
</code></pre>
<h3>当设置全局标志的正则使用 <code>test()</code></h3>
<p>如果正则表达式设置了全局标志，<code>test()</code> 的执行会改变正则表达式 <code>lastIndex</code>属性。连续的执行 <code>test()</code> 方法，后续的执行将会从 <code>lastIndex</code> 处开始匹配字符串，(<code>exec()</code> 同样改变正则本身的 <code>lastIndex</code> 属性值).</p>
<p>下面的实例表现了这种行为：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/foo/g</span>;

<span class="hljs-comment">// regex.lastIndex is at 0</span>
regex.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// true</span>

<span class="hljs-comment">// regex.lastIndex is now at 3</span>
regex.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// false</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"RegExp.prototype.test"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

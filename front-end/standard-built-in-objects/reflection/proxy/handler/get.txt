1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","standard-built-in-objects","reflection","proxy","handler","get"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/reflection/proxy/handler/get","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/reflection/proxy/handler/get","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","HS3Ckhvj2A6U7stpzA1Le",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T29db,<h1>Proxy - handler.get</h1>
<p><code>handler.get()</code> 方法用于拦截对象属性的读取操作。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, {
  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, property, receiver</span>) {
    <span class="hljs-comment">// do something</span>
  },
});
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>target</code></td>
<td style="text-align:left">目标对象</td>
<td style="text-align:left">object</td>
</tr>
<tr>
<td style="text-align:left"><code>property</code></td>
<td style="text-align:left">被获取的属性名</td>
<td style="text-align:left">string</td>
</tr>
<tr>
<td style="text-align:left"><code>receiver</code></td>
<td style="text-align:left">Proxy 或者继承 Proxy 的对象</td>
<td style="text-align:left">object</td>
</tr>
</tbody>
</table>
<h2>说明</h2>
<h3>拦截</h3>
<p>该方法会拦截目标对象的以下操作：</p>
<ul>
<li>访问属性：<code>proxy[foo]</code> 和 <code>proxy.bar</code></li>
<li>访问原型链上的属性：<code>Object.create(proxy)[foo]</code></li>
<li><code>Reflect.get()</code></li>
</ul>
<h3>约束</h3>
<p>如果违背了以下的约束，<code>proxy</code> 会抛出 TypeError：</p>
<ul>
<li>如果要访问的目标属性是不可写以及不可配置的，则返回的值必须与该目标属性的值相同</li>
<li>如果要访问的目标属性没有配置访问方法，即 <code>get</code> 方法是 <code>undefined</code> 的，则返回值必须为 <code>undefined</code></li>
</ul>
<h2>示例</h2>
<p>以下代码演示如何拦截属性值的读取操作：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(
  {},
  {
    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, prop, receiver</span>) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Called:&#x27;</span> + prop);
      <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;
    },
  }
);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">foo</span>);
<span class="hljs-comment">// foo</span>
</code></pre>
<p>以下是违反约束的情况：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = {};

<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(foo, <span class="hljs-string">&#x27;a&#x27;</span>, {
  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">value</span>: <span class="hljs-number">10</span>,
  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,
});

<span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(foo, {
  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, prop</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;b&#x27;</span>;
  },
});

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">a</span>);
<span class="hljs-comment">// Uncaugt TypeError: &#x27;get&#x27; on proxy: property &#x27;a&#x27; is a read-only and non-configurable data</span>
<span class="hljs-comment">// property on the proxy target but the proxy did not return its actual value</span>
</code></pre>
<h3>数组读取负数的索引</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> createArr = <span class="hljs-keyword">function</span> (<span class="hljs-params">...elements</span>) {
  <span class="hljs-keyword">const</span> handler = {
    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, propKey, receiver</span>) {
      <span class="hljs-keyword">const</span> index = <span class="hljs-title class_">Number</span>(propKey);

      <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) {
        propKey = <span class="hljs-title class_">String</span>(target.<span class="hljs-property">length</span> + index);
      }

      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, propKey, receiver);
    },
  };

  <span class="hljs-keyword">let</span> target = [];
  target.<span class="hljs-title function_">push</span>(...elements);
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);
};

<span class="hljs-keyword">const</span> arr = <span class="hljs-title function_">createArr</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[-<span class="hljs-number">1</span>]);
<span class="hljs-comment">// c</span>
</code></pre>
<h3>链式操作</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> pipe = <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) {
  <span class="hljs-keyword">const</span> stack = [];

  <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(
    {},
    {
      <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">pipeObject, fnName</span>) {
        <span class="hljs-keyword">if</span> (fnName === <span class="hljs-string">&#x27;get&#x27;</span>) {
          <span class="hljs-keyword">return</span> stack.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val, fn</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(val);
          }, value);
        }
        stack.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">window</span>[fnName]);
        <span class="hljs-keyword">return</span> proxy;
      },
    }
  );

  <span class="hljs-keyword">return</span> proxy;
};

<span class="hljs-keyword">const</span> <span class="hljs-title function_">double</span> = (<span class="hljs-params">x</span>) =&gt; x * <span class="hljs-number">2</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">pow</span> = (<span class="hljs-params">x</span>) =&gt; x * x;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">reverseInt</span> = (<span class="hljs-params">x</span>) =&gt; x.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>) | <span class="hljs-number">0</span>;

<span class="hljs-title function_">pipe</span>(<span class="hljs-number">3</span>).<span class="hljs-property">double</span>.<span class="hljs-property">pow</span>.<span class="hljs-property">reverseInt</span>.<span class="hljs-property">get</span>;
<span class="hljs-comment">// 63</span>
</code></pre>
<h3>生成 DOM 节点</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> dom = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(
  {},
  {
    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, property</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">attrs = {}, ...children</span>) {
        <span class="hljs-keyword">const</span> ele = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(property);

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> prop <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(attrs)) {
          ele.<span class="hljs-title function_">setAttribute</span>(prop, attrs[prop]);
        }

        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> child <span class="hljs-keyword">of</span> children) {
          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> child === <span class="hljs-string">&#x27;string&#x27;</span>) {
            child = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(child);
          }
          ele.<span class="hljs-title function_">appendChild</span>(child);
        }

        <span class="hljs-keyword">return</span> ele;
      };
    },
  }
);

<span class="hljs-keyword">const</span> el = dom.<span class="hljs-title function_">div</span>(
  {},
  <span class="hljs-string">&#x27;Hello, my name is &#x27;</span>,
  dom.<span class="hljs-title function_">a</span>({ <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;//example.com&#x27;</span> }, <span class="hljs-string">&#x27;Mark&#x27;</span>),
  <span class="hljs-string">&#x27;. I like:&#x27;</span>,
  dom.<span class="hljs-title function_">ul</span>({}, dom.<span class="hljs-title function_">li</span>({}, <span class="hljs-string">&#x27;The web&#x27;</span>), dom.<span class="hljs-title function_">li</span>({}, <span class="hljs-string">&#x27;Food&#x27;</span>), dom.<span class="hljs-title function_">li</span>({}, <span class="hljs-string">&quot;…actually that&#x27;s it&quot;</span>))
);

<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(el);
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

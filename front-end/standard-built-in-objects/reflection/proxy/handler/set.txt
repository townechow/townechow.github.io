1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","standard-built-in-objects","reflection","proxy","handler","set"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/reflection/proxy/handler/set","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/reflection/proxy/handler/set","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","CizOJSkn9Z73KTT1NhjN_",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1ed3,<h1>Proxy - handler.set</h1>
<p><code>handler.set()</code> 方法用于拦截对象属性的赋值操作。</p>
<h2>语法</h2>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, {
  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, property, value, receiver</span>) {
    <span class="hljs-comment">// do something</span>
  },
});
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>target</code></td>
<td>目标对象</td>
<td>object</td>
</tr>
<tr>
<td><code>property</code></td>
<td>属性名</td>
<td>string 或 symbol</td>
</tr>
<tr>
<td><code>value</code></td>
<td>新属性值</td>
<td>any</td>
</tr>
<tr>
<td><code>receiver</code></td>
<td>最初被调用的对象</td>
<td>object</td>
</tr>
</tbody>
</table>
<h3>返回值</h3>
<p><code>set</code> 方法返回一个布尔值，表示是否设置成功。</p>
<h2>说明</h2>
<h3>拦截</h3>
<p>该方法会拦截目标对象的以下操作：</p>
<ul>
<li>指定属性值：<code>proxy[foo] = bar</code> 和 <code>proxy.foo = bar</code></li>
<li>指定继承者的属性值：<code>Object.create(proxy)[foo] = bar</code></li>
<li><code>Reflect.set()</code></li>
</ul>
<h3>约束</h3>
<p>如果违背了以下的约束，<code>proxy</code> 会抛出 TypeError 异常：</p>
<ul>
<li>如果目标属性是一个不可写及不可配置的数据属性，则 Proxy 对这个属性的 <code>set</code> 代理不会生效，且不能改变它的值</li>
<li>如果目标属性没有配置存储方法，即 <code>[[Set]]</code> 属性的是 <code>undefined</code>，则不能设置它的值</li>
<li>在严格模式下，如果 <code>set</code> 方法返回 <code>false</code>，那么也会抛出一个 TypeError 异常</li>
</ul>
<h2>示例</h2>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(
  {},
  {
    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, prop, value, receiver</span>) {
      target[prop] = value;
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;property set:&#x27;</span> + prop + <span class="hljs-string">&#x27; = &#x27;</span> + value);
      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    },
  }
);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span> <span class="hljs-keyword">in</span> proxy);
<span class="hljs-comment">// false</span>

proxy.<span class="hljs-property">foo</span> = <span class="hljs-number">100</span>;
<span class="hljs-comment">// &#x27;property set:&#x27; foo = 100</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span> <span class="hljs-keyword">in</span> proxy);
<span class="hljs-comment">// true</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">foo</span>);
<span class="hljs-comment">// 100</span>
</code></pre>
<h3>数据校验</h3>
<p>假设 <code>Person</code> 对象有一个 <code>age</code> 属性，该属性应该是一个不大于 200 的整数，那么可以使用 <code>Proxy</code> 保证 <code>age</code> 的属性值符合要求。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> validator = {
  <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, prop, value</span>) {
    <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">&#x27;age&#x27;</span>) {
      <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(value)) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;The age is not an integer&#x27;</span>);
      }
      <span class="hljs-keyword">if</span> (value &gt; <span class="hljs-number">200</span>) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RangeError</span>(<span class="hljs-string">&#x27;The age seems invalid&#x27;</span>);
      }
    }

    <span class="hljs-comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span>
    target[prop] = value;
  },
};

<span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>({}, validator);

person.<span class="hljs-property">age</span> = <span class="hljs-number">100</span>;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>);
<span class="hljs-comment">// 100</span>

person.<span class="hljs-property">age</span> = <span class="hljs-string">&#x27;YOUNG&#x27;</span>;
<span class="hljs-comment">// Uncaught TypeError: The age is not an integer</span>

person.<span class="hljs-property">age</span> = <span class="hljs-number">300</span>;
<span class="hljs-comment">// Uncaught RangeError: The age seems invalid</span>
</code></pre>
<h3>禁止读写内部属性</h3>
<p>下面示例代码，只要读写的属性名第一个字符不是下划线，一律抛错，从而达到禁止读写内部属性的目的。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> invariant = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, action</span>) {
  <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;_&#x27;</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Invalid attempt to <span class="hljs-subst">${action}</span> private &quot;<span class="hljs-subst">${key}</span>&quot; property`</span>);
  }
};

<span class="hljs-keyword">const</span> handler = {
  <span class="hljs-title function_">get</span>(<span class="hljs-params">target, prop</span>) {
    <span class="hljs-title function_">invariant</span>(prop, <span class="hljs-string">&#x27;get&#x27;</span>);
    <span class="hljs-keyword">return</span> target[prop];
  },
  <span class="hljs-title function_">set</span>(<span class="hljs-params">target, prop, value</span>) {
    <span class="hljs-title function_">invariant</span>(prop, <span class="hljs-string">&#x27;set&#x27;</span>);
    target[prop] = value;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
  },
};

<span class="hljs-keyword">const</span> target = {};
<span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">_prop</span>);
<span class="hljs-comment">// Uncaught Error: Invalid attempt to get private &quot;_prop&quot; property</span>

proxy.<span class="hljs-property">_prop</span> = <span class="hljs-string">&#x27;c&#x27;</span>;
<span class="hljs-comment">// Uncaught Error: Invalid attempt to set private &quot;_prop&quot; property</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","standard-built-in-objects","indexed-collections","array","prototype","iteration-methods","map"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/indexed-collections/array/prototype/iteration-methods/map","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/indexed-collections/array/prototype/iteration-methods/map","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Rv0ISIScWZlEXwEtQsSNE",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1833,<h1>Array.prototype.map()</h1>
<p><code>Array.prototype.map()</code> 根据传递的转换函数，更新给定数组中的每个值，并返回一个相同长度的新数组。它接受一个回调函数作为参数，用以执行转换过程。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> new_arr = old_arr.<span class="hljs-title function_">map</span>(callback = <span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue, index, array</span>){} [, thisArg])
</code></pre>
<p>类型声明：</p>
<pre class="hljs"><code class="language-ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Array</span>&lt;T&gt; {
  map&lt;U&gt;(<span class="hljs-attr">callbackfn</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">value</span>: T, <span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">array</span>: T[]</span>) =&gt;</span> U, <span class="hljs-attr">thisArg</span>?: <span class="hljs-built_in">any</span>): U[];
}
</code></pre>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">callbackFunc</td>
<td style="text-align:left">用于遍历数组成员时执行的回调函数</td>
<td style="text-align:left">function</td>
</tr>
<tr>
<td style="text-align:left">thisArg</td>
<td style="text-align:left">执行回调函数的 <code>this</code> 值</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p><code>callback</code> 函数的参数：</p>
<ul>
<li><code>currentValue</code>：当前数组中处理的元素</li>
<li><code>index</code>：数组中正处理的当前元素的索引</li>
<li><code>array</code>：被调用的数组</li>
</ul>
<p>返回值：</p>
<p>返回回调函数的结果，如果未设定返回值，则返回当前遍历的数组成员。</p>
<h2>方法说明</h2>
<ul>
<li>该方法按升序为数组中含有效值的每一项执行一次回调函数，那些已删除（使用 <code>delete</code> 方法等情况）或者未初始化的项将被跳过（但不包括那些值为 <code>undefined</code> 的项，例如在稀疏数组中）。</li>
<li>使用 <code>map</code> 方法处理数组时，数组元素的范围是在 <code>callback</code> 方法第一次调用之前就已经确定了。在 <code>map</code> 方法执行的过程中：原数组中新增加的元素将不会被 <code>callback</code> 访问到；若已经存在的元素被改变或删除了，则它们的传递到 <code>callback</code> 的值是 <code>map</code> 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。</li>
</ul>
<h2>代码示例</h2>
<p>下面的代码创建了一个新数组，值为原数组中对应数字的平方根。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>];
<span class="hljs-keyword">const</span> roots = numbers.<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">sqrt</span>);

<span class="hljs-comment">// Math.sqrt(x)</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(numbers);
<span class="hljs-comment">// [1, 4, 9]</span>
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(roots);
<span class="hljs-comment">// [1, 2, 3],</span>
</code></pre>
<h3>格式化对象数组</h3>
<p>以下代码将一个包含对象的数组用以创建一个包含新重新格式化对象的新数组。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> kvArray = [
  {
    <span class="hljs-attr">key</span>: <span class="hljs-number">1</span>,
    <span class="hljs-attr">value</span>: <span class="hljs-number">10</span>,
  },
  {
    <span class="hljs-attr">key</span>: <span class="hljs-number">2</span>,
    <span class="hljs-attr">value</span>: <span class="hljs-number">20</span>,
  },
  {
    <span class="hljs-attr">key</span>: <span class="hljs-number">3</span>,
    <span class="hljs-attr">value</span>: <span class="hljs-number">30</span>,
  },
];

<span class="hljs-keyword">const</span> reformattedArray = kvArray.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) {
  <span class="hljs-keyword">let</span> rObj = {};
  rObj[obj.<span class="hljs-property">key</span>] = obj.<span class="hljs-property">value</span>;
  <span class="hljs-keyword">return</span> rObj;
});

<span class="hljs-comment">// reformattedArray 数组为： [{1: 10}, {2: 20}, {3: 30}],</span>

<span class="hljs-comment">// kvArray 数组未被修改:</span>
<span class="hljs-comment">// [{key: 1, value: 10},</span>
<span class="hljs-comment">//  {key: 2, value: 20},</span>
<span class="hljs-comment">//  {key: 3, value: 30}]</span>
</code></pre>
<h3>回调函数参数</h3>
<p>经典面试题。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> answer = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>].<span class="hljs-title function_">map</span>(<span class="hljs-built_in">parseInt</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(answer);
<span class="hljs-comment">// [1, NaN, NaN]</span>
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener noreferrer nofollow">MDN: Array.prototype.map</a></li>
<li><a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.es5.d.ts" target="_blank" rel="noopener noreferrer nofollow">TypeScript: lib.es5.d.ts</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

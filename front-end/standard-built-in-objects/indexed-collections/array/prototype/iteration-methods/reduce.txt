1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","standard-built-in-objects","indexed-collections","array","prototype","iteration-methods","reduce"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/indexed-collections/array/prototype/iteration-methods/reduce","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/indexed-collections/array/prototype/iteration-methods/reduce","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","fFwtt8wbsGUGzwZN0jjFR",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T6436,<h1>Array.prototype.reduce</h1>
<p><code>Array.prototype.reduce()</code> 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。对空数组时不会执行回调函数。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs"><code class="language-js">arr.<span class="hljs-title function_">reduce</span>(callbackfn [, initialValue]);
</code></pre>
<p>类型声明</p>
<pre class="hljs"><code class="language-ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Array</span>&lt;T&gt; {
  <span class="hljs-title function_">reduce</span>(
    <span class="hljs-attr">callbackfn</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">previousValue</span>: T, <span class="hljs-attr">currentValue</span>: T, <span class="hljs-attr">currentIndex</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">array</span>: <span class="hljs-keyword">readonly</span> T[]</span>) =&gt;</span> T
  ): T;

  <span class="hljs-title function_">reduce</span>(
    <span class="hljs-attr">callbackfn</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">previousValue</span>: T, <span class="hljs-attr">currentValue</span>: T, <span class="hljs-attr">currentIndex</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">array</span>: <span class="hljs-keyword">readonly</span> T[]</span>) =&gt;</span> T,
    <span class="hljs-attr">initialValue</span>: T
  ): T;

  reduce&lt;U&gt;(
    <span class="hljs-attr">callbackfn</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">previousValue</span>: U, <span class="hljs-attr">currentValue</span>: T, <span class="hljs-attr">currentIndex</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">array</span>: T[]</span>) =&gt;</span> U,
    <span class="hljs-attr">initialValue</span>: U
  ): U;
}
</code></pre>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">callbackfn</td>
<td style="text-align:left">回调函数，用于遍历数组成员时执行</td>
<td style="text-align:left">function</td>
</tr>
<tr>
<td style="text-align:left">initialValue</td>
<td style="text-align:left">（可选）累加器初始值，用作第一个调用回调函数的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用将报错。</td>
<td style="text-align:left">any</td>
</tr>
</tbody>
</table>
<p><code>callbackfn</code> 函数的参数：</p>
<ul>
<li><code>previousValue</code>：累加器累加回调的返回值，它是上一次调用回调时返回的累积值，或 <code>initialValue</code></li>
<li><code>currentValue</code>：当前数组中处理的元素</li>
<li><code>index</code>：数组中正处理的当前元素的索引</li>
<li><code>array</code>：被调用的数组</li>
</ul>
<p>返回值：</p>
<p>返回函数累计处理的结果。</p>
<h2>方法说明</h2>
<p><code>reduce()</code> 方法为数组中的每一个元素依次执行 <code>callback</code> 回调函数，不包括数组中被删除或从未被赋值的元素。</p>
<p>回调函数第一次执行时，<code>acc</code> 和 <code>currentValue</code> 的取值有两种情况：</p>
<ul>
<li>回调函数参数取值问题
<ul>
<li>提供 <code>initialValue</code>，累加器 <code>acc</code> 取值为 <code>initialValue</code>，<code>currentValue</code> 取数组中的第一个值</li>
<li>没有提供 <code>initialValue</code>，累加器 <code>acc</code> &lt;strong style=&quot;color:red&quot;&gt;取数组中的第一个值作为初始值&lt;/strong&gt;，<code>currentValue</code> 取数组中的第二个值。</li>
</ul>
</li>
<li>回调函数调用问题
<ul>
<li>如果提供 <code>initialValue</code>，从索引 0 开始执行回调函数。</li>
<li>如果没有提供 <code>initialValue</code>，<code>reduce</code> 会从索引 1 的地方开始执行回调函数，跳过第一个索引。</li>
<li>如果数组为空且没有提供 <code>initialValue</code>，会抛出 <code>TypeError</code> 。</li>
<li>如果数组仅有一个元素（无论位置如何）并且没有提供 <code>initialValue</code>， 或者有提供 <code>initialValue</code> 但是数组为空，那么此唯一值将被返回并且 <code>callback</code> 不会被执行。</li>
</ul>
</li>
</ul>
<p>假如运行下段代码：</p>
<pre class="hljs"><code class="language-js">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, val, index, arr</span>) =&gt;</span> acc + val);
</code></pre>
<p>回调函数被调用四次，每次调用的参数和返回值如下表所示。</p>
<table>
<thead>
<tr>
<th style="text-align:left">callback 回调函数</th>
<th style="text-align:left">acc 累加器</th>
<th style="text-align:left">val 当前值</th>
<th style="text-align:left">index 当前索引</th>
<th style="text-align:left">arr</th>
<th style="text-align:left">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">first call</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">second call</td>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">2</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">3</td>
</tr>
<tr>
<td style="text-align:left">third call</td>
<td style="text-align:left">3</td>
<td style="text-align:left">3</td>
<td style="text-align:left">3</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">6</td>
</tr>
<tr>
<td style="text-align:left">fourth call</td>
<td style="text-align:left">6</td>
<td style="text-align:left">4</td>
<td style="text-align:left">4</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">10</td>
</tr>
</tbody>
</table>
<p><code>reduce()</code> 方法最终的返回值为 10。</p>
<p>如果你打算提供一个初始值作为 <code>reduce</code> 方法的第二个参数，以下是运行过程及结果。</p>
<pre class="hljs"><code class="language-js">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, val, index, arr</span>) =&gt;</span> accumulator + currentValue, <span class="hljs-number">10</span>);
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">callback 回调函数</th>
<th style="text-align:left">acc 累加器</th>
<th style="text-align:left">val 当前值</th>
<th style="text-align:left">index 当前索引</th>
<th style="text-align:left">arr</th>
<th style="text-align:left">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">first call</td>
<td style="text-align:left">10</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">second call</td>
<td style="text-align:left">10</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">11</td>
</tr>
<tr>
<td style="text-align:left">third call</td>
<td style="text-align:left">11</td>
<td style="text-align:left">2</td>
<td style="text-align:left">2</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">13</td>
</tr>
<tr>
<td style="text-align:left">fourth call</td>
<td style="text-align:left">13</td>
<td style="text-align:left">3</td>
<td style="text-align:left">3</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">16</td>
</tr>
<tr>
<td style="text-align:left">fifth call</td>
<td style="text-align:left">16</td>
<td style="text-align:left">4</td>
<td style="text-align:left">4</td>
<td style="text-align:left">[0, 1, 2, 3, 4]</td>
<td style="text-align:left">20</td>
</tr>
</tbody>
</table>
<p><code>reduce()</code> 方法最终的返回值为 20。</p>
<h2>代码示例</h2>
<ul>
<li>将数组转为对象</li>
<li>展开更大的数组</li>
<li>在一次遍历中进行两次计算</li>
<li>将映射和过滤函数组合</li>
<li>按顺序运行异步函数</li>
</ul>
<h3>聚合为数字</h3>
<p>数组成员为数字类型时。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> res = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> acc + item, <span class="hljs-number">0</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// 15</span>
</code></pre>
<p>数组成员为对象类型时。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> arr = [{ <span class="hljs-attr">total</span>: <span class="hljs-number">1</span> }, { <span class="hljs-attr">total</span>: <span class="hljs-number">2</span> }, { <span class="hljs-attr">total</span>: <span class="hljs-number">3</span> }, { <span class="hljs-attr">total</span>: <span class="hljs-number">4</span> }, { <span class="hljs-attr">total</span>: <span class="hljs-number">5</span> }];

<span class="hljs-keyword">const</span> res = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, { total }</span>) =&gt;</span> acc + total, <span class="hljs-number">0</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// 15</span>
</code></pre>
<h3>聚合为字符串</h3>
<p>将数组的每项转换为固定格式的字符串，每项直接以分号作为分隔。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> arr = [
  { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> },
  { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">2</span> },
  { <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">3</span> },
];

<span class="hljs-keyword">const</span> res = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, { key, value }</span>) =&gt;</span> acc + <span class="hljs-string">`<span class="hljs-subst">${key}</span>=<span class="hljs-subst">${value}</span>&amp;`</span>, <span class="hljs-string">&#x27;?&#x27;</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// &quot;?foo=1&amp;bar=2&amp;baz=3&amp;&quot;</span>
</code></pre>
<h3>聚合为对象</h3>
<p>只要目标是将数组聚合为唯一的元素时，都可以考虑使用 reduce</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> arr = [
  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;foo&#x27;</span> },
  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;bar&#x27;</span> },
  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;baz&#x27;</span> },
];

<span class="hljs-keyword">const</span> res = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, { id, type, name }</span>) =&gt;</span> {
  acc[id] = { type, name };
  <span class="hljs-keyword">return</span> acc;
}, {});

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// { 1: { name: &#x27;foo&#x27;, type: &#x27;a&#x27;}, 2: { name: &#x27;bar&#x27;, type: &#x27;b&#x27;}, { name: &#x27;baz&#x27;, type: &#x27;c&#x27; }}</span>
</code></pre>
<h3>初始值的必要性</h3>
<p>提供初始值通常更安全。</p>
<p>没有提供初始值。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">maxCallback</span> = (<span class="hljs-params"> pre, current </span>) =&gt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>( pre.<span class="hljs-property">x</span>, current.<span class="hljs-property">x</span> )

[{ <span class="hljs-attr">x</span>: <span class="hljs-number">22</span>}, { <span class="hljs-attr">x</span>: <span class="hljs-number">42</span>}].<span class="hljs-title function_">reduce</span>(maxCallback)
<span class="hljs-comment">// 42</span>

[{ <span class="hljs-attr">x</span>: <span class="hljs-number">22</span>}].<span class="hljs-title function_">reduce</span>(maxCallback)
<span class="hljs-comment">// { x: 22 }</span>

[].<span class="hljs-title function_">reduce</span>(maxCallback)
<span class="hljs-comment">// TypeError</span>
</code></pre>
<p>提供初始值。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">maxCallback</span> = (<span class="hljs-params"> max, current </span>) =&gt; <span class="hljs-title class_">Math</span>,<span class="hljs-title function_">max</span>( max, current )

[{ <span class="hljs-attr">x</span>: <span class="hljs-number">22</span> }, { <span class="hljs-attr">x</span>: <span class="hljs-number">42</span> }].<span class="hljs-title function_">map</span>( <span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-property">x</span> ).<span class="hljs-title function_">reduce</span>( maxCallback2, -<span class="hljs-title class_">Infinity</span> );
</code></pre>
<h3>数组求和、求积和最大值</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 数组求和</span>
<span class="hljs-keyword">const</span> sum = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc + cur, <span class="hljs-number">0</span>);
<span class="hljs-comment">// 6</span>

<span class="hljs-comment">// 数组求积</span>
<span class="hljs-keyword">const</span> product = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a * b, <span class="hljs-number">1</span>);
<span class="hljs-comment">// 120</span>

<span class="hljs-comment">// 数组最大值</span>
<span class="hljs-keyword">const</span> max = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> (a &gt; b ? a : b));
<span class="hljs-comment">// 5</span>
</code></pre>
<h3>数组元素</h3>
<p>找出长度最长的数组元素。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">findLongest</span> = (<span class="hljs-params">entries</span>) =&gt;
  entries.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> (cur.<span class="hljs-property">length</span> &gt; prev.<span class="hljs-property">length</span> ? cur : prev), <span class="hljs-string">&#x27;&#x27;</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">findLongest</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;ab&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;bcd&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6785</span>, <span class="hljs-number">4</span>]));
<span class="hljs-comment">// &#x27;bcd&#x27;</span>
</code></pre>
<h3>二维数组扁平化</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> arr = [
  [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],
  [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>],
  [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>],
];

<span class="hljs-keyword">const</span> res = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.<span class="hljs-title function_">concat</span>(b), []);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
<span class="hljs-comment">// [0, 1, 2, 3, 4, 5]</span>
</code></pre>
<p>你也可以写成箭头函数的形式：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> flattened = [
  [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],
  [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>],
  [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>],
].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc.<span class="hljs-title function_">concat</span>(cur), []);
</code></pre>
<h3>计算数组成员次数</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> names = [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Tiff&#x27;</span>, <span class="hljs-string">&#x27;Bruce&#x27;</span>, <span class="hljs-string">&#x27;Alice&#x27;</span>];

<span class="hljs-keyword">const</span> countedNames = names.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">allNames, name</span>) =&gt;</span> {
  <span class="hljs-keyword">if</span> (name <span class="hljs-keyword">in</span> allNames) {
    allNames[name]++;
  } <span class="hljs-keyword">else</span> {
    allNames[name] = <span class="hljs-number">1</span>;
  }
  <span class="hljs-keyword">return</span> allNames;
}, {});

<span class="hljs-comment">// { &#x27;Alice&#x27;: 2, &#x27;Bob&#x27;: 1, &#x27;Tiff&#x27;: 1, &#x27;Bruce&#x27;: 1 }</span>
</code></pre>
<h3>单次遍历多次计算</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0.3</span>, <span class="hljs-number">1.2</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">3.2</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">0.4</span>];

<span class="hljs-keyword">function</span> <span class="hljs-title function_">reduceMaxMin</span>(<span class="hljs-params">acc, value</span>) {
  reuturn {
    <span class="hljs-attr">min</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(acc.<span class="hljs-property">min</span>, value),
    <span class="hljs-attr">max</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(acc.<span class="hljs-property">max</span>, value)
  }
}

<span class="hljs-keyword">const</span> initMinMax = {
  <span class="hljs-attr">min</span>: <span class="hljs-title class_">Number</span>.<span class="hljs-property">MIN_VALUE</span>,
  <span class="hljs-attr">max</span>: <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>
}

<span class="hljs-keyword">const</span> minMax = arr.<span class="hljs-title function_">reduce</span>(reduceMaxMin, initMinMax);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(minMax);
<span class="hljs-comment">// { min: 0.2, max: 5.5}</span>
</code></pre>
<h2>兼容性代码</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">reduce</span>) {
  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;reduce&#x27;</span>, {
    <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>) {
      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> === <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Array.prototype.reduce called on null or undefined&#x27;</span>);
      }

      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback !== <span class="hljs-string">&#x27;function&#x27;</span>) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(callback + <span class="hljs-string">&#x27; is not a function&#x27;</span>);
      }

      <span class="hljs-comment">// 将数组对象化</span>
      <span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>(<span class="hljs-variable language_">this</span>);

      <span class="hljs-keyword">const</span> len = obj.<span class="hljs-property">length</span> &gt;&gt;&gt; <span class="hljs-number">0</span>;

      <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;
      <span class="hljs-keyword">let</span> accumulator;

      <span class="hljs-comment">// 处理累加器（也就是 reduce 方法第二个参数）</span>
      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">2</span>) {
        <span class="hljs-comment">// 累加器</span>
        accumulator = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>];
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">while</span> (index &lt; len &amp;&amp; !(index <span class="hljs-keyword">in</span> obj)) {
          index++;
        }

        <span class="hljs-keyword">if</span> (index &gt;= len) {
          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Reduce of empty array with no initial value&#x27;</span>);
        }

        accumulator = obj[index++];
      }

      <span class="hljs-comment">// 走有累加器的那种实现</span>
      <span class="hljs-keyword">while</span> (index &lt; len) {
        <span class="hljs-keyword">if</span> (index <span class="hljs-keyword">in</span> obj) {
          accumulator = <span class="hljs-title function_">callback</span>(accumulator, obj[index], index, obj);
        }

        index++;
      }

      <span class="hljs-keyword">return</span> accumulator;
    },
  });
}
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener noreferrer nofollow">MDN: Array.prototype.reduce</a></li>
<li><a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.es5.d.ts" target="_blank" rel="noopener noreferrer nofollow">TypeScript: lib.es5.d.ts</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

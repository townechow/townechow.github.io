1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","standard-built-in-objects","indexed-collections","array","prototype","accessor-methods","flat"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/indexed-collections/array/prototype/accessor-methods/flat","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/indexed-collections/array/prototype/accessor-methods/flat","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","aP3kLeywQPxG2XbxWVuc2",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1d19,<h1>Array.prototype.flat()</h1>
<p>⭐️ <code>ES2019(ES10)新特性</code></p>
<p><code>Array.prototype.flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>arr.<span class="hljs-title function_">flat</span>([depth]);
</code></pre>
<p>类型声明：</p>
<pre class="hljs language-ts"  style=--lang:"ts" ><code><span class="hljs-keyword">type</span> <span class="hljs-title class_">FlatArray</span>&lt;<span class="hljs-title class_">Arr</span>, <span class="hljs-title class_">Depth</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>&gt; = {
  <span class="hljs-attr">done</span>: <span class="hljs-title class_">Arr</span>;
  <span class="hljs-attr">recur</span>: <span class="hljs-title class_">Arr</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReadonlyArray</span>&lt;infer <span class="hljs-title class_">InnerArr</span>&gt;
    ? <span class="hljs-title class_">FlatArray</span>&lt;
        <span class="hljs-title class_">InnerArr</span>,
        [-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>][<span class="hljs-title class_">Depth</span>]
      &gt;
    : <span class="hljs-title class_">Arr</span>;
}[<span class="hljs-title class_">Depth</span> <span class="hljs-keyword">extends</span> -<span class="hljs-number">1</span> ? <span class="hljs-string">&#x27;done&#x27;</span> : <span class="hljs-string">&#x27;recur&#x27;</span>];

<span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReadonlyArray</span>&lt;T&gt; {
  flat&lt;A, D <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>&gt;(<span class="hljs-attr">this</span>: A, <span class="hljs-attr">depth</span>?: D): <span class="hljs-title class_">FlatArray</span>&lt;A, D&gt;[];
}

<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Array</span>&lt;T&gt; {
  flat&lt;A, D <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>&gt;(<span class="hljs-attr">this</span>: A, <span class="hljs-attr">depth</span>?: D): <span class="hljs-title class_">FlatArray</span>&lt;A, D&gt;[];
}
</code></pre>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">depth</td>
<td style="text-align:left">（可选参数）指定要提取嵌套数组的结构深度，默认值为 1</td>
<td style="text-align:left">number</td>
</tr>
</tbody>
</table>
<p>返回值：</p>
<p>返回一个包含将数组与子数组种所有元素的新数组。</p>
<h2>代码示例</h2>
<h3>基本用法</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]];

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-title function_">flat</span>());
<span class="hljs-comment">// exprected output: [0, 1, 2, 3, 4]</span>

<span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [[[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]];

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-title function_">flat</span>());
<span class="hljs-comment">// exprected output: [0, 1, 2, [ 3, 4]];</span>
</code></pre>
<h3>扁平化嵌套数组</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]];
arr1.<span class="hljs-title function_">flat</span>();
<span class="hljs-comment">// [1, 2, 3, 4]</span>

<span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]];
arr2.<span class="hljs-title function_">flat</span>();
<span class="hljs-comment">// [1, 2, 3, 4, [5, 6]]</span>

<span class="hljs-keyword">const</span> arr3 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]];
arr3.<span class="hljs-title function_">flat</span>(<span class="hljs-number">2</span>);
<span class="hljs-comment">// [1, 2, 3, 4, 5, 6]</span>

<span class="hljs-comment">//使用 Infinity，可展开任意深度的嵌套数组</span>
<span class="hljs-keyword">const</span> arr4 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]]]]];
arr4.<span class="hljs-title function_">flat</span>(<span class="hljs-title class_">Infinity</span>);
<span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
</code></pre>
<h3>扁平化与数组空项</h3>
<p><code>flat()</code> 方法将会移除数组中的空项：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>connst arr4 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, , <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];

arr4.<span class="hljs-title function_">flat</span>();
<span class="hljs-comment">// [1, 2, 4, 5]</span>
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener noreferrer nofollow">MDN: Array.prototype.flat</a></li>
<li><a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.es2019.array.d.ts" target="_blank" rel="noopener noreferrer nofollow">TypeScript: lib.es2019.array.d.ts</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

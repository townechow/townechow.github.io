1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","standard-built-in-objects","indexed-collections","array","prototype","accessor-methods","concat"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/indexed-collections/array/prototype/accessor-methods/concat","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/indexed-collections/array/prototype/accessor-methods/concat","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","iynjnrK4zxluEcoEPtA-T",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2012,<h1>Array.prototype.concat()</h1>
<p><code>Array.prototype.concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> new_array = old_array.<span class="hljs-title function_">concat</span>( item1[, itemN ] )
</code></pre>
<p>类型声明：</p>
<pre class="hljs"><code class="language-ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConcatArray</span>&lt;T&gt; {
  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;
  <span class="hljs-keyword">readonly</span> [<span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>]: T;
  <span class="hljs-title function_">join</span>(<span class="hljs-attr">separator</span>?: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>;
  <span class="hljs-title function_">slice</span>(<span class="hljs-attr">start</span>?: <span class="hljs-built_in">number</span>, <span class="hljs-attr">end</span>?: <span class="hljs-built_in">number</span>): T[];
}

<span class="hljs-keyword">interface</span> <span class="hljs-title class_">Array</span>&lt;T&gt; {
  <span class="hljs-title function_">concat</span>(...<span class="hljs-attr">items</span>: <span class="hljs-title class_">ConcatArray</span>&lt;T&gt;[]): T[];

  <span class="hljs-title function_">concat</span>(...<span class="hljs-attr">items</span>: (T | <span class="hljs-title class_">ConcatArray</span>&lt;T&gt;)[]): T[];
}
</code></pre>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">item1</td>
<td style="text-align:left">添加到当前数组末尾处的数据项</td>
<td style="text-align:left">any</td>
</tr>
<tr>
<td style="text-align:left">itemN</td>
<td style="text-align:left">要添加到当前数组末尾处的其他项，可以有多个。</td>
<td style="text-align:left">any</td>
</tr>
</tbody>
</table>
<p>返回值：</p>
<p>返回合并后新的 <code>Array</code> 实例。</p>
<h2>方法说明</h2>
<p><code>concat</code> 方法创建一个新的数组，它由被调用的对象中的元素组成，每个参数的顺序依次是该参数的元素（如果参数是数组）或参数本身（如果参数不是数组）。它不会递归到嵌套数组参数中。</p>
<p><code>concat</code> 方法不会改变 <code>this</code> 或任何作为参数提供的数组，而是返回一个<strong>浅拷贝</strong>，它包含与原始数组相结合的相同元素的副本。 原始数组的元素将复制到新数组中，如下所示：</p>
<ul>
<li>对象引用（而不是实际对象）：<code>concat</code> 将对象引用复制到新数组中。<strong>原始数组和新数组都引用相同的对象</strong>。 也就是说，如果引用的对象被修改，则更改对于新数组和原始数组都是可见的。这包括也是数组的数组参数的元素。</li>
<li>数据类型如字符串，数字和布尔（不是 <code>String</code>，<code>Number</code> 和 <code>Boolean</code> 对象）：<code>concat</code> 将字符串和数字的值复制到新数组中。</li>
</ul>
<p><strong>注意</strong>：数组/值在连接时保持不变。此外，对于新数组的任何操作（仅当元素不是对象引用时）都不会对原始数组产生影响，反之亦然。</p>
<h2>代码示例</h2>
<h3>连接两个数组</h3>
<p>以下代码将两个数组合并为一个新数组。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> alpha = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];
<span class="hljs-keyword">const</span> numeric = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];

alpha.<span class="hljs-title function_">concat</span>(numeric);
<span class="hljs-comment">// Outputs: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span>
</code></pre>
<h3>连接三个数组</h3>
<p>以下代码将三个数组合并为一个新数组。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> num1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],
  num2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],
  num3 = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];

<span class="hljs-keyword">const</span> nums = num1.<span class="hljs-title function_">concat</span>(num2, num3);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nums);
<span class="hljs-comment">// Outputs: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre>
<h3>将值连接到数组</h3>
<p>以下代码将三个值连接到数组。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> alpha = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];

<span class="hljs-keyword">var</span> alphaNumeric = alpha.<span class="hljs-title function_">concat</span>(<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alphaNumeric);
<span class="hljs-comment">// Outputs: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span>
</code></pre>
<h3>合并嵌套数组</h3>
<p>以下代码合并数组并保留引用。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> num1 = [[<span class="hljs-number">1</span>]];
<span class="hljs-keyword">var</span> num2 = [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>]];

<span class="hljs-keyword">var</span> nums = num1.<span class="hljs-title function_">concat</span>(num2);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nums);
<span class="hljs-comment">// Outputs: [[1], 2, [3]]</span>

<span class="hljs-comment">// modify the first element of num1</span>
num1[<span class="hljs-number">0</span>].<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nums);
<span class="hljs-comment">// Outputs: [[1, 4], 2, [3]]</span>
</code></pre>
<h3>将对象合并为数组</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> newArray = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span>.<span class="hljs-title function_">call</span>({ <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> }, { <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> });

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArray);
<span class="hljs-comment">// [{ a: 1 }, { b: 2 }]</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArray[<span class="hljs-number">0</span>].<span class="hljs-property">a</span>);
<span class="hljs-comment">// 1</span>
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener noreferrer nofollow">MDN: Array.prototype.concat</a></li>
<li><a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.es5.d.ts" target="_blank" rel="noopener noreferrer nofollow">TypeScript: lib.es5.d.ts</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

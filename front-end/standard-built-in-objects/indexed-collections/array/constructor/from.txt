1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","standard-built-in-objects","indexed-collections","array","constructor","from"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/indexed-collections/array/constructor/from","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/indexed-collections/array/constructor/from","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","is3r6osh9jaFWBqr8NKaV",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2649,<h1>Array.from()</h1>
<p>⭐️ <code>ES2015(ES6)新特性</code></p>
<p><code>Array.from()</code> 方法用于将一个类数组对象或可迭代对象转换成一个新的数组实例。</p>
<h2>语法</h2>
<p>语法：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arrayLike [, mapfn [, thisArg]])
</code></pre>
<p>类型声明：</p>
<pre class="hljs language-ts"  style=--lang:"ts" ><code><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArrayLike</span>&lt;T&gt; {
  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;
  <span class="hljs-keyword">readonly</span> [<span class="hljs-attr">n</span>: <span class="hljs-built_in">number</span>]: T;
}

<span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArrayConstructor</span> {
  <span class="hljs-keyword">from</span>&lt;T&gt;(<span class="hljs-attr">arrayLike</span>: <span class="hljs-title class_">ArrayLike</span>&lt;T&gt;): T[];

  <span class="hljs-keyword">from</span>&lt;T, U&gt;(<span class="hljs-attr">arrayLike</span>: <span class="hljs-title class_">ArrayLike</span>&lt;T&gt;, <span class="hljs-attr">mapfn</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">v</span>: T, <span class="hljs-attr">k</span>: <span class="hljs-built_in">number</span></span>) =&gt;</span> U, <span class="hljs-attr">thisArg</span>?: <span class="hljs-built_in">any</span>): U[];
}
</code></pre>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">arrayLike</td>
<td style="text-align:left">想要转换成数组的伪数组对象或可迭代对象</td>
<td style="text-align:left">typed array</td>
</tr>
<tr>
<td style="text-align:left">mapfn</td>
<td style="text-align:left">（可选）如果指定了该参数，新数组中的每个元素会执行该回调函数。</td>
<td style="text-align:left">function</td>
</tr>
<tr>
<td style="text-align:left">thisArg</td>
<td style="text-align:left">（可选）执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象</td>
<td style="text-align:left">object</td>
</tr>
</tbody>
</table>
<p>返回值：</p>
<p>返回一个新的数组实例。</p>
<h2>方法说明</h2>
<ul>
<li>具备以下两种条件的的对象可以通过 <code>Array.from()</code> 方法转换成真正的数组：
<ul>
<li>类数组对象：即拥有 <code>length</code> 属性和若干索引属性的任意对象</li>
<li>可迭代对象：即部署了 Iterator 接口的对象，可以获取对象中的元素，如 <code>Map</code> 和 <code>Set</code> 等</li>
</ul>
</li>
<li><code>Array.from()</code> 方法有一个可选参数 <code>mapfn</code>，让你可以在最后生成的数组上再执行一次 <code>Array.prototype.map</code> 方法后再返回。也就是说 <code>Array.from(arrayLike, mapfn, thisArg)</code> 就相当于 <code>Array.from(arrayLike).map(mapfn, thisArg)</code> ，除非创建的不是可用的中间数组。 这对一些数组的子类，如对<a href="/front-end/standard-built-in-objects/indexed-collections/typed-array-objects/typed-array-objects">类型化数组</a>来说很重要，因为中间数组的值在调用 <code>map()</code> 时需要是适当的类型。</li>
<li><code>from()</code> 的 <code>length</code> 属性为 1 ，即 <code>Array.from.length === 1</code>。</li>
<li>在 ES2015 中， <code>Class</code> 语法允许我们为内置类型（比如 <code>Array</code>）和自定义类新建子类（比如叫 <code>SubArray</code>）。这些子类也会继承父类的静态方法，比如 <code>SubArray.from()</code>，调用该方法后会返回子类 <code>SubArray</code> 的一个实例，而不是 <code>Array</code> 的实例。</li>
</ul>
<h2>代码示例</h2>
<h3>基本用法</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> bar = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];

<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(bar); <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span>

<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span>
</code></pre>
<h3>转换字符串</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span>
</code></pre>
<h3>Array from a <code>Set</code></h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-variable language_">window</span>]);

<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(s); <span class="hljs-comment">// [&quot;foo&quot;, window]</span>
</code></pre>
<h3>Array from a <code>Map</code></h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">let</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([
  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
  [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>],
  [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>],
]);

<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(m); <span class="hljs-comment">// [[1, 2], [2, 4], [4, 8]]</span>
</code></pre>
<h3>转换类数组</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>);
}

<span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [1, 2, 3]</span>
</code></pre>
<h3>使用箭头函数</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-comment">// Using an arrow function as the map function to</span>
<span class="hljs-comment">// manipulate the elements</span>
<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x + x); <span class="hljs-comment">// [2, 4, 6]</span>

<span class="hljs-comment">// Generate a sequence of numbers</span>
<span class="hljs-comment">// Since the array is initialized with `undefined` on each position,</span>
<span class="hljs-comment">// the value of `v` below will be `undefined`</span>
<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>({ <span class="hljs-attr">length</span>: <span class="hljs-number">5</span> }, <span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> i); <span class="hljs-comment">// [0, 1, 2, 3, 4]</span>
</code></pre>
<h3>数组去重合并</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">combine</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">let</span> arr = [].<span class="hljs-property">concat</span>.<span class="hljs-title function_">apply</span>([], <span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// 没有去重复的新数组</span>
  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr));
}

<span class="hljs-keyword">const</span> m = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],
  n = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>];

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">combine</span>(m, n)); <span class="hljs-comment">// [1, 2, 3]</span>
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener noreferrer nofollow">MDN: Array.from</a></li>
<li><a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.es2015.core.d.ts" target="_blank" rel="noopener noreferrer nofollow">TypeScript: lib.es2015.core.d.ts</a></li>
<li><a href="https://segmentfault.com/a/1190000004450221" target="_blank" rel="noopener noreferrer nofollow">Array.from 的妙用</a></li>
<li><a href="https://jsperf.com/constarray/4" target="_blank" rel="noopener noreferrer nofollow">Array.from 的性能测试</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

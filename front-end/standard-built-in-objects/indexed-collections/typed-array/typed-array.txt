1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"NW9bMA21iAaih0TqCHqj1","p":"","c":["","front-end","standard-built-in-objects","indexed-collections","typed-array","typed-array"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","standard-built-in-objects/indexed-collections/typed-array/typed-array","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","standard-built-in-objects/indexed-collections/typed-array/typed-array","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","SNcgOAKWPTOi1dRqRLS7k",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1f37,<h1>Typed Array</h1>
<p>JavaScript 类型化数组是一种类似数组的对象，并提供了一种用于访问原始二进制数据的机制。 正如你可能已经知道，<code>Array</code> 存储的对象能动态增多和减少，并且可以存储任何 JavaScript 值。JavaScript 引擎会做一些内部优化，以便对数组的操作可以很快。然而，随着 Web 应用程序变得越来越强大，尤其一些新增加的功能例如：音频视频编辑、访问 WebSockets 的原始数据等，很明显有些时候如果使用 JavaScript 代码可以快速方便地通过类型化数组来操作原始的二进制数据将会非常有帮助。</p>
<p>但是，不要把类型化数组与正常数组混淆，因为在类型数组上调用 <code>Array.isArray()</code> 会返回 <code>false</code>。此外，并不是所有可用于正常数组的方法都能被类型化数组所支持（如 <code>push</code> 和 <code>pop</code>）。</p>
<p>可以使用类型化数组来处理来自网络协议、二进制文件格式和原始图形缓冲区等源的二进制数据。类型化数组还可用于管理具有已知字节布局的内存中二进制数据。</p>
<h2>缓冲和视图：类型数组架构</h2>
<p>为了达到最大的灵活性和效率，JavaScript 类型数组（Typed Arrays）将实现拆分为<strong>缓冲</strong>和<strong>视图</strong>两部分。一个缓冲（由 <code>ArrayBuffer</code> 对象实现）描述的是一个数据块。缓冲没有格式可言，并且不提供机制访问其内容。为了访问在缓冲对象中包含的内存，你需要使用视图。视图提供了上下文 — 即数据类型、起始偏移量和元素数 — 将数据转换为实际有类型的数组。</p>
<p><img src="https://mdn.mozillademos.org/files/8629/typed_arrays.png" alt="ArrayBuffer"></p>
<h3>数组缓冲</h3>
<p><code>ArrayBuffer</code> 是一种数据类型，用来表示一个通用的、固定长度的二进制数据缓冲区。你不能直接操纵一个 <code>ArrayBuffer</code> 中的内容；你需要创建一个类型化数组的视图或一个描述缓冲数据格式的 <code>DataView</code>，使用它们来读写缓冲区中的内容。</p>
<h3>类型化数组视图</h3>
<p>类型化数组的类型表示可对其创建索引和进行操作的 <code>ArrayBuffer</code> 对象的视图。所有数组类型都具有固定长度。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小（以字节为单位）</th>
<th>描述</th>
<th>Web IDL 类型</th>
<th>Equivalent C type</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Int8Array</code></td>
<td>1</td>
<td>8 位补码带符号整数</td>
<td>byte</td>
<td>int8_t</td>
</tr>
<tr>
<td><code>Uint8Array</code></td>
<td>1</td>
<td>8 位无符号整数</td>
<td>octet</td>
<td>uint8_t</td>
</tr>
<tr>
<td><code>Uint8ClampedArray</code></td>
<td>1</td>
<td>8 位无符号整数（Clamped）</td>
<td>octet</td>
<td>uint8_t</td>
</tr>
<tr>
<td><code>Int16Array</code></td>
<td>2</td>
<td>16 位补码带符号整数</td>
<td>short</td>
<td>int16_t</td>
</tr>
<tr>
<td><code>Uint16Array</code></td>
<td>2</td>
<td>16 位无符号整数</td>
<td>unsigned short</td>
<td>uint16_t</td>
</tr>
<tr>
<td><code>Int32Array</code></td>
<td>4</td>
<td>32 位补码带符号整数</td>
<td>long</td>
<td>int32_t</td>
</tr>
<tr>
<td><code>Uint32Array</code></td>
<td>4</td>
<td>32 位无符号整数</td>
<td>unsigned short</td>
<td>uint32_t</td>
</tr>
<tr>
<td><code>Float32Array</code></td>
<td>4</td>
<td>32 位 IEEE 浮点</td>
<td>unrestricted float</td>
<td>float</td>
</tr>
<tr>
<td><code>Float64Array</code></td>
<td>8</td>
<td>64 位 IEEE 浮点</td>
<td>unrestricted double</td>
<td>double</td>
</tr>
</tbody>
</table>
<h3>数据视图</h3>
<p><code>DataView</code> 是一种底层接口，它提供有可以操作缓冲区中任意数据的读写接口。这对操作不同类型数据的场景很有帮助，例如：类型化数组视图都是运行在本地字节序模式（参考 Endianness），可以通过使用 <code>DataView</code>来控制字节序。默认是大端字节序（Big-endian），但可以调用读写接口改为小端字节序（Little-endian）。</p>
<h2>示例</h2>
<h3>使用视图和缓冲</h3>
<p>首先，我们创建一个 16 字节固定长度的缓冲：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">16</span>);
</code></pre>
<p>现在我们有了一段初始化为 0 的内存，目前还做不了什么太多操作。让我们确认一下数据的字节长度：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">if</span> (buffer.<span class="hljs-property">byteLength</span> === <span class="hljs-number">16</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Yes, it&#x27;s 16 bytes.&quot;</span>);
} <span class="hljs-keyword">else</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Oh no, it&#x27;s the wrong size!&quot;</span>);
}
</code></pre>
<p>在实际开始操作这个缓冲之前，需要创建一个视图。我们将创建一个视图，此视图将把缓冲内的数据格式化为一个 32 位的有符号整数数组：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> int32View = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>(buffer);
</code></pre>
<p>现在我们可以像普通数组一样访问该数组中的元素：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; int32View.<span class="hljs-property">length</span>; i++) {
  int32View[i] = i * <span class="hljs-number">2</span>;
}
</code></pre>
<p>该代码会将数组以 0, 2, 4 和 6 填充 （一共 4 个 4 字节元素，所以总长度为 16 字节）。</p>
<h3>同一数据的多个视图</h3>
<p>更有意思的是，你可以在同一数据上创建多个视图。例如：基于上文的代码，我们可以添加如下代码处理：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> int16View = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int16Array</span>(buffer);

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; int16View.<span class="hljs-property">length</span>; i++) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Entry &#x27;</span> + i + <span class="hljs-string">&#x27;: &#x27;</span> + int16View[i]);
}
</code></pre>
<p>这里我们创建了一个 2 字节整数视图，该视图共享上文的 4 字节整数视图的缓冲，然后以 2 字节整数打印出缓冲里的数据，这次我们会得到 0, 0, 2, 0, 4, 0, 6, 0 这样的输出。</p>
<p>那么，这样呢？</p>
<pre class="hljs"><code class="language-js">int16View[<span class="hljs-number">0</span>] = <span class="hljs-number">32</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Entry 0 in the 32-bit array is now &#x27;</span> + int32View[<span class="hljs-number">0</span>]);
</code></pre>
<p>这次的输出是&quot;Entry 0 in the 32-bit array is now 32&quot;。也就是，这 2 个数组都是同一数据的以不同格式展示出来的视图。你可以使用任何一种 <a href="/front-end/standard-built-in-objects/indexed-collections/typed-array/#%E7%B1%BB%E5%9E%8B%E5%8C%96%E6%95%B0%E7%BB%84%E8%A7%86%E5%9B%BE">view types</a> 中的定义的视图。</p>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

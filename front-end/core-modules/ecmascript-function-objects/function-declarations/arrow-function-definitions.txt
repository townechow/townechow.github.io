1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-declarations","arrow-function-definitions"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-declarations/arrow-function-definitions","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-declarations/arrow-function-definitions","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","PXnAFqWOOE-KgwWxPJbf4",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T5cf9,<h1>箭头函数</h1>
<p>箭头函数表达式的语法比函数表达式更短，并且没有自己的 <code>this</code>、<code>arguments</code>、<code>super</code> 和 <code>new.target</code>。</p>
<p>箭头函数表达式更适用于那些本来需要匿名函数的业务场景，并且它们不能用作构造函数。</p>
<h2>赋值式写法</h2>
<p>箭头函数只能用 <strong>赋值式写法</strong>，不能用声明式写法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-comment">// do something</span>
};
</code></pre>
<h2>箭头函数参数</h2>
<h3>单个参数</h3>
<p>当只有一个参数时，圆括号是可选的，如果没有参数或者参数多于一个就需要加括号。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn1</span> = (<span class="hljs-params">param1</span>) =&gt; {
  <span class="hljs-comment">// do something</span>
};

<span class="hljs-keyword">const</span> <span class="hljs-title function_">fn2</span> = (<span class="hljs-params"></span>) =&gt; {
  <span class="hljs-comment">// do something</span>
};

<span class="hljs-keyword">const</span> <span class="hljs-title function_">fn3</span> = (<span class="hljs-params">param1, param2</span>) =&gt; {
  <span class="hljs-comment">// do something</span>
};
</code></pre>
<h3>剩余参数</h3>
<p>支持剩余参数和默认参数。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">params1, params2, ...rest</span>) =&gt; {
  <span class="hljs-comment">// do something</span>
};
</code></pre>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">numbers</span> = (<span class="hljs-params">...nums</span>) =&gt; nums;

<span class="hljs-title function_">numbers</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);
<span class="hljs-comment">// [1, 2, 3, 4, 5]</span>

<span class="hljs-keyword">const</span> <span class="hljs-title function_">headAndTail</span> = (<span class="hljs-params">head, ...tail</span>) =&gt; [head, tail];

<span class="hljs-title function_">headAndTail</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);
<span class="hljs-comment">// [1, [2, 3, 4, 5]]</span>
</code></pre>
<h3>默认参数</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">params1 = default1, params2, ..., paramsN = defaultN</span>) =&gt; {
  <span class="hljs-comment">// do something</span>
}
</code></pre>
<h3>解构赋值</h3>
<p>同样支持参数列表解构</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">[a, b] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], { x: c } = { x: a + b }</span>) =&gt; a + b + c;

<span class="hljs-title function_">fn</span>();
<span class="hljs-comment">// 6</span>
</code></pre>
<p>🌰 <strong>代码示例</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">full</span> = (<span class="hljs-params">{ first, last }</span>) =&gt; firsr + <span class="hljs-string">&#x27;&#x27;</span> + last;

<span class="hljs-comment">// 等同于</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">full</span>(<span class="hljs-params">person</span>) {
  <span class="hljs-keyword">return</span> person.<span class="hljs-property">first</span> + <span class="hljs-string">&#x27;&#x27;</span> + person.<span class="hljs-property">last</span>;
}
</code></pre>
<h2>函数体</h2>
<h3>单个表达式</h3>
<p>如果函数体只有一个表达式，可以不加花括号</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">param1, param2</span>) =&gt; param1 + param2;
</code></pre>
<h3>返回缺省值</h3>
<p>如果函数没有括号，可以不写 <code>return</code> ，箭头函数会帮你 <code>return</code></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">param1, param2</span>) =&gt; param1 + param2;

<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);
</code></pre>
<h3>直接返回对象</h3>
<p>加括号的函数体返回对象字面表达式</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">bar</span>) =&gt; ({ <span class="hljs-attr">foo</span>: bar });
</code></pre>
<h2>应用场景</h2>
<h3>回调函数</h3>
<p><strong>数组方法 map 函数：</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 普通函数写法</span>
<span class="hljs-keyword">const</span> result = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) {
  <span class="hljs-keyword">return</span> x * x;
});

<span class="hljs-comment">// 箭头函数写法</span>
<span class="hljs-keyword">const</span> result = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x * x);
</code></pre>
<p><strong>数组方法 sort 函数：</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 普通函数写法</span>
<span class="hljs-keyword">const</span> result = values.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) {
  <span class="hljs-keyword">return</span> a - b;
});

<span class="hljs-comment">// 箭头函数写法</span>
<span class="hljs-keyword">const</span> result = values.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);
</code></pre>
<h2>注意事项</h2>
<ul>
<li>函数体内的 <code>this</code> 对象，就是 <strong>定义时所在</strong> 的对象，而不是使用时所在的对象</li>
<li>不可以当作构造函数，也就是说，不可以使用 <code>new</code> 命令，否则会抛出一个错误</li>
<li>不可以使用 <code>arguments</code> 对象，该对象在函数体内不存在。如果要用，可以用 <code>rest</code> 参数代替</li>
<li>不可以使用 <code>yield</code> 命令，因此箭头函数不能用作 Generator 函数</li>
</ul>
<h3>箭头函数中的 <code>this</code></h3>
<p><code>this</code> 对象的指向时可变的，但是在箭头函数中，它是<strong>固定的</strong>。因为箭头函数内部的 <code>this</code> 是 <strong>词法作用域</strong>，由上下文确定。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span>);
  }, <span class="hljs-number">100</span>);
}

<span class="hljs-keyword">var</span> key = <span class="hljs-number">100</span>;

foo.<span class="hljs-title function_">call</span>({ <span class="hljs-attr">key</span>: <span class="hljs-number">50</span> });
<span class="hljs-comment">// 50</span>
</code></pre>
<p>上面的代码中，<code>setTimeout</code> 的参数一个箭头函数，这个箭头函数的定义生效是在 <code>foo</code> 函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时 <code>this</code> 应该指向全局对象 <code>window</code>，这时应该输出 <code>100</code>。但是，箭头函数导致 <code>this</code> 总是指向函数定义生效时所在的对象（本例时 <code>{ key: 50 }</code>），所以输出的是 <code>50</code>。</p>
<p>箭头函数可以让 <code>setTimeout</code> 里面的 <code>this</code>，绑定定义时所在的作用域，而不是指向运行时所在的作用域。</p>
<p>下面是另一个例子。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Timer</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">num1</span> = <span class="hljs-number">0</span>;
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">num2</span> = <span class="hljs-number">0</span>;

  <span class="hljs-comment">// 箭头函数</span>
  <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">num1</span>++, <span class="hljs-number">1000</span>);

  <span class="hljs-comment">// 普通函数</span>
  <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">num2</span>++;
  }, <span class="hljs-number">1000</span>);
}

<span class="hljs-keyword">const</span> timer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();

<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;num1&#x27;</span>, timer.<span class="hljs-property">num1</span>), <span class="hljs-number">3000</span>);
<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;num2&#x27;</span>, timer.<span class="hljs-property">num2</span>), <span class="hljs-number">3000</span>);
<span class="hljs-comment">// num1: 3</span>
<span class="hljs-comment">// num2: 0</span>
</code></pre>
<p>上面的代码中，<code>Timer</code> 函数内部设置了两个定时器，分别使用了箭头函数和普通函数。</p>
<p>前者的 <code>this</code> 绑定 <strong>定义时</strong> 所在的作用域（即 <code>Timer</code> 函数），后者的 <code>this</code> 指向 <strong>运行时</strong> 所在的作用域（即全局对象）。所以，3000ms 之后， <code>timer.num1</code> 被更新了 3 次，而 <code>timer.num2</code> 一次都没更新。</p>
<p>箭头函数可以让 <code>this</code> 指向固定化，这种特征很 <strong>有利于封装回调函数</strong>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> handler = {
  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,
  <span class="hljs-attr">init</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">doSomething</span>(event.<span class="hljs-property">type</span>), <span class="hljs-literal">false</span>);
  },
  <span class="hljs-attr">doSomething</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">type</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Handling&#x27;</span> + type + <span class="hljs-string">&#x27; for &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>);
  },
};
</code></pre>
<p>以上的代码的 <code>init</code> 方法中使用了箭头函数，这导致箭头函数里面的 <code>this</code> 总是指向 <code>handler</code> 对象。否则，回调函数运行时，<code>this.doSomething</code> 一行会报错，因为此时 <code>this</code> 指向 <code>document</code> 对象。</p>
<p>⚠️ <strong>注意</strong>：<code>this</code> 指向的固定化并不是因为箭头函数内部有绑定 <code>this</code> 的机制，实际原因时箭头函数根本没有自己的 <code>this</code>，导致内部的 <code>this</code> 就是外层代码块的 <code>this</code>。正是因为它没有 <code>this</code>，所以不能用作构造函数。</p>
<p>箭头函数转成 ES5 的代码如下。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// ES6</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;id:&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>);
  }, <span class="hljs-number">100</span>);
}

<span class="hljs-comment">// ES5</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;

  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;id:&#x27;</span>, _this.<span class="hljs-property">id</span>);
  }, <span class="hljs-number">100</span>);
}
</code></pre>
<p>上面的代码中，转换后的 ES5 版本清楚地说明了箭头函数里面根本没有自己的 <code>this</code>，而是引用外层的 <code>this</code>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 请问下面的代码之中有几个this?</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;id:&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>);
      };
    };
  };
}

<span class="hljs-keyword">var</span> fn = foo.<span class="hljs-title function_">call</span>({ <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> });

<span class="hljs-keyword">var</span> res1 = fn.<span class="hljs-title function_">call</span>({ <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> })()();
<span class="hljs-comment">// id: 1</span>
<span class="hljs-keyword">var</span> res2 = <span class="hljs-title function_">fn</span>().<span class="hljs-title function_">call</span>({ <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> })();
<span class="hljs-comment">// id: 1</span>
<span class="hljs-keyword">var</span> res3 = <span class="hljs-title function_">fn</span>()().<span class="hljs-title function_">call</span>({ <span class="hljs-attr">id</span>: <span class="hljs-number">4</span> });
<span class="hljs-comment">// id: 1</span>
</code></pre>
<p>上面的代码中只有一个 <code>this</code>，就是函数 <code>foo</code> 的 <code>this</code>，所以 <code>res1</code>、<code>res2</code>、<code>res3</code> 都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的 <code>this</code>，它们的 <code>this</code> 其实都是最外层 <code>foo</code> 函数的 <code>this</code>。</p>
<p>除了 <code>this</code> 外，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：<code>arguments</code>、<code>super</code>、<code>new.target</code>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;args:&#x27;</span>, <span class="hljs-variable language_">arguments</span>);
  }, <span class="hljs-number">100</span>);
}

<span class="hljs-title function_">foo</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>);
<span class="hljs-comment">// args: [2, 4, 6, 8]</span>
</code></pre>
<p>上面代码中，箭头函数内部的变量 <code>arguments</code> ，其实是函数 <code>foo</code> 的 <code>arguments</code> 变量。</p>
<p>另外，由于箭头函数没有自己的<code>this</code>，所以当然也就不能用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法去改变<code>this</code>的指向。</p>
<pre class="hljs"><code class="language-js">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> [(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>).<span class="hljs-title function_">bind</span>({ <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;inner&#x27;</span> })()];
}.<span class="hljs-title function_">call</span>({ <span class="hljs-attr">x</span>: <span class="hljs-string">&#x27;outer&#x27;</span> }));
<span class="hljs-comment">// [&#x27;outer&#x27;]</span>
</code></pre>
<p>上面代码中，箭头函数没有自己的<code>this</code>，所以<code>bind</code>方法无效，内部的<code>this</code>指向外部的<code>this</code>。</p>
<h3>嵌套的箭头函数</h3>
<p>箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">value</span>) {
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">into</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">array</span>) {
      <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">after</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">afterValue</span>) {
          array.<span class="hljs-title function_">splice</span>(array.<span class="hljs-title function_">indexOf</span>(afterValue) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, value);
          <span class="hljs-keyword">return</span> array;
        },
      };
    },
  };
}

<span class="hljs-title function_">insert</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">into</span>([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]).<span class="hljs-title function_">after</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// [1, 2, 3]</span>
</code></pre>
<p>上面这个函数，可以使用箭头函数改写。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">insert</span> = (<span class="hljs-params">value</span>) =&gt; ({
  <span class="hljs-attr">into</span>: <span class="hljs-function">(<span class="hljs-params">array</span>) =&gt;</span> ({
    <span class="hljs-attr">after</span>: <span class="hljs-function">(<span class="hljs-params">afterValue</span>) =&gt;</span> {
      array.<span class="hljs-title function_">splice</span>(array.<span class="hljs-title function_">indexOf</span>(afterValue) + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, value);
      <span class="hljs-keyword">return</span> array;
    },
  }),
});

<span class="hljs-title function_">insert</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">into</span>([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]).<span class="hljs-title function_">after</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// [1, 2, 3]</span>
</code></pre>
<p>下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">pipeline</span> = (<span class="hljs-params">...focus</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> focus.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> <span class="hljs-title function_">b</span>(a), val);

<span class="hljs-keyword">const</span> <span class="hljs-title function_">plus1</span> = (<span class="hljs-params">a</span>) =&gt; a + <span class="hljs-number">1</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">mult2</span> = (<span class="hljs-params">a</span>) =&gt; a * <span class="hljs-number">2</span>;
<span class="hljs-keyword">const</span> addThenMult = <span class="hljs-title function_">pipeline</span>(plus1, mult2);

<span class="hljs-title function_">addTheMult</span>(<span class="hljs-number">5</span>);
<span class="hljs-comment">// 12</span>
</code></pre>
<p>如果觉得上面的可读性比较差，也可以采用下面的写法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">plus1</span> = (<span class="hljs-params">a</span>) =&gt; a + <span class="hljs-number">1</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">mult2</span> = (<span class="hljs-params">a</span>) =&gt; a * <span class="hljs-number">2</span>;

<span class="hljs-title function_">mult2</span>(<span class="hljs-title function_">plus1</span>(<span class="hljs-number">5</span>));
<span class="hljs-comment">// 12</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"箭头函数"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

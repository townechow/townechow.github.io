1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-declarations","function-definitions"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-declarations/function-definitions","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-declarations/function-definitions","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","lKvsjC2I6zeCALpVU6PJU",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T367c,<h1>函数声明式定义</h1>
<p>一个函数定义由一系列的 <code>function</code> 关键字组成，依次为：</p>
<ul>
<li>函数的名称</li>
<li>函数的参数列表，包围在括号中并由逗号分隔</li>
<li>函数执行的语句，用大括号 <code>{}</code> 括起来（函数体）</li>
</ul>
<h2>函数声明语句</h2>
<p>函数声明语句的组成要素：</p>
<ol>
<li><code>function</code> 关键字</li>
<li><code>functionName</code> 函数名</li>
<li><code>arg</code> 参数（可选）</li>
<li><code>functionBody</code> 函数体</li>
</ol>
<h3>语法</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">functionName</span> (<span class="hljs-params">[arg1 [,arg2 [...,argn]]]</span>) {
  <span class="hljs-comment">// functionBody 函数体</span>
}
</code></pre>
<p>&lt;br/&gt;</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数声明要素</th>
<th style="text-align:left">含义</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>function</code></td>
<td style="text-align:left">声明关键字</td>
<td style="text-align:left">声明的函数名称的标识符</td>
</tr>
<tr>
<td style="text-align:left"><code>functionName</code></td>
<td style="text-align:left">函数名称</td>
<td style="text-align:left">当前作用域内函数名称唯一</td>
</tr>
<tr>
<td style="text-align:left"><code>arg</code></td>
<td style="text-align:left">参数列表</td>
<td style="text-align:left">函数名之后的圆括号中是参数列表，参数之间使用逗号分隔。当调用函数时，这些标识符则指代传入函数的实参。</td>
</tr>
<tr>
<td style="text-align:left"><code>functionBody</code></td>
<td style="text-align:left">函数体</td>
<td style="text-align:left">所有语句的集合，包括花括号在内</td>
</tr>
</tbody>
</table>
<h3>特点</h3>
<ul>
<li>当函数的参数是一个值（基本数据类型），若被调用函数改变了这个参数的值，这样的改变不会影响到全局或调用的函数</li>
<li>但当函数的参数是一个对象（即一个非原始值，例如 <code>Array</code> 或用户自定义的其他对象），若函数改变了这个对象的的属性，这样的改变对函数外部是可见的</li>
</ul>
<p>&lt;br /&gt;</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">arg1</span>) {
  arg1.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;JavaScript&#x27;</span>;
}

<span class="hljs-keyword">let</span> foo = { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-attr">year</span>: <span class="hljs-number">1998</span> };

<span class="hljs-title function_">fn</span>(foo);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">name</span>);
<span class="hljs-comment">// &#x27;JavaScript&#x27;</span>
</code></pre>
<p>&lt;br /&gt;</p>
<ul>
<li><code>function</code> 语句里的 <strong>花括号是必需</strong> 的，这和 <code>while</code> 循环和其他一些语句所使用的语句块是不同的，即使函数体内只包含一条语句，仍然必须使用花括号将其括起来。</li>
</ul>
<p>&lt;br /&gt;</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>);
<span class="hljs-comment">// SyntaxError: Unexpected end of input</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>){};
<span class="hljs-comment">// 不报错</span>

<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>);
<span class="hljs-comment">// 不报错</span>
</code></pre>
<p>&lt;br /&gt;</p>
<ul>
<li><strong>函数的重复声明会覆盖前面的声明</strong>（无论是函数表达式还是函数声明）</li>
</ul>
<p>⚠️ <strong>注意</strong>：由于函数声明提升优先于函数表达式的变量声明提升，所以变量的声明无作用。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">var</span> foo;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);
}

<span class="hljs-title function_">foo</span>();
<span class="hljs-comment">// 1</span>
</code></pre>
<p>后面的函数声明会覆盖前面的函数声明</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title function_">baz</span>();
<span class="hljs-comment">// 2</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);
}
</code></pre>
<ul>
<li>和变量声明一样，函数声明语句创建的变量无法删除</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);
}

<span class="hljs-keyword">delete</span> foo;
<span class="hljs-comment">// false</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">foo</span>());
<span class="hljs-comment">// 1</span>
</code></pre>
<h2>函数表达式</h2>
<p>函数表达式要素：</p>
<ul>
<li><code>var/let/const</code> 关键字</li>
<li><code>variableName</code> 变量名</li>
<li>表达式赋值等号</li>
<li>声明变量后的分号</li>
<li><code>functionName</code> 函数名（可选，没有的话叫做匿名函数）</li>
<li><code>functionBody</code> 函数体</li>
</ul>
<p>通常而言，以表达式方式定义函数时都不需要名称，这会让定义它们的代码更加紧凑。函数定义表达式特别适合用来定义那些只会使用一次的函数。</p>
<h3>语法</h3>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> variableName = <span class="hljs-keyword">function</span> <span class="hljs-title function_">functionName</span>(<span class="hljs-params">arg</span>) {
  <span class="hljs-comment">// 函数体</span>
  functionBody;
};
</code></pre>
<p>函数表达式要素与函数声明语句基本一致</p>
<h3>匿名函数</h3>
<p><strong>匿名函数（anonymous function）</strong> 也叫拉姆达函数，是 <code>function</code> 关键字后面没有标识符的函数。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> square = <span class="hljs-keyword">function</span> (<span class="hljs-params">number</span>) {
  <span class="hljs-keyword">return</span> number * number;
};
</code></pre>
<h3>具名函数</h3>
<p>函数表达式也可以提供函数名，并且可以用于在函数内部使用来代指其本身，或者在调试器堆栈跟踪中鉴别该函数。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> factorial = <span class="hljs-keyword">function</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">n</span>) {
  <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : n * <span class="hljs-title function_">fac</span>(n - <span class="hljs-number">1</span>);
};

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">factorial</span>(<span class="hljs-number">3</span>));

<span class="hljs-keyword">var</span> x = <span class="hljs-title function_">square</span>(<span class="hljs-number">4</span>);
<span class="hljs-comment">// x 得到的值为16</span>
</code></pre>
<h3>函数名称</h3>
<p>一个函数定义表达式包含名称，函数的局部作用域将会包含一个绑定到函数对象的名称。实际上，函数的名称将成为函数内部的一个局部变量。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> fn;
};

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo);
<span class="hljs-comment">// fn(){</span>
<span class="hljs-comment">//  return fn</span>
<span class="hljs-comment">// }</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">foo</span>());
<span class="hljs-comment">// fn(){</span>
<span class="hljs-comment">//  return fn</span>
<span class="hljs-comment">// }</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">foo</span>()());
<span class="hljs-comment">// fn(){</span>
<span class="hljs-comment">//  return fn</span>
<span class="hljs-comment">// }</span>
</code></pre>
<p>个人理解：</p>
<ul>
<li>对于具名的函数表达式来说，<strong>函数名称</strong> 相当于函数对象的 &lt;strong style=&quot;color: red&quot;&gt;形参&lt;/strong&gt;，只能在函数内部使用；</li>
<li>而 <strong>变量名称</strong> 相当于函数对象的 &lt;strong style=&quot;color: red&quot;&gt;实参&lt;/strong&gt;，在函数内部和函数外部都可以使用。</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> fn === foo;
};

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">foo</span>());
<span class="hljs-comment">// true</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo === fn);
<span class="hljs-comment">// ReferenceError: fn is not defined</span>
</code></pre>
<p>函数定义了一个非标准的 <code>name</code> 属性，通过这个属性可以访问到给定函数指定的名字，这个属性的值永远等于跟在 <code>function</code> 关键字后面的标识符，匿名函数的 <code>name</code> 属性为空</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-comment">// IE11- 浏览器无效，均输出 undefined</span>
<span class="hljs-comment">// Chrome在处理匿名函数的 name 属性时有问题，会显示函数表达式的名字</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) {}
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">name</span>);
<span class="hljs-comment">// &#x27;fn&#x27;</span>

<span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {};
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">name</span>);
<span class="hljs-comment">// &#x27;&#x27;，在chrome浏览器中会显示&#x27;fn&#x27;</span>

<span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span> <span class="hljs-title function_">abc</span>(<span class="hljs-params"></span>) {};
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">name</span>);
<span class="hljs-comment">// &#x27;abc&#x27;</span>
</code></pre>
<h2>函数声明优先</h2>
<p>虽然都可以定义函数，但最大的区别在于：</p>
<ul>
<li>解析器会 <strong>率先读取函数声明</strong>，使其在执行任何代码之前就可以访问（也就是 <strong>函数声明提升</strong>）；</li>
<li>而函数表达式则需要 <strong>解析器执行到它所在的代码行</strong> 才会被解释执行。</li>
</ul>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title function_">foo</span>();
<span class="hljs-comment">// 能正常运行 弹出 foo</span>

<span class="hljs-title function_">bar</span>();
<span class="hljs-comment">// 报错 Uncaught TypeError: baz is a function(...)</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);
}

<span class="hljs-keyword">var</span> baz = <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) {
  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);
};
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

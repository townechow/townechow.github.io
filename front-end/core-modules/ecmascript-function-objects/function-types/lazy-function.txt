1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-types","lazy-function"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-types/lazy-function","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-types/lazy-function","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","cchC-WzTwM-i8c3nZF3cH",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1d8d,<h1>惰性函数</h1>
<p><strong>惰性函数</strong> 表示函数执行的分支只会在函数 <strong>第一次调用</strong> 的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。</p>
<h2>解决问题</h2>
<p>在一个方法里面可能会涉及到一些兼容性的问题，不同的浏览器对应不同的方法，第一次我们遍历这些方法找到最合适的那个， 并将这个方法覆盖于遍历它的函数，这就是惰性函数即只遍历一次就找到最佳方案，下次再要找那个方法的时候就不用遍历了，提高了性能。</p>
<p>🌰 <strong>示例：常见的为 DOM 节点添加事件的函数</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addEvent</span>(<span class="hljs-params">type, element, func</span>) {
  <span class="hljs-keyword">if</span> (element.<span class="hljs-property">addEventListener</span>) {
    element.<span class="hljs-title function_">addEventListener</span>(type, func, <span class="hljs-literal">false</span>);
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(element.<span class="hljs-property">attachEvent</span>){
    element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + type, func);
  } <span class="hljs-keyword">else</span>{
    element[<span class="hljs-string">&#x27;on&#x27;</span> + type] = func;
  }
}
</code></pre>
<p>每次调用 <code>addEvent</code> 函数的时候，它都要对浏览器所支持的能力进行检查，首先检查是否支持 <code>addEventListener</code> 方法，如果不支持，再检查是否支持 <code>attachEvent</code> 方法，如果还不支持，就用 DOM0 级的方法添加事件。这个过程，在 <code>addEvent</code> 函数每次调用的时候都要走一遍，其实，如果浏览器支持其中的一种方法，那么他就会一直支持了，就没有必要再进行其他分支的检测了，也就是说，<code>if</code> 语句不必每次都执行，代码可以运行的更快一些。解决的方案就是称之为 <strong>惰性载入</strong> 的技巧。</p>
<h2>函数重写</h2>
<p>在介绍惰性函数（或称惰性载入）之前，首先介绍函数重写技术。</p>
<p>由于一个函数可以返回另一个函数，因此可以用新的函数来覆盖旧的函数。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>){
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);

  foo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);
  }
}
</code></pre>
<p>这样一来，第一次调用该函数时会 <code>console.log('foo')</code> 会被执行，全局变量 <code>foo</code> 被重定义，并被赋予新的函数。当该函数再次被调用时，<code>console.log('bar')</code> 会被执行。</p>
<h2>惰性载入</h2>
<p>惰性函数的本质就是函数重写。所谓<strong>惰性载入</strong>，就是说函数执行的分支只会执行一次，之后调用函数时，直接进入所支持的分支代码。</p>
<p>有两种实现惰性载入的方式，第一种事函数在第一次调用时，对函数本身进行二次处理，该函数会被覆盖为符合分支条件的函数，这样对原函数的调用就不用再经过执行的分支了，我们可以用下面的方式使用惰性载入重写<code>addEvent()</code>。</p>
<h3>在函数被调用时处理函数</h3>
<p>函数在第一次调用时，该函数会被覆盖为另外一个按合适方式执行的函数，这样任何对原函数的调用都不用再经过执行的分支了。代码重写如下</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addEvent</span>(<span class="hljs-params">type, element, func</span>) {
  <span class="hljs-keyword">if</span> (element.<span class="hljs-property">addEventListener</span>) {
    addEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">type, element, func</span>) {
      element.<span class="hljs-title function_">addEventListener</span>(type, func, <span class="hljs-literal">false</span>);
    }
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(element.<span class="hljs-property">attachEvent</span>){
    addEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">type, element, func</span>) {
      element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + type, func);
    }
  } <span class="hljs-keyword">else</span>{
    addEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">type, element, func</span>) {
      element[<span class="hljs-string">&#x27;on&#x27;</span> + type] = func;
    }
  }

  <span class="hljs-keyword">return</span> <span class="hljs-title function_">addEvent</span>(type, element, func);
}
</code></pre>
<p>在这个惰性载入的 <code>addEvent()</code> 中，<code>if</code> 语句的每个分支都会为 <code>addEvent</code> 变量赋值，有效覆盖了原函数。最后一步便是调用了新赋函数。下一次调用 <code>addEvent()</code> 时，便会直接调用新赋值的函数，这样就不用再执行 <code>if</code> 语句了。</p>
<p>但是，这种方法有个缺点，如果函数名称有所改变，修改起来比较麻烦。</p>
<h3>声明函数时指定适当的函数</h3>
<p>把嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让 <code>addEvent</code> 返回一个包裹了正确逻辑的函数。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> addEvent = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">addEventListener</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">type, element, func</span>) {
      element.<span class="hljs-title function_">addEventListener</span>(type, func, <span class="hljs-literal">false</span>);
    }
  }
  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">attachEvent</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">type, element, func</span>) {
      element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + type, func);
    }
  }
  <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">type, element, func</span>) {
      element[<span class="hljs-string">&#x27;on&#x27;</span> + type] = func;
    }
  }
})();
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"惰性函数"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

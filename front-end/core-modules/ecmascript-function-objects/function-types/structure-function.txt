1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-types","structure-function"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-types/structure-function","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-types/structure-function","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","okeo3knJQ1VJSINr_zNZ6",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T158a,<h1>构造函数</h1>
<p>在典型的 OOP 语言中，如 Java 都存在类的概念，类就是对象的模版，对象就是类的实例。但是在 JavaScript 中不存在类的概念，JavaScript 不是基于类，而是通过构造函数（constructor）和原型链（prototype chains）实现的。但在 ES6 中引入了类（class） 这个概念，作为对象的模版，新的 <code>class</code> 写法知识让原型对象的写法更加清晰，这里不重点谈这个。</p>
<h2>特点</h2>
<p>构造函数的特点：</p>
<ol>
<li>构造函数的首字母必须大写，用来区分于普通函数</li>
<li>内部使用的 <code>this</code> 对象，来指向即将要生成的实例对象</li>
<li>使用 <code>new</code> 关键字来生成实例对象</li>
</ol>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>){
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;say hello&quot;</span>);
  }
}

<span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Bella&#x27;</span>, <span class="hljs-number">23</span>);

foo.<span class="hljs-title function_">sayHello</span>();
<span class="hljs-comment">// Bella say hello</span>
</code></pre>
<h2>缺点</h2>
<p>构造函数的缺点：</p>
<ol>
<li>所有实例都会通过原型链引用到 <code>prototype</code></li>
<li><code>prototype</code> 相当于特定类型所有实例都可以访问到一个公共容器</li>
<li>那么我们就将重复的东西放到公共容器就好了</li>
</ol>
<h2>作用</h2>
<p><code>constructor</code> 属性的作用</p>
<ol>
<li>分辨原型对象到底是哪个构造函数</li>
</ol>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>){};

<span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span>);
<span class="hljs-comment">// true</span>
</code></pre>
<ol start="2">
<li>从实例中新建另一个实例</li>
</ol>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>){};

<span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(){};
<span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> person1.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>);
<span class="hljs-comment">// true</span>
</code></pre>
<ol start="3">
<li>由于 <code>constructor</code> 属性是一种原型对象和构造函数的关系，所以在修改原型对象对的时候，一定要注意 <code>constructor</code> 的指向问题，避免 <code>instanceof</code> 失真。</li>
</ol>
<h2>与普通函数对比</h2>
<p>在命名规则上，构造函数一般是首字母大写，普通函数遵照小驼峰式命名法。</p>
<p>在函数调用的时候：</p>
<table>
<thead>
<tr>
<th style="text-align:left">构造函数</th>
<th style="text-align:left">普通函数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>new Fn()</code></td>
<td style="text-align:left"><code>fn()</code></td>
</tr>
<tr>
<td style="text-align:left">构造函数内部会创建一个新的对象，即 <code>Fn</code> 的实例</td>
<td style="text-align:left">在调用函数的内部不会创建新的对象</td>
</tr>
<tr>
<td style="text-align:left">函数内部的 <code>this</code> 指向 新创建的 <code>Fn</code> 的实例</td>
<td style="text-align:left">函数内部的 <code>this</code> 指向调用函数的对象（如果没有对象调用，默认是 <code>window</code>）</td>
</tr>
<tr>
<td style="text-align:left">默认的返回值是 <code>Fn</code> 的实例</td>
<td style="text-align:left">返回值由 <code>return</code> 语句决定</td>
</tr>
</tbody>
</table>
<p>构造函数的返回值：</p>
<p>有一个默认的返回值，新创建的实例对象。</p>
<p>当手动添加返回值后（<code>return</code> 语句）：</p>
<ol>
<li>返回值是基本数据类型的话，真正的返回值还是那个新创建的实例对象</li>
<li>返回值是复杂数据类型（对象）的话，真正的返回值是这个对象</li>
</ol>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

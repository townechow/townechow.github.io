1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-types","sleep-function"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-types/sleep-function","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-types/sleep-function","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","5cHzAnAe1oXNbOSpgBtPp",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T18b6,<h1>函数睡眠</h1>
<p>伪命题，JavaScript 引擎线程无法挂起，通过异步实现类似 sleep 的效果。</p>
<h2>代码实现</h2>
<h3>回调函数实现</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sleep</span> = (<span class="hljs-params">cb, time</span>) =&gt; <span class="hljs-built_in">setTimeout</span>(cb, time);

<span class="hljs-title function_">sleep</span>(<span class="hljs-function">() =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>);
}, <span class="hljs-number">1000</span>);
</code></pre>
<h3>Promise 实现</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">time</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) {
      <span class="hljs-built_in">setTimeout</span>(resolve, time);
    });
  };
}

<span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;do something&#x27;</span>);
  <span class="hljs-title function_">resolve</span>();
})
  .<span class="hljs-title function_">then</span>(<span class="hljs-title function_">sleep</span>(<span class="hljs-number">2000</span>))
  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;after sleep 2000&#x27;</span>);
  });
</code></pre>
<ul>
<li>优点：这种方式实际上是用了 <code>setTimeout</code>，没有形成进程阻塞，不会造成性能和负载问题</li>
<li>缺点：虽然不像 <code>callback</code> 套那么多层，但仍不怎么美观，而且当我们需要在某过程中需要停止执行（或者在中途返回了错误的值），还必须得层层判断后跳出，非常麻烦，而且这种异步并不是那么彻底，还是看起来别扭</li>
</ul>
<h3>Generator 实现</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">sleep</span>(<span class="hljs-params">time</span>) {
  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) {
    <span class="hljs-built_in">setTimeout</span>(resolve, time);
  });
}

<span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>)
  .<span class="hljs-title function_">next</span>()
  .<span class="hljs-property">value</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>);
  });
</code></pre>
<ul>
<li>优点：同 Promise 优点，另外代码就变得非常简单干净，没有 <code>then</code> 那么生硬和恶心</li>
<li>缺点：但不足也很明显，就是每次都要执行 <code>next</code> 显得很麻烦，虽然有 <code>co</code>（第三方包）可以解决，但就多包了一层不好看，错误也必须按 <code>co</code> 的逻辑来处理不爽</li>
</ul>
<h3>Async/Await 实现</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">time</span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) {
    <span class="hljs-built_in">setTimeout</span>(resolve, time);
  });
}

<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);

  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>);
  <span class="hljs-keyword">return</span> res;
}
<span class="hljs-comment">// 延迟 1000ms 输出 &quot;Hello world!&quot;</span>
</code></pre>
<ul>
<li>优点：同 Promise 和 Generator 的优点。Async/Await 可以看座是 Generator 的语法糖，Async 和 Await 相较于 <code>*</code> 和 <code>yield</code> 更加语义，另外各个函数都是扁平的，不会产生多余的嵌套，代码更加清爽易读。</li>
<li>缺点：ES7 语法存在兼容性问题，有 Babel 一切兼容性都不是问题</li>
</ul>
<h3>使用 node-sleep</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> sleep = <span class="hljs-title function_">requir</span>(<span class="hljs-string">&#x27;node-sleep&#x27;</span>);
<span class="hljs-keyword">const</span> sec = <span class="hljs-number">10</span>;

sleep.<span class="hljs-title function_">sleep</span>(sec);
<span class="hljs-comment">// Sleep for sec seconds</span>
sleep.<span class="hljs-title function_">msleep</span>(sec);
<span class="hljs-comment">// Sleep for sec milliseconds</span>
sleep.<span class="hljs-title function_">usleep</span>(sec);
<span class="hljs-comment">// Sleep for sec microseconds（1 second is 1000000 microseconds）</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"函数睡眠"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

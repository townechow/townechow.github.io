1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-types","callback-function"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-types/callback-function","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-types/callback-function","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","qcf0Mr5IYcL4vvlAujVAy",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2010,<h1>回调函数</h1>
<p>回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码。</p>
<p>在 JavaScript 中函数也是对象的一种，同样对象可以作为参数传递给函数，因此函数也可以作为参数传递给另外一个函数，这个作为参数的函数就是回调函数。</p>
<p><strong>回调函数</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1, num2, callback</span>) {
  <span class="hljs-keyword">const</span> sum = num1 + num2;

  <span class="hljs-comment">// 数值相加后，将相加和作为参数传入回调函数</span>
  <span class="hljs-title function_">callback</span>(sum);
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">num</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);
}

<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, print);
<span class="hljs-comment">// 3</span>
</code></pre>
<p><strong>匿名回调函数</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1, num2, callback</span>) {
  <span class="hljs-keyword">const</span> sum = num1 + num2;

  <span class="hljs-comment">// 数值相加后，将相加和作为参数传入回调函数</span>
  <span class="hljs-title function_">callback</span>(sum);
}

<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">sum</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum);
  <span class="hljs-comment">// 3</span>
});
</code></pre>
<h2>函数特点</h2>
<h3>不会立即执行</h3>
<p>回调函数作为参数传递给一个函数的时候，传递的只是函数的定义并不会立即执行。和普通的函数一样，回调函数在函调用函数数中也要通过 <code>()</code> 括号运算符调用才会执行。</p>
<h3>是个闭包</h3>
<p>回调函数是一个闭包，也就是说它能访问到其外层定义的变量。</p>
<h3>执行前类型判断</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1, num2, callback</span>) {
  <span class="hljs-keyword">var</span> sum = num1 + num2;
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&#x27;function&#x27;</span>) {
    <span class="hljs-title function_">callback</span>(sum);
  }
}
</code></pre>
<h3><code>this</code> 的使用</h3>
<p>注意在回调函数调用时 <code>this</code> 的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> obj = {
  <span class="hljs-attr">sum</span>: <span class="hljs-number">0</span>,
  <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">num1, num2</span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> = num1 + num2;
  },
};

<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1, num2, callback</span>) {
  <span class="hljs-title function_">callback</span>(num1, num2);
}

<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, obj.<span class="hljs-property">add</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">sum</span>);
<span class="hljs-comment">// 0</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">sum</span>);
<span class="hljs-comment">// 3</span>
</code></pre>
<p>上述代码调用回调函数的时候是在全局环境下，因此 <code>this</code> 指向的是 <code>window</code>，所以 <code>sum</code> 的值是赋值给<code>windows</code>的。</p>
<p>关于 <code>this</code> 执行上下文的问题可以通过 <code>apply</code> 方法解决。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> obj = {
  <span class="hljs-attr">sum</span>: <span class="hljs-number">0</span>,
  <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">num1, num2</span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> = num1 + num2;
  },
};

<span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1, num2, callbackObj, callback</span>) {
  callback.<span class="hljs-title function_">apply</span>(callbackObj, [num1, num2]);
}

<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, obj, obj.<span class="hljs-property">add</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">sum</span>);
<span class="hljs-comment">// 3</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">sum</span>);
<span class="hljs-comment">// undefined</span>
</code></pre>
<h3>允许传递多个回调函数</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 一个函数中可以传递多个回调函数，典型的例子如 jQuery</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">beforeCallback</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// Do stuff before send</span>
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">successCallback</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// Do stuff if success message received</span>
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">completeCallback</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// Do stuff upon completion</span>
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">errorCallback</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// Do stuff if error received</span>
}

$.<span class="hljs-title function_">ajax</span>({
  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://example.com/api/collect&#x27;</span>,
  <span class="hljs-attr">before</span>: beforeCallback,
  <span class="hljs-attr">success</span>: successCallback,
  <span class="hljs-attr">complete</span>: completeCallback,
  <span class="hljs-attr">error</span>: errorCallback,
});
</code></pre>
<h3>函数嵌套</h3>
<p>一个回调函数中可以嵌入另一个回调函数，对于这种情况出现多层嵌套时，代码会难以阅读和维护，这个时候可以采用命名回调函数的方式调用，或者采用模块化管理函数，也可以用 Promise 模式编程。</p>
<h2>优点和使用场景</h2>
<p><strong>优点</strong></p>
<ul>
<li>DRY，避免重复代码</li>
<li>可以将通用的逻辑抽象</li>
<li>加强代码可维护性</li>
<li>加强代码可读性</li>
<li>分离专职的函数</li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li>异步编程</li>
<li>事件监听、处理</li>
<li><code>setTimeout</code>、<code>setInterval</code> 方法</li>
<li>通用功能，简化逻辑</li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"回调函数"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

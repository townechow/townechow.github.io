1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-types","debounce"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-types/debounce","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-types/debounce","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","V1px6e--2pDKrmG36aJzV",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T29a8,<h1>函数防抖</h1>
<p><strong>函数防抖</strong>：在频繁触发的情况下，只有足够的空闲时间，才执行代码一次，如果没有执行完就清除掉，重新执行逻辑。简单来说，当触发后再次触发，会取消上一次触发的执行，直到最后一次触发后过去设定时间后才执行。</p>
<p>🏕 <strong>生活中的实例：</strong></p>
<p>假设你正在乘电梯上楼，当电梯门关闭之前发现有人也要乘电梯，礼貌起见，你会按下开门开关，然后等他进电梯；如果在电梯门块关闭之前，又有人来了，你会继续开门；这样一直进行下去，假定电梯没有容量限制，你可能需要等待几分钟，等到最终没人进电梯了，才会关闭电梯门，然后上楼。</p>
<p>函数防抖规定函数再次执行需要满足两个条件：</p>
<ol>
<li>当调用事件触发一段时间后，才会执行该事件</li>
<li>在条件一等待的这段时间间隔内再次调用此动作则将重新计算时间间隔</li>
</ol>
<h2>实现原理</h2>
<p>某些代码不可以在没有间断的情况连续重复执行。第一次调用函数，创建一个定时器，在指定的时间间隔之后运行代码。当第二次调用该函数时，它会清除前一次的定时器并设置另一个。如果前一个定时器已经执行过了，这个操作就没有任何意义。然而，如果前一个定时器尚未执行，其实就是将其替换为一个新的定时器。目的是只有在执行函数的请求停止了一段时间之后才执行。</p>
<h2>代码实现</h2>
<p>当事件触发之后，必须等待设定的时间间隔之后，回调函数才会执行，假若在等待的时间内，事件又触发了则重新再等待设定的时间间隔，直到事件在设定的时间间隔内事件不被触发，那么最后一次触发事件后，则执行函数。</p>
<p>💡 <strong>实现思路：</strong></p>
<p>将目标方法（动作）包装在定时器 <code>setTimeout</code> 里面，然后这个方法是一个事件的回调函数，如果这个回调函数一直执行，那么对应在运行的定时器通过设置 <code>clearTimeout</code> 进行清除，那么定时器内的目标方法也就不会执行，直到定时器的回调函数在时间间隔后开始执行，目标方法才被执行。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-comment">/**
 * 实现函数的防抖（目的是频繁触发中只执行一次）
 * <span class="hljs-doctag">@param</span> func {function} 需要执行的函数
 * <span class="hljs-doctag">@param</span> wait {number} 检测防抖的间隔频率，单位是毫秒（ms）
 * <span class="hljs-doctag">@return</span> {<span class="hljs-type">function</span>} 可被调用执行的函数
 */</span>

<span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func, wait = <span class="hljs-number">500</span>, immediate = <span class="hljs-literal">false</span></span>) {
  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;

  <span class="hljs-comment">// 返回一个函数，这个函数会在一个时间区间结束后的 wait 毫秒执行 func 函数</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) {
    <span class="hljs-comment">// 是否立即执行</span>
    <span class="hljs-keyword">if</span> (immediate) {
      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);
    }

    <span class="hljs-comment">// 函数被调用，清除定时器</span>
    timer &amp;&amp; <span class="hljs-title function_">clearTimout</span>(timer);

    <span class="hljs-comment">// 当返回的函数被最后一个调用后（也就是用户停止了某个连续的操作）</span>
    <span class="hljs-comment">// 再过 wait 毫秒就执行 func</span>
    <span class="hljs-comment">// 这里直接使用箭头函数就不用保存执行上下文的引用了</span>
    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);
    }, delay);
  };
}
</code></pre>
<p>其他框架库实现：<a href="https://github.com/lodash/lodash/blob/master/debounce.js" target="_blank" rel="noopener noreferrer nofollow">Lodash</a> <a href="https://underscorejs.org/#debounce" target="_blank" rel="noopener noreferrer nofollow">Underscore</a></p>
<h2>应用场景</h2>
<p>函数防抖应用场景：连续事件的响应只需执行一次回调</p>
<ul>
<li>按钮提交场景：防止多次点击提交按钮，只执行最后提交的一次</li>
<li>服务端验证场景：表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词功能类似</li>
</ul>
<blockquote>
<p>总结：适合多次事件一次响应的情况</p>
</blockquote>
<h2>应用实践</h2>
<h3>注册实时验证</h3>
<p>这里以用户注册时验证用户名是否被占用为例，如今很多网站为了提高用户体验，不会再输入框失去焦点的时候再去判断用户名是否被占用，而是在输入的时候就在判断这个用户名是否已被注册：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>$(<span class="hljs-string">&#x27;input.user-name&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  $.<span class="hljs-title function_">ajax</span>({
    <span class="hljs-attr">url</span>: <span class="hljs-string">`https://just.com/check`</span>,
    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,
    <span class="hljs-attr">data</span>: {
      <span class="hljs-attr">username</span>: $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>(),
    },
    <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) {
      <span class="hljs-keyword">if</span> (data.<span class="hljs-property">isRegistered</span>) {
        $(<span class="hljs-string">&#x27;.tips&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;该用户名已被注册！&#x27;</span>);
      } <span class="hljs-keyword">else</span> {
        $(<span class="hljs-string">&#x27;.tips&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;恭喜！该用户名还未被注册！&#x27;</span>);
      }
    },
    <span class="hljs-title function_">error</span>(<span class="hljs-params">error</span>) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);
    },
  });
});
</code></pre>
<p>很明显，这样的做法不好的是当用户输入第一个字符的时候，就开始请求判断了，不仅对服务器的压力增大了，对用户体验也未必比原来的好。而理想的做法应该是这样的，当用户输入第一个字符后的一段时间内如果还有字符输入的话，那就暂时不去请求判断用户名是否被占用。在这里引入函数防抖就能很好地解决这个问题：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code>$(<span class="hljs-string">&#x27;input.user-name&#x27;</span>).<span class="hljs-title function_">on</span>(
  <span class="hljs-string">&#x27;input&#x27;</span>,
  <span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    $.<span class="hljs-title function_">ajax</span>({
      <span class="hljs-attr">url</span>: <span class="hljs-string">`https://just.com/check`</span>,
      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,
      <span class="hljs-attr">data</span>: {
        <span class="hljs-attr">username</span>: $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>(),
      },
      <span class="hljs-title function_">success</span>(<span class="hljs-params">data</span>) {
        <span class="hljs-keyword">if</span> (data.<span class="hljs-property">isRegistered</span>) {
          $(<span class="hljs-string">&#x27;.tips&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;该用户名已被注册！&#x27;</span>);
        } <span class="hljs-keyword">else</span> {
          $(<span class="hljs-string">&#x27;.tips&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;恭喜！该用户名还未被注册！&#x27;</span>);
        }
      },
      <span class="hljs-title function_">error</span>(<span class="hljs-params">error</span>) {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);
      },
    });
  })
);
</code></pre>
<p>其实函数防抖的原理也非常地简单，通过闭包保存一个标记来保存  <code>setTimeout</code>  返回的值，每当用户输入的时候把前一个  <code>setTimeout</code> clear 掉，然后又创建一个新的  <code>setTimeout</code>，这样就能保证输入字符后的  <code>interval</code>  间隔内如果还有字符输入的话，就不会执行  <code>fn</code>  函数了。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, interval = <span class="hljs-number">300</span></span>) {
  <span class="hljs-keyword">let</span> timeout = <span class="hljs-literal">null</span>;

  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-built_in">clearTimeout</span>(timeout);

    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);
    }, interval);
  };
}
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="http://demo.nimius.net/debounce_throttle/" target="_blank" rel="noopener noreferrer nofollow">📝 函数节流和函数防抖的可视化区别</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

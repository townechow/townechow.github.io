1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-internal","function-prototype-object-methods"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-internal/function-prototype-object-methods","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-internal/function-prototype-object-methods","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","ejGrVG8sDI7fxTaif9SEe",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3716,<h1>函数原型对象方法</h1>
<h2>Function.prototyp.apply()</h2>
<p><code>apply()</code> 函数用于调用当前函数，并可同时使用指定对象作为本次函数执行时函数内部的 <code>this</code> 指针引用。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js">func.<span class="hljs-title function_">apply</span>( [thisArg [, argsArray]])
</code></pre>
<h2>参数</h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>func</code></td>
<td><code>Function</code> 类型</td>
<td>当前函数调用 <code>apply()</code> 函数的函数，通常为 <code>this</code> （函数内部执行）。</td>
</tr>
<tr>
<td><code>thisArg</code></td>
<td>可选，<code>Object</code> 类型</td>
<td>执行函数时，函数内部 <code>this</code> 指针引用的对象。需要注意的是，使用的 <code>this</code> 值并不一定是该函数执行时真正的 <code>this</code> 值，如果这个函数处于非严格模式下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象（浏览器中就是 Window 对象），同时值为原始值（数字，字符串，布尔值）的 <code>this</code> 会指向该原始值的包装对象。</td>
</tr>
<tr>
<td><code>argsArray</code></td>
<td>可选，<code>Array</code> 类型或 <code>TypedArray</code> 类型</td>
<td>一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值 <code>为null</code> 或 <code>undefined</code>，则表示不需要传入任何参数。从 ECMAScript 5 开始可以使用类数组对象。</td>
</tr>
</tbody>
</table>
<h2>示例</h2>
<h3>基本用法</h3>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> a = {
    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Cherry&#x27;</span>,

    <span class="hljs-attr">func1</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){
		<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)
	}

	<span class="hljs-attr">func2</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){
		<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>){
			<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">func1</span>()
		}.<span class="hljs-title function_">apply</span>(a), <span class="hljs-number">100</span>)
	}
}

a.<span class="hljs-title function_">func2</span>()		<span class="hljs-comment">// Cherry</span>
</code></pre>
<h2>Function.prototype.call()</h2>
<p><code>call()</code> 函数用于调用当前函数，并可同时使用指定对象作为本次执行时函数内部的 <code>this</code> 指针引用。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js">func.<span class="hljs-title function_">call</span>( [thisArg [, arg1 [, arg2 [, argN...]]]] )
</code></pre>
<h2>参数</h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>func</code></td>
<td><code>Function</code> 类型</td>
<td>当前函数调用 <code>call()</code> 函数的函数，通常为 <code>this</code> （函数内部执行）。</td>
</tr>
<tr>
<td><code>thisArg</code></td>
<td>可选，<code>Object</code> 类型</td>
<td>在<em>fun</em>函数运行时指定的 <code>this</code> 值*。*需要注意的是，指定的 <code>this</code> 值并不一定是该函数执行时真正的 <code>this</code> 值，如果这个函数处于非严格模式下，则指定为 <code>null</code> 和 <code>undefined</code> 的 <code>this</code> 值会自动指向全局对象（浏览器中就是 Window 对象），同时值为原始值（数字，字符串，布尔值）的 <code>this</code> 会指向该原始值的自动包装对象。</td>
</tr>
<tr>
<td><code>arg1,arg2,argN</code></td>
<td>可选，<code>Array</code> 类型或 <code>TypedArray</code> 类型</td>
<td>指定的参数列表。</td>
</tr>
</tbody>
</table>
<h2>示例</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> sayName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);
};

<span class="hljs-keyword">const</span> peter = {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;peter&#x27;</span>,
};

sayName.<span class="hljs-title function_">call</span>(peter); <span class="hljs-comment">// peter</span>
</code></pre>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person1</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;person1&#x27;</span>;
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);
  };
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">Person2</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;person2&#x27;</span>;
}

<span class="hljs-keyword">var</span> sam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person2</span>();

<span class="hljs-title class_">Person1</span>.<span class="hljs-title function_">call</span>(sam);

sam.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// person1</span>
</code></pre>
<h2>Function.prototype.bind()</h2>
<p><code>bind()</code> 方法创建一个新的函数, 当被调用时，将其 <code>this</code> 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</p>
<h2>语法</h2>
<pre class="hljs"><code class="language-js">func.<span class="hljs-title function_">bind</span>( thisArg [, arg1 [, arg2 [, ...]]] )
</code></pre>
<h2>参数</h2>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>func</code></td>
<td><code>Function</code> 类型</td>
<td></td>
</tr>
<tr>
<td><code>thisArg</code></td>
<td>可选，<code>Object</code> 类型</td>
<td>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用 <code>new</code> 操作符调用绑定函数时，该参数无效。</td>
</tr>
<tr>
<td><code>arg1,arg2,argN</code></td>
<td>可选，<code>Array</code> 类型或 <code>TypedArray</code> 类型</td>
<td>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</td>
</tr>
</tbody>
</table>
<h2>描述</h2>
<p><code>bind()</code> 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的 <code>call</code> 属性）。当<strong>新函数</strong>被调用时 <code>this</code> 值绑定到 <code>bind()</code> 的第一个参数，该参数不能被重写。绑定函数被调用时，<code>bind()</code> 也接受预设的参数提供给原函数。一个绑定函数也能使用 <code>new</code> 操作符创建对象：这种行为就像把原函数当成构造器。提供的 <code>this</code> 值被忽略，同时调用时的参数被提供给模拟函数。</p>
<h2>示例</h2>
<h3>代码示例</h3>
<p><code>bind()</code> 最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的 <code>this</code> 值。JavaScript 新手经常犯的一个错误是将一个方法从对象中拿出来，然后再调用，希望方法中的 <code>this</code> 是原来的对象（比如在回调中传入这个方法）。如果不做特殊处理的话，一般会丢失原来的对象。从原来的函数和原来的对象创建一个绑定函数，则能很漂亮地解决这个问题。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-number">9</span>;

<span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = {
  <span class="hljs-attr">x</span>: <span class="hljs-number">8</span>,
  <span class="hljs-attr">getX</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>;
  },
};

<span class="hljs-variable language_">module</span>.<span class="hljs-title function_">getX</span>(); <span class="hljs-comment">// return 8</span>

<span class="hljs-keyword">var</span> retrieveX = <span class="hljs-variable language_">module</span>.<span class="hljs-property">getX</span>;
<span class="hljs-title function_">retrieveX</span>(); <span class="hljs-comment">// return 9</span>

<span class="hljs-keyword">var</span> boundGetX = retrieveX.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">module</span>);
<span class="hljs-title function_">boundGetX</span>(); <span class="hljs-comment">// return 8</span>
</code></pre>
<h3>偏函数</h3>
<p><code>bind()</code> 的另一个最简单的用法是使一个函数拥有预设的初始参数。这些参数（如果有的话）作为 <code>bind()</code> 的第二个参数跟在 <code>this</code>（或其他对象）后面，之后它们会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们的后面。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">list</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);
}

<span class="hljs-keyword">var</span> list1 = <span class="hljs-title function_">list</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [1, 2, 3]</span>

<span class="hljs-comment">// Create a function with a preset leading argument</span>
<span class="hljs-keyword">var</span> defaultsList = list.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-number">10</span>);

<span class="hljs-keyword">var</span> list2 = <span class="hljs-title function_">defaultsList</span>(); <span class="hljs-comment">// [10]</span>
<span class="hljs-keyword">var</span> list3 = <span class="hljs-title function_">defaultsList</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [10, 1, 2, 3]</span>
</code></pre>
<h3>配合定时器</h3>
<p>在默认情况下，使用 <code>window.setTimeout()</code> 时，<code>this</code> 关键字会指向 <code>window</code> （或全局）对象。当使用类的方法时，需要 <code>this</code> 引用类的实例，你可能需要显式地把 <code>this</code> 绑定到回调函数以便继续使用实例。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">LateBloomer</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">this</span>.<span class="hljs-property">petalCount</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">12</span>) + <span class="hljs-number">1</span>;
}

<span class="hljs-comment">// Declare bloom after a delay of 1 second</span>
<span class="hljs-title class_">LateBloomer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bloom</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">declare</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">1000</span>);
};

<span class="hljs-title class_">LateBloomer</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">declare</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I am a beautiful flower with &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">petalCount</span> + <span class="hljs-string">&#x27; petals!&#x27;</span>);
};

<span class="hljs-keyword">var</span> flower = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LateBloomer</span>();
flower.<span class="hljs-title function_">bloom</span>(); <span class="hljs-comment">// 一秒钟后, 调用&#x27;declare&#x27;方法</span>
</code></pre>
<h2></h2>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

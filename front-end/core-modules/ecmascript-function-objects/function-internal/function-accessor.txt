1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","core-modules","ecmascript-function-objects","function-internal","function-accessor"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/ecmascript-function-objects/function-internal/function-accessor","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/ecmascript-function-objects/function-internal/function-accessor","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","nrcAtk-4zUkJ5_05jpJ62",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1f39,<h1>函数存取器</h1>
<h2>取值函数</h2>
<p><code>getter</code> 语法将对象属性绑定到查询该属性时将被调用的函数。</p>
<h3>语法</h3>
<pre class="hljs"><code class="language-js">{<span class="hljs-keyword">get</span> <span class="hljs-title function_">prop</span>() {
  <span class="hljs-comment">// do something</span>
}}

{get [expression]() {
  <span class="hljs-comment">// do something</span>
}}
</code></pre>
<p><strong>参数：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>prop</code></td>
<td style="text-align:left">要绑定到给定函数的属性名</td>
</tr>
<tr>
<td style="text-align:left"><code>expression</code></td>
<td style="text-align:left">一个计算属性名的表达式</td>
</tr>
</tbody>
</table>
<h3>描述</h3>
<p>有时需要允许访问返回动态计算值的属性，或者你可能需要反映内部变量的状态，而不需要使用显式方法调用。在  JavaScript 中，可以使用 <code>getter</code> 来实现。虽然可以使用 <code>getter</code> 和 <code>setter</code> 来创建一个伪属性类型，但是不可能同时将一个 <code>getter</code> 绑定到一个属性并且该属性实际上具有一个值。</p>
<p>使用 <code>get</code> 语法时应注意以下问题：</p>
<ul>
<li>可以使用数值或字符串作为标识</li>
<li>必须不带参数</li>
<li>它不能与另一个 <code>get</code> 或具有相同属性的数据条目同时出现在一个对象字面量中。</li>
</ul>
<p>可以通过 <code>delete</code> 操作符删除 getter。</p>
<h3>示例</h3>
<h4>基本用法</h4>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = {
  <span class="hljs-attr">arr</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],
  <span class="hljs-keyword">get</span> <span class="hljs-title function_">num</span>(){
    <span class="hljs-comment">// 只有数组长度等于 5 时，获取 foo.b 才返回数组索引为 1 的值</span>
    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-property">length</span> === <span class="hljs-number">5</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>[<span class="hljs-number">1</span>]
    }
  }
}

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">num</span>)
<span class="hljs-comment">// 1</span>
</code></pre>
<h4>删除对象的取值函数</h4>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = {
  <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>() {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;BINGO!&#x27;</span>
  }
}

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">name</span>)
<span class="hljs-comment">// Output: &#x27;BINGO!&#x27;</span>

<span class="hljs-keyword">delete</span> foo.<span class="hljs-property">name</span>
<span class="hljs-comment">// true</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">name</span>)
<span class="hljs-comment">// Output: undefined</span>
</code></pre>
<h4>在现有对象上定义取值函数</h4>
<p>可以使用 <code>defineProperty</code> 方法在现有对象上定义取值函数。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> foo = {
  <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>
};

<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">definedProperty</span>(foo, <span class="hljs-string">&quot;b&quot;</span>, {
  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + <span class="hljs-number">1</span>;
  }
});

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">b</span>);
<span class="hljs-comment">// Runs the getter, which yields a + 1 (which is 1)</span>
</code></pre>
<h4>计算属性名</h4>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> expr = <span class="hljs-string">&#x27;foo&#x27;</span>;

<span class="hljs-keyword">const</span> obj = {
  get [expr]() { <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;bar&#x27;</span>; }
}

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">foo</span>)
<span class="hljs-comment">// &#x27;bar&#x27;</span>
</code></pre>
<h2>存值函数</h2>
<p>当尝试设置属性时，<code>set</code> 语法将对象属性绑定到要调用的函数。</p>
<h3>语法</h3>
<pre class="hljs"><code class="language-js">{<span class="hljs-keyword">set</span> <span class="hljs-title function_">prop</span>(<span class="hljs-params">val</span>) { . . . }}
{set [expression](val) { . . . }}
</code></pre>
<p><strong>参数：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>prop</code></td>
<td style="text-align:left">要绑定到给定函数的属性值</td>
</tr>
<tr>
<td style="text-align:left"><code>val</code></td>
<td style="text-align:left">用于保存尝试分配给 <code>prop</code> 值的变量的一个别名</td>
</tr>
<tr>
<td style="text-align:left"><code>expression</code></td>
<td style="text-align:left">从 ECMAScript 2015 开始，还可以使用一个计算属性名的表达式绑定到给定的函数</td>
</tr>
</tbody>
</table>
<h3>描述</h3>
<p>在 JavaScript 中，如果试着改变一个属性的值，那么对应的 <code>setter</code> 将被执行。<code>setter</code> 经常和 <code>getter</code> 连用以创建一个伪属性。不可能在具有真实值的属性上同时拥有一个 <code>setter</code> 器。</p>
<p>使用 <code>set</code> 语法时请注意：</p>
<ul>
<li>它的标识符可以是数字或字符串</li>
<li>它必须有一个明确的参数</li>
<li>在对象字面量中，不能为一个已有真实值的变量使用 <code>set</code>，也不能为一个属性设置多个 <code>set</code></li>
</ul>
<h3>示例</h3>
<h4>基本用法</h4>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> foo = {
  <span class="hljs-keyword">set</span> <span class="hljs-title function_">current</span>(<span class="hljs-params">name</span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">log</span>.<span class="hljs-title function_">push</span>(name)
  },
  <span class="hljs-attr">log</span>: []
}

foo.<span class="hljs-property">current</span> = <span class="hljs-string">&#x27;EN&#x27;</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">log</span>)
<span class="hljs-comment">// [&#x27;EN&#x27;]</span>

foo.<span class="hljs-property">current</span> = <span class="hljs-string">&#x27;ZN&#x27;</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">log</span>)
<span class="hljs-comment">// [&#x27;EN&#x27;, &#x27;ZN&#x27;]</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

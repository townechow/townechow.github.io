1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"ToCgoFiTXvECVEVLCeZww","p":"","c":["","front-end","core-modules","executable-code-and-execution-contexts","memory-management","memory-model"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/executable-code-and-execution-contexts/memory-management/memory-model","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/executable-code-and-execution-contexts/memory-management/memory-model","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","96qbwBpS84NMbIRkITdjo",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3475,<h1>内存模型</h1>
<p>JavaScript 内存空间分为 <strong>栈</strong>（Stack）、<strong>堆</strong>（Heap）、<strong>池</strong>（一般也会归类为栈中）。其中 <strong>栈</strong> 存放变量，<strong>堆</strong> 存放复杂对象，<strong>池</strong> 存放常量。</p>
<h2>栈数据结构</h2>
<p>与 C / C++ 不同，JavaScript 中并没有严格意义上区分栈内存与堆内存。因此我们可以简单粗暴的理解为 JavaScript 的所有数据都保存在堆内存中。但是在某些场景，我们仍然需要基于堆栈数据结构的思维来实现一些功能，比如 JavaScript 的 <a href="/front-end/core-modules/executable-code-and-execution-contexts/execution/execution-context-stack">执行上下文</a>。执行上下文的执行顺序借用了栈数据结构的存取方式。</p>
<p>要简单理解栈的存取方式，我们可以通过类比乒乓球盒子来分析。</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/memory-model/table-tennis-example.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;乒乓球盒子与栈类比&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{720}</span> /&gt;</span></span>;
</code></pre>
<p>这种乒乓球的存放方式与栈中存取数据的方式如出一辙。处于盒子中最顶层的 <code>乒乓球 5</code>，它一定是最后被放进去，但可以最先被使用。而我们想要使用底层的 <code>乒乓球 1</code>，就必须将上面的 4 个乒乓球取出来，让 <code>乒乓球 1</code> 处于盒子顶层。这就是栈空间 <strong>先进后出，后进先出</strong> 的特点。图中已经详细的表明了栈空间的存储原理。</p>
<h2>堆数据结构</h2>
<p>堆数据结构是一种树状结构。它的存取数据的方式，则与书架与书非常相似。</p>
<p>书虽然也整齐的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在 JSON 格式的数据中，我们存储的 <code>key-value</code> 是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。</p>
<h2>队列数据结构</h2>
<p>队列是一种先进先出（FIFO）的数据结构。正如排队过安检一样，排在队伍前面的人一定是最先过检的人。用以下的图示可以清楚的理解队列的原理。</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/memory-model/queue-structure.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;队列数据结构&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{720}</span> /&gt;</span></span>;
</code></pre>
<h2>变量对象与基础数据类型</h2>
<p>JavaScript 的 <a href="/front-end/core-modules/executable-code-and-execution-contexts/execution/execution-context-stack">执行上下文</a> 生成之后，会创建一个叫做 <a href="/front-end/core-modules/executable-code-and-execution-contexts/execution/variable-object">变量对象</a> 的特殊对象，JavaScript 的基础数据类型往往都会保存在变量对象中。</p>
<p>严格意义上来说，变量对象也是存放于堆内存中，但是由于变量对象的特殊职能，我们在理解时仍然需要将其与堆内存区分开来。</p>
<p>JavaScript 中的基础数据类型，这些值都有固定的大小，往往都保存在栈内存中（闭包除外），由系统自动分配存储空间。我们可以直接操作保存在栈内存空间的值，因此基础数据类型都是按值访问，数据在栈内存中的存储与使用方式类似于数据结构中的堆栈数据结构，遵循 <strong>后进先出</strong> 的原则。</p>
<blockquote>
<p>暂不考虑 Symbol 类型</p>
</blockquote>
<h2>引用数据类型与堆内存</h2>
<p>与其他语言不同，JavaScript 的引用数据类型，比如数组 Array，它们值的大小是不固定的。引用数据类型的值是保存在堆内存中的对象。JavaScript 不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。这里的引用，我们可以粗浅地理解为保存在栈内存中的一个<strong>引用地址</strong>，该地址与堆内存的实际值相关联。 堆存取数据的方式，则与书架与书非常相似。 书虽然也有序的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在 JSON 格式的数据中，我们存储的 <code>key-value</code> 是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。</p>
<p>为了更好的搞懂变量对象与堆内存，我们可以结合以下例子与图解进行理解。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 变量对象</span>
<span class="hljs-keyword">var</span> a1 = <span class="hljs-number">0</span>;
<span class="hljs-comment">// 变量对象</span>
<span class="hljs-keyword">var</span> a2 = <span class="hljs-string">&#x27;Bingo!&#x27;</span>;
<span class="hljs-comment">// 变量对象</span>
<span class="hljs-keyword">var</span> a3 = <span class="hljs-literal">null</span>;

<span class="hljs-comment">// 变量 b 存在于变量对象中，{m: 20} 作为对象存在于堆内存中</span>
<span class="hljs-keyword">var</span> b = { <span class="hljs-attr">m</span>: <span class="hljs-number">20</span> };
<span class="hljs-comment">// 变量 c 存在于变量对象中，[1, 2, 3] 作为对象存在于堆内存中</span>
<span class="hljs-keyword">var</span> c = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];
</code></pre>
<p>&lt;br/&gt;</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/memory-model/sample-illustruction.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;sample-illustruction&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{640}</span> /&gt;</span></span>;
</code></pre>
<p>因此当我们要访问堆内存中的引用数据类型时，实际上我们首先是从变量对象中获取了该对象的 <strong>引用地址</strong>（或者地址指针），然后再从堆内存中取得我们需要的数据。</p>
<p>理解了 JavaScript 的内存空间，我们就可以借助内存空间的特性来验证一下数据类型的特点了。</p>
<h2>数据拷贝</h2>
<h3>基本数据类型</h3>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;
<span class="hljs-keyword">const</span> b = a;
b = <span class="hljs-number">20</span>;
</code></pre>
<p>在变量对象中数据发生拷贝操作时，系统会自动为新的变量分配一个新值。<code>const b = a</code> 赋值操作执行后，虽然变量 <code>a</code> 和变量 <code>b</code> 均为 <code>100</code>，但是它们其实已经是相互独立互不影响的值了。</p>
<p>具体变化如下图所示：</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/memory-model/basic-type-copy-sample.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;basic-type-copy-sample&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{640}</span> /&gt;</span></span>;
</code></pre>
<h3>引用数据类型</h3>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> m = { <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">20</span> };
<span class="hljs-keyword">const</span> n = m;
n.<span class="hljs-property">a</span> = <span class="hljs-number">15</span>;
</code></pre>
<p>引用类型的拷贝同样也会为新的变量自动分配一个新的值保存在变量对象中，但不同的是，这个新的值，仅仅只是引用类型的一个<strong>地址指针</strong>。当地址指针相同时，尽管他们相互独立，但是在变量对象中访问到的具体对象实际上是同一个。</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/memory-model/refered-type-copy-sample.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;refered-type-copy-sample&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{520}</span> /&gt;</span></span>;
</code></pre>
<h2>归纳总结</h2>
<table>
<thead>
<tr>
<th style="text-align:left">栈内存</th>
<th style="text-align:left">堆内存</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">存储基础数据类型</td>
<td style="text-align:left">存储引用数据类型</td>
</tr>
<tr>
<td style="text-align:left">按值访问</td>
<td style="text-align:left">按引用访问</td>
</tr>
<tr>
<td style="text-align:left">存储的值大小固定</td>
<td style="text-align:left">存储的值大小不定，可动态调整</td>
</tr>
<tr>
<td style="text-align:left">由系统自动分配内存空间</td>
<td style="text-align:left">由开发者通过代码进行分配</td>
</tr>
<tr>
<td style="text-align:left">主要用来执行程序</td>
<td style="text-align:left">主要用来存放对象</td>
</tr>
<tr>
<td style="text-align:left">空间小，运行效率高</td>
<td style="text-align:left">空间大，但是运行效率相对较低</td>
</tr>
<tr>
<td style="text-align:left">先进后出，后进先出</td>
<td style="text-align:left">无序存储，可根据引用直接获取</td>
</tr>
</tbody>
</table>
<h2>参考资料</h2>
<ul>
<li><a href="https://segmentfault.com/a/1190000006104910" target="_blank" rel="noopener noreferrer nofollow">📝 内存基本知识</a></li>
<li><a href="https://www.jianshu.com/p/996671d4dcc4" target="_blank" rel="noopener noreferrer nofollow">📝 内存空间详细图解</a></li>
<li><a href="https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239" target="_blank" rel="noopener noreferrer nofollow">📝 JavaScript's Memory Model</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"内存模型"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

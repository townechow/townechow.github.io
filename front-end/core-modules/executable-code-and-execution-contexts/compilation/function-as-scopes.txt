1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","core-modules","executable-code-and-execution-contexts","compilation","function-as-scopes"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/executable-code-and-execution-contexts/compilation/function-as-scopes","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/executable-code-and-execution-contexts/compilation/function-as-scopes","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","BddmKJKoBtR2nZJl97Mw0",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T3733,<h1>函数作用域</h1>
<p><strong>函数作用域</strong> 指属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。这种设计方案是非常有用的，能充分利用 JavaScript 变量可以根据需要改变值类型的动态特性。</p>
<h2>隐藏内部实现</h2>
<p>对函数的传统认知就是先声明一个函数，然后再向里面添加代码。但反过来想也可以带来一些启示：从所写的代码中挑选出一个任意的片段，然后用函数声明对它进行包装，实际上就是把这些代码隐藏起来。</p>
<p>实际的结果就是在这个代码片段的周围创建了一个作用域气泡，也就是说这段代码中的任何声明（变量或函数）都将绑定在这个新创建的包装函数的作用域中，而不是先前所在的作用域中。换句话说，可以把变量和函数包裹在一个函数的作用域中，然后用这个作用域来隐藏它们。</p>
<p>有很多原因促成了这种基于作用域的隐藏方法。它们大都是从 <a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E6%9D%83%E9%99%90%E5%8E%9F%E5%88%99" target="_blank" rel="noopener noreferrer nofollow">最小权限原则</a> 中引申出来的。</p>
<p>这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都 <strong>隐藏</strong> 起来，比如某个模块或对象的 API 设计。这个原则可以延伸到如何选择作用域来包含变量和函数。如果所有变量和函数都在全局作用域中。当然可以在所有的内部嵌套作用域中访问到它们。但这样会破坏前面提到的最小权限原则，因为可能会暴露过多的变量或函数，而这些变量或函数本应该是私有的，正确的代码应该是 <strong>可以阻止对这些变量或函数进行访问</strong>。</p>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params">a</span>) {
  b = a + <span class="hljs-title function_">doSomethingElse</span>(a * <span class="hljs-number">2</span>);

  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b * <span class="hljs-number">3</span>);
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomethingElse</span>(<span class="hljs-params">a</span>) {
  <span class="hljs-keyword">return</span> a - <span class="hljs-number">1</span>;
}

<span class="hljs-keyword">var</span> b;

<span class="hljs-title function_">doSomething</span>(<span class="hljs-number">2</span>);
<span class="hljs-comment">// 15</span>
</code></pre>
<p>在这个代码片段中，变量 <code>b</code> 和函数 <code>doSomethingElse</code> 应该是 <code>doSomething</code> 内部具体实现的私有内容。给予外部作用域对 <code>b</code> 和 <code>doSomethingElse</code> 的访问权限不仅没有必要，而且可能是危险的，因为它们可能被有意或无意地以非预期的方式使用，从而导致超出了 <code>doSomething</code> 的适用条件。更使用的设计会将这些私有的具体内容隐藏在 <code>doSomething</code> 内部。</p>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params">a</span>) {
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomethingElse</span>(<span class="hljs-params">a</span>) {
    <span class="hljs-keyword">return</span> a - <span class="hljs-number">1</span>;
  }

  <span class="hljs-keyword">var</span> b;

  b = a + <span class="hljs-title function_">doSomethingElse</span>(a * <span class="hljs-number">2</span>);

  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b * <span class="hljs-number">3</span>);
}

<span class="hljs-title function_">doSomething</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 15</span>
</code></pre>
<p>现在，<code>b</code> 和 <code>doSomethingElse</code> 都无法从外部被访问，而只能被 <code>doSomething</code> 所控制。功能性和最终效果都没有受影响，但是设计上将具体内容私有化了，设计良好的软件都会依次进行实现。</p>
<h2>规避命名冲突</h2>
<p>隐藏作用域中的变量和函数可以避免同名标识符之间的冲突，两个标识符可能具有相同的名字但用途却不一样，无意间可能造成命名冲突。冲突会导致变量的值被意外覆盖。</p>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">a</span>) {
    <span class="hljs-comment">// 修改 for 循环所属作用域中的 i</span>
    i = <span class="hljs-number">3</span>;
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + i);
  }

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {
    <span class="hljs-comment">// 糟糕，无限循环了！</span>
    <span class="hljs-title function_">bar</span>(i * <span class="hljs-number">2</span>);
  }
}

<span class="hljs-title function_">foo</span>();
</code></pre>
<h3>全局命名空间</h3>
<p>变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。</p>
<p>这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyReallyCoolLibrary</span> = {
  <span class="hljs-attr">awesome</span>: <span class="hljs-string">&#x27;stuff&#x27;</span>,
  <span class="hljs-attr">doSomething</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-comment">// ...</span>
  },
  <span class="hljs-attr">doAnotherThing</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    <span class="hljs-comment">// ...</span>
  },
};
</code></pre>
<h3>模块管理</h3>
<p>另外一种避免冲突的办法和现代的模块机制很接近，就是众多模块管理器中挑选一个来使用。使用这些工具，任何库都无需将标识符加入到全局作用域中，而是通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。</p>
<p>显而易见，这些工具并没有能够违反词法作用域规则的功能。它们只是利用作用域的规则强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突，</p>
<p>因此，只要你愿意，即使不使用任何依赖管理工具也可以实现规避冲突的功效。</p>
<p>在任意代码片段外部添加包装函数，可以将内部的变量和函数定义 <strong>隐藏</strong> 起来，外部作用域无法访问包装函数内部的任何内容。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> a = <span class="hljs-number">2</span>;

<span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// &lt;-- 添加这一行</span>
  <span class="hljs-keyword">const</span> a = <span class="hljs-number">3</span>;
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 3</span>
} <span class="hljs-comment">// &lt;-- 以及这一行</span>
<span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// &lt;-- 以及这一行</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 2</span>
</code></pre>
<p>虽然这种技术可以解决一些问题，但是它并不理想，因为会导致一些额外的问题。首先，必须声明一个具名函数 <code>foo()</code> ，意味着 <code>foo</code> 这个名称本身&quot;污染&quot;了所在作用域（在这个例子中是全局作用域）。其次，必须显式地通过函数名<code>foo()</code>调用这个函数才能运行其中的代码。</p>
<p>如果函数不需要函数名（或者至少函数名可以不污染所在作用域），并且能够自动运行，这将会更加理想。</p>
<h2>匿名和具名函数表达式</h2>
<p>无论是匿名还是具名，都是针对 <strong>函数表达式</strong> 的。函数声明必须有名称，否则报错。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 函数声明</span>
<span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// do something</span>
}
</code></pre>
<p>而函数表达式可以有名称也可以没有名称。</p>
<p><strong>匿名函数表达式：</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-comment">// do something</span>
};
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">name</span>);
<span class="hljs-comment">// foo</span>
</code></pre>
<p><strong>具名函数表达式：</strong></p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 不要这样写</span>
<span class="hljs-keyword">let</span> bar = <span class="hljs-keyword">function</span> <span class="hljs-title function_">foobar</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// do something</span>
};
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-property">name</span>);
<span class="hljs-comment">// foobar</span>
</code></pre>
<p>对于函数表达式最熟悉的场景可能就是回调参数了。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I waited 1 second!&#x27;</span>);
}, <span class="hljs-number">1000</span>);
</code></pre>
<p>这叫 <strong>匿名函数表达式</strong>，因为 <code>function(){}</code> 是没有名称的标识符。</p>
<p>⚠️ <strong>注意</strong>：函数表达式可以是匿名的，而 <strong>函数声明</strong> 是不可以省略函数名。</p>
<p>匿名函数表达式的缺点：</p>
<ul>
<li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难</li>
<li>如果没有函数名，当函数需要引用自身时只能使用已经过期的 <code>arguments.callee</code> 引用。比如在递归中，另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身</li>
<li>匿名函数省略了对于代码可读性 / 可理解性很重要的函数名。一个描述性的名称可以让代码不言自明</li>
</ul>
<p>行内函数表达式非常强大且有用——匿名和具名之间的区别并不会对这点有任何影响。给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名时一个最佳实践。</p>
<h2>立即执行函数表达式 IIFE</h2>
<p><strong>立即执行函数表达式</strong> 又称 <strong>自执行函数</strong>，社区给他规定了术语为 <strong>IIFE</strong>（Immediately Invoked Function Expression）。</p>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs"><code class="language-js">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-comment">// do something</span>
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;IIFE&#x27;</span>);
})();
</code></pre>
<p>IIFE 的另一个非常普遍的进阶用法是把它们当作函数调用并传递参数进去。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;

(<span class="hljs-keyword">function</span> <span class="hljs-title function_">IIFE</span>(<span class="hljs-params"><span class="hljs-variable language_">global</span></span>) {
  <span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>;
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);
  <span class="hljs-comment">// 3</span>
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-property">a</span>);
  <span class="hljs-comment">// 2</span>
})(<span class="hljs-variable language_">window</span>);

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);
<span class="hljs-comment">// 2</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","core-modules","executable-code-and-execution-contexts","execution","variable-object"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/executable-code-and-execution-contexts/execution/variable-object","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/executable-code-and-execution-contexts/execution/variable-object","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","CuU7XbR5xXUoMY9VRlBjl",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2c62,<h1>变量对象</h1>
<p>变量对象是与 <a href="/front-end/core-modules/executable-code-and-execution-contexts/execution/execution-context-stack">执行上下文</a> 相关的数据作用域，存储了在上下文中定义的 <strong>变量</strong> 和 <strong>函数声明</strong>。</p>
<p>因为不同执行上下文中的变量对象稍有不同，所以我们来聊聊 <a href="/front-end/core-modules/executable-code-and-execution-contexts/execution/#%E5%85%A8%E5%B1%80%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87">全局执行上下文</a> 下的变量对象和 <a href="/front-end/core-modules/executable-code-and-execution-contexts/execution/#%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87">函数执行上下文</a> 下的变量对象。</p>
<h2>全局执行上下文</h2>
<p>💡 <strong>全局执行上下文中的变量对象就是全局对象</strong></p>
<p>我们先了解一个概念，叫全局对象。在 <a href="http://www.w3school.com.cn/jsref/jsref_obj_global.asp" target="_blank" rel="noopener noreferrer nofollow">W3School</a> 中也有介绍：</p>
<p><strong>全局对象</strong> 是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。</p>
<p>在顶层 JavaScript 代码中，可以用关键字 <code>this</code> 引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。</p>
<p>例如，当 JavaScript 代码引用 <code>parseInt</code> 函数时，它引用的是全局对象的 <code>parseInt</code> 属性，相当于 <code>window.parseInt</code>。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。</p>
<p>如果看的不是很懂的话，容我再来介绍下全局对象:</p>
<ol>
<li>可以通过 <code>this</code> 引用，在 JavaScript 中，全局对象就是 Window 对象</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);
<span class="hljs-comment">// Window { ... }</span>
</code></pre>
<ol start="2">
<li>全局对象是由 Object 构造函数实例化的一个对象</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);
<span class="hljs-comment">// true</span>
</code></pre>
<ol start="3">
<li>预定义全局函数和全局属性，在任何地方均可调用</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">random</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">Math</span>.<span class="hljs-property">random</span>);
<span class="hljs-comment">// true</span>

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">Math</span>.<span class="hljs-property">PI</span>);
<span class="hljs-comment">// true</span>
</code></pre>
<ol start="4">
<li>作为全局变量的宿主。</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> a = <span class="hljs-string">&#x27;foo&#x27;</span>;

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>);
<span class="hljs-comment">// foo</span>
</code></pre>
<ol start="5">
<li>在 JavaScript 中，全局对象有 Window 属性指向自身</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> a = <span class="hljs-string">&#x27;foo&#x27;</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">a</span>);
<span class="hljs-comment">// &#x27;foo&#x27;</span>

<span class="hljs-variable language_">this</span>.<span class="hljs-property">window</span>.<span class="hljs-property">b</span> = <span class="hljs-string">&#x27;foo&#x27;</span>;
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>);
<span class="hljs-comment">// &#x27;foo&#x27;</span>
</code></pre>
<h2>函数执行上下文</h2>
<p>在函数执行上下文中，我们用 <strong>活动对象</strong>（Activation Object，AO）来表示变量对象。</p>
<p><strong>活动对象</strong> 和 <strong>变量对象</strong> 其实是同一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 Activation Object ，而只有 <strong>被激活</strong> 的变量对象，也就是活动对象上的各种属性才能被访问。</p>
<p>活动对象是在进入函数执行上下文时刻被创建的，它通过函数的 <code>arguments</code> 属性初始化。<code>arguments</code> 属性值是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noopener noreferrer nofollow">Arguments 对象</a>。</p>
<h2>执行过程</h2>
<p>执行上下文的代码会分成两个阶段进行处理：</p>
<ol>
<li><strong>分析</strong>：进入执行上下文</li>
<li><strong>执行</strong>：代码执行</li>
</ol>
<h3>进入执行上下文阶段的变量对象</h3>
<p>当进入执行上下文时，这时候还没有执行代码，变量对象的创建，依次经历了以下几个过程：</p>
<ol>
<li>函数的所有形参（如果是函数执行上下文）
<ul>
<li>建立 Arguments 对象</li>
<li>检查当前上下文的参数，由名称和对应值组成的一个变量对象的属性被创建</li>
<li>没有实参，属性值设为 <code>undefined</code></li>
</ul>
</li>
<li>函数声明
<ul>
<li>检查当前上下文的函数声明，也就是使用 <code>function</code> 关键字声明的函数</li>
<li>在变量对象中以函数名建立一个属性，属性值为指向该函数所在内存地址的引用</li>
<li>如果变量对象已经存在相同名称的属性，那么该属性将会被新的引用所覆盖</li>
</ul>
</li>
<li>变量声明
<ul>
<li>检查当前上下文中的变量声明</li>
<li>每找到一个变量声明，就在变量对象中以变量名建立一个属性，属性值为 <code>undefined</code></li>
<li>如果变量名称与已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性（亦可理解为为了防止同名的变量属性被修改为 <code>undefined</code>，则会直接跳过，原属性值不会被修改）</li>
</ul>
</li>
</ol>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a</span>) {
  <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;

  <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) {}

  <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {};

  b = <span class="hljs-number">3</span>;
}
</code></pre>
<p>在进入执行上下文后，这时候的活动对象 AO 是：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable constant_">AO</span> = {
  <span class="hljs-attr">arguments</span>: {
      <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,
      <span class="hljs-attr">length</span>: <span class="hljs-number">1</span>
  },
  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,
  <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>,
  <span class="hljs-attr">c</span>: reference to <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {},
  <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span>
}
</code></pre>
<h3>代码执行阶段的变量对象</h3>
<p>在代码执行阶段，会根据代码，顺序执行代码，修改变量对象的值</p>
<p>还是上面的例子，当代码执行完后，这时候的 AO 是：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable constant_">AO</span> = {
  <span class="hljs-attr">arguments</span>: {
    <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,
    <span class="hljs-attr">length</span>: <span class="hljs-number">1</span>
  },
  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,
  <span class="hljs-attr">b</span>: <span class="hljs-number">3</span>,
  <span class="hljs-attr">c</span>: reference to <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>){},
  <span class="hljs-attr">d</span>: reference to <span class="hljs-title class_">FunctionExpression</span> <span class="hljs-string">&quot;d&quot;</span>
}
</code></pre>
<p>到这里变量对象的创建过程就介绍完了，让我们简洁的总结我们上述所说：</p>
<ol>
<li>全局执行上下文的变量对象初始化是全局对象</li>
<li>函数执行上下文的变量对象初始化只包括 Arguments 对象</li>
<li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li>
<li>在代码执行阶段，会再次修改变量对象的属性值</li>
</ol>
<h2>变量对象和活动对象</h2>
<blockquote>
<p>VO 和 AO 到底是什么关系？</p>
</blockquote>
<p>未进入执行阶段之前，变量对象（VO：Variable Object）中的属性都不能访问。</p>
<p>但是进入执行阶段之后，活动对象（AO：Activation Object）被激活，里面的属性包括 VO、函数执行时传入的参数和 Arguments 对象都能被访问了，然后开始进行执行阶段的操作。</p>
<p>利用公式可以简单表述为:</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable constant_">AO</span> = <span class="hljs-variable constant_">VO</span> + <span class="hljs-keyword">function</span> parameters + <span class="hljs-variable language_">arguments</span>
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener noreferrer nofollow">📝 JavaScript 深入之变量对象</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

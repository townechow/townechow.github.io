1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/ec0a9d078e716e00.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"P2aiewlOc1Z9OPuSRFf3D","p":"","c":["","front-end","core-modules","executable-code-and-execution-contexts","execution","execution-context-stack"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/executable-code-and-execution-contexts/execution/execution-context-stack","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ec0a9d078e716e00.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/executable-code-and-execution-contexts/execution/execution-context-stack","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","IMMTZ7hMeOgNoAjFIMMW-",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1de7,<h1>执行上下文栈</h1>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/execution-context-stack/lifecycle.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;execution context lifecycle&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{720}</span> /&gt;</span></span>;
</code></pre>
<p>当我们调用一个函数时（激活），一个新的执行上下文就会被创建。</p>
<p>一个执行上下文的生命周期可分为 <strong>创建阶段</strong> 和 <strong>代码执行阶段</strong> 两个阶段。</p>
<p><strong>创建阶段</strong>：在这个阶段中，执行上下文会分别进行以下操作</p>
<ul>
<li>创建 <a href="./variable-object">变量对象</a></li>
<li>建立 <a href="./scope-chain">作用域链</a></li>
<li>确定 <a href="./this">this</a> 的指向</li>
</ul>
<p><strong>代码执行阶段</strong>：创建完成之后，就会开始执行代码，并依次完成以下步骤</p>
<ul>
<li>变量赋值</li>
<li>函数引用</li>
<li>执行其他代码</li>
</ul>
<p>&lt;br/&gt;</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../assets/execution-context-stack/execution-context.jpg&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;execution context&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{640}</span> /&gt;</span></span>;
</code></pre>
<h2>可执行代码</h2>
<p>每次当控制器转到可执行代码的时候，就会进入一个执行上下文。</p>
<p>执行上下文可以理解为当前代码的执行环境，它会形成一个作用域。</p>
<p>JavaScript 中的运行环境大概包括三种情况：</p>
<ul>
<li><strong>全局环境</strong>：JavaScript 代码运行起来会首先进入该环境</li>
<li><strong>函数环境</strong>：当函数被调用执行时，会进入当前函数中执行代码</li>
<li><strong>eval</strong>（不建议使用，可忽略）</li>
</ul>
<p>因此在一个 JavaScript 程序中，必定会产生多个执行上下文，而 JavaScript 引擎会以栈的方式来处理它们，这个栈，我们称其为 <strong>函数调用栈（Call Stack）</strong>。栈底永远都是全局上下文，而栈顶就是当前执行的上下文。</p>
<p>当代码在执行过程中，遇到以上三种情况，都会生成一个执行上下文，放入栈中，而处于栈顶的上下文执行完毕之后，就会自动出栈。</p>
<h2>栈堆实现分析</h2>
<p>JavaScript 引擎通过创建 <strong>执行上下文栈（Execution Context Stack，ECS）</strong> 用于管理执行上下文。</p>
<p>🎯 为了模拟执行上下文栈的行为，让我们类比执行上下文栈是一个数组。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">ECStack</span> = [];
</code></pre>
<p>试想当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 <code>globalContext</code> 表示它，并且只有当整个应用程序结束的时候，ECStack 才会被清空，所以<strong>程序结束之前</strong>， ECStack 最底部永远有个 <code>globalContext</code>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">ECStack</span> = [globalContext];
</code></pre>
<p>现在 JavaScript 遇到下面的这段代码了：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun3</span>(<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fun3&#x27;</span>);
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>) {
  <span class="hljs-title function_">fun3</span>();
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>) {
  <span class="hljs-title function_">fun2</span>();
}

<span class="hljs-title function_">fun1</span>();
</code></pre>
<p>当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。</p>
<p>知道了这样的工作原理，让我们来看看如何处理上面这段代码：</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// fun1()</span>
<span class="hljs-title class_">ECStack</span>.<span class="hljs-title function_">push</span>(&lt;fun1&gt; functionContext);

<span class="hljs-comment">// fun1 中竟然调用了 fun2，还要创建 fun2 的执行上下文</span>
<span class="hljs-title class_">ECStack</span>.<span class="hljs-title function_">push</span>(&lt;fun2&gt; functionContext);

<span class="hljs-comment">// 擦，fun2 还调用了 fun3！</span>
<span class="hljs-title class_">ECStack</span>.<span class="hljs-title function_">push</span>(&lt;fun3&gt; functionContext);

<span class="hljs-comment">// fun3 执行完毕</span>
<span class="hljs-title class_">ECStack</span>.<span class="hljs-title function_">pop</span>();

<span class="hljs-comment">// fun2 执行完毕</span>
<span class="hljs-title class_">ECStack</span>.<span class="hljs-title function_">pop</span>();

<span class="hljs-comment">// fun1 执行完毕</span>
<span class="hljs-title class_">ECStack</span>.<span class="hljs-title function_">pop</span>();

<span class="hljs-comment">// JavaScript 接着执行下面的代码，但是 ECStack 底层永远有个 globalContext</span>
</code></pre>
<p>详细了解了这个过程之后，我们就可以对 <strong>执行上下文栈</strong> 总结一些结论了。</p>
<ul>
<li>JavaScript 引擎是单线程的</li>
<li>同步执行，只有栈顶的上下文处于执行中，其他上下文需要等待</li>
<li>全局上下文只有唯一的一个，它在浏览器关闭时出栈</li>
<li>函数的执行上下文的个数没有限制</li>
<li>每次某个函数被调用，就会有个新的执行上下文为其创建，即使是调用的自身函数，也是如此</li>
</ul>
<h2>参考资料</h2>
<ul>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/8">📝 JavaScript 深入之执行上下文</a></li>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/4">📝 JavaScript 深入之执行上下文栈</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":[["$","h1",null,{"children":"执行上下文"}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

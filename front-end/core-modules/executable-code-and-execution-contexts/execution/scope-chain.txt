1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","core-modules","executable-code-and-execution-contexts","execution","scope-chain"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/executable-code-and-execution-contexts/execution/scope-chain","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/executable-code-and-execution-contexts/execution/scope-chain","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","TlcMYxlCgW505d5s2pjv3",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T1b7d,<h1>作用域链</h1>
<p>在 <a href="/front-end/core-modules/executable-code-and-execution-contexts/execution/variable-object">变量对象</a> 中提及到，当查找变量的时候，会先从当前执行上下文的变量对象中查找，如果没有找到，就会从父级（词法层面上的父级）执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的 &lt;strong style=&quot;color: red;&quot;&gt;变量对象&lt;/strong&gt; 构成的链表就叫做作用域链。</p>
<p>下面，我们从一个函数的 <strong>创建</strong> 和 <strong>激活</strong> 两个阶段来剖析作用域链是如何创建和变化的。</p>
<h2>函数的创建</h2>
<p>函数作用域在函数定义的时候就决定了。</p>
<p>这是因为函数有一个内部属性 <code>[[Scopes]]</code>，当函数创建的时候，就会保存所有父级作用域内的变量对象到其中，你可以理解 <code>[[Scopes]]</code> 就是所有父级作用域的变量对象的层级链，但是注意：<code>[[Scopes]]</code> 并不代表完整的作用域链。</p>
<p>🌰 <strong>代码示例</strong>：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) {
    <span class="hljs-comment">// do something</span>
  }
}
</code></pre>
<p>函数创建时，各自的 <code>[[Scopes]]</code> 为：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(foo);
<span class="hljs-comment">// [[Scopes]]: Scopes[2]</span>
<span class="hljs-comment">// 0: Scripts {...}</span>
<span class="hljs-comment">// 1: Global {...}</span>

foo.[[<span class="hljs-title class_">Scopes</span>]] = [
  globalContext.<span class="hljs-property">VO</span>
];

bar.[[<span class="hljs-title class_">Scopes</span>]] = [
  fooContext.<span class="hljs-property">AO</span>,
  globalContext.<span class="hljs-property">VO</span>
];
</code></pre>
<h2>函数的激活</h2>
<p>当函数激活（执行）时，进入函数上下文，创建 VO / AO 后，就会将 <strong>活动对象</strong> 添加到作用域链的前端。</p>
<p>这时候执行上下文的作用域链，我们命名为 Scopes：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title class_">Scopes</span> = [<span class="hljs-variable constant_">AO</span>].<span class="hljs-title function_">concat</span>([[<span class="hljs-title class_">Scopes</span>]]);
</code></pre>
<p>至此，作用域链创建完毕。</p>
<h2>示例分析</h2>
<p>以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的 <strong>创建过程</strong>：</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">const</span> scope = <span class="hljs-string">&#x27;global scope&#x27;</span>;
<span class="hljs-keyword">function</span> <span class="hljs-title function_">checkscope</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">var</span> scope2 = <span class="hljs-string">&#x27;local scope&#x27;</span>;
  <span class="hljs-keyword">return</span> scope2;
}
<span class="hljs-title function_">checkscope</span>();
</code></pre>
<p><strong>执行过程</strong> 如下：</p>
<ol>
<li><code>checkscope</code> 函数被创建，保存作用域链到内部属性 <code>[[Scopes]]</code></li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code>checkscope.[[<span class="hljs-title class_">Scopes</span>]] = [
  globalContext.<span class="hljs-property">VO</span>
];
</code></pre>
<ol start="2">
<li>执行 <code>checkscope</code> 函数，创建 <code>checkscope</code> 函数执行上下文，<code>checkscope</code> 函数执行上下文被压入执行上下文栈</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title class_">ECStack</span> = [checkscopeContext, globalContext];
</code></pre>
<ol start="3">
<li><code>checkscope</code> 函数并不立刻执行，开始做准备工作，第一步：复制函数 <code>[[Scopes]]</code> 属性创建作用域链</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code>checkscopeContext = {
  <span class="hljs-title class_">Scopes</span>: checkscope.[[<span class="hljs-title class_">Scopes</span>]],
}
</code></pre>
<ol start="4">
<li>用 <code>arguments</code> 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code>checkscopeContext = {
  <span class="hljs-attr">AO</span>: {
    <span class="hljs-attr">arguments</span>: {
      <span class="hljs-attr">length</span>: <span class="hljs-number">0</span>
    },
    <span class="hljs-attr">scope2</span>: <span class="hljs-literal">undefined</span>
  }，
  <span class="hljs-title class_">Scopes</span>: checkscope.[[<span class="hljs-title class_">Scopes</span>]],
}
</code></pre>
<ol start="5">
<li>将活动对象压入 <code>checkscope</code> 作用域链顶端</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code>checkscopeContext = {
  <span class="hljs-attr">AO</span>: {
    <span class="hljs-attr">arguments</span>: {
      <span class="hljs-attr">length</span>: <span class="hljs-number">0</span>,
    },
    <span class="hljs-attr">scope2</span>: <span class="hljs-literal">undefined</span>,
  },
  <span class="hljs-title class_">Scopes</span>: [<span class="hljs-variable constant_">AO</span>, [[<span class="hljs-title class_">Scopes</span>]]],
};
</code></pre>
<ol start="6">
<li>准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code>checkscopeContext = {
  <span class="hljs-attr">AO</span>: {
    <span class="hljs-attr">arguments</span>: {
      <span class="hljs-attr">length</span>: <span class="hljs-number">0</span>,
    },
    <span class="hljs-attr">scope2</span>: <span class="hljs-string">&#x27;local scope&#x27;</span>,
  },
  <span class="hljs-title class_">Scopes</span>: [<span class="hljs-variable constant_">AO</span>, [[<span class="hljs-title class_">Scopes</span>]]],
};
</code></pre>
<ol start="7">
<li>查找到 <code>scope2</code> 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出</li>
</ol>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title class_">ECStack</span> = [globalContext];
</code></pre>
<h2>参考资料</h2>
<ul>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/6" target="_blank" rel="noopener noreferrer nofollow">📝 JavaScript 深入之作用域链</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","core-modules","modularization","dynamic-import"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/modularization/dynamic-import","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/modularization/dynamic-import","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","rHkE8bezT09NfiRd19tko",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T289b,<h1>动态加载</h1>
<p><code>import</code> 命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行（<code>import</code> 命令叫做 <strong>连接</strong>）。因此，下面的代码会报错。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// Error</span>
<span class="hljs-keyword">if</span> (x === <span class="hljs-number">2</span>) {
  <span class="hljs-keyword">import</span> <span class="hljs-variable language_">module</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module&#x27;</span>;
}
</code></pre>
<p>⚠️ <strong>注意</strong>：引擎处理 <code>import</code> 语句是在编译阶段，这时并不会去分析或执行 <code>if</code> 语句，所以 <code>import</code> 语句放在 <code>if</code> 代码块之中毫无意义，因此会报句法错误，而不是执行时错误。也就是说，<code>import</code> 和 <code>export</code> 命令只能在模块的顶层，不能在代码块之中。</p>
<p>如此的设计，固然有利于编译器提高效率，但也导致无法在运行时加载模块。在语法上，条件加载就不可能实现。如果 <code>import</code> 命令要取代 Node 的 <code>require</code> 方法，这就形成了一个障碍。因为 <code>require</code> 是运行时加载模块，<code>import</code> 命令无法取代 <code>require</code> 的 <strong>动态加载功能</strong>。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> path = <span class="hljs-string">&#x27;./&#x27;</span> + fileName;

<span class="hljs-keyword">const</span> myModual = <span class="hljs-built_in">require</span>(path);
</code></pre>
<p>上面的语句就是动态加载，<code>require</code> 到底加载哪一个模块，只有运行时才知道。<code>import</code> 命令做不到这一点。</p>
<p>因此，有一个<a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener noreferrer nofollow">提案</a>，建议引入 <code>import()</code> 函数，实现动态加载。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">import</span>(<span class="hljs-variable language_">module</span>);
</code></pre>
<p>参数 <code>module</code> ，表示指定所要加载的模块的位置。<code>import</code> 命令能够接受什么参数，<code>import()</code> 函数就能接受什么参数，两者区别主要是后者为动态加载。</p>
<p><code>import()</code> 返回一个 <strong>Promise</strong> 对象。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">const</span> main = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;main&#x27;</span>);

<span class="hljs-keyword">import</span>(<span class="hljs-string">`./section-modules/<span class="hljs-subst">${someVariable}</span>.js`</span>)
  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) =&gt;</span> {
    <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">loadPageInto</span>(main);
  })
  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
    main.<span class="hljs-property">textContent</span> = err.<span class="hljs-property">message</span>;
  });
</code></pre>
<p><code>import()</code> 函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块。另外，<code>import()</code> 函数与所加载的模块没有静态连接关系，这点也是与 <code>import</code> 语句不相同。<code>import()</code> 类似于 Node 的 <code>require</code> 方法，区别主要是前者是异步加载，后者是同步加载。</p>
<h2>适用场景</h2>
<h3>按需加载</h3>
<p><code>import()</code> 可以在需要的时候，再加载某个模块。</p>
<pre class="hljs"><code class="language-js">button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./dialogBox.js&#x27;</span>)
    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">dialogBox</span>) =&gt;</span> {
      dialogBox.<span class="hljs-title function_">open</span>();
    })
    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {
      <span class="hljs-comment">/* Error handling */</span>
    });
});
</code></pre>
<p>上面代码中，<code>import()</code> 方法放在 <code>click</code> 事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。</p>
<h3>条件加载</h3>
<p><code>import()</code> 可以放在 <code>if</code> 代码块，根据不同的情况，加载不同的模块。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">if</span> (condition) {
    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;moduleA&#x27;</span>).<span class="hljs-title function_">then</span>(...)
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;moduleB&#x27;</span>).<span class="hljs-title function_">then</span>(...)
}
</code></pre>
<p>上面代码中，如果满足条件，就加载模块 A，否则加载模块 B。</p>
<h3>动态的模块路径</h3>
<p><code>import()</code> 允许模块路径动态生成。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">import</span>(<span class="hljs-title function_">fn</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {});
</code></pre>
<p>上面代码中，根据函数 <code>fn</code> 的返回结果，加载不同的模块。</p>
<h2>注意事项</h2>
<h3>解构赋值输出模块导入</h3>
<p><code>import()</code> 加载模块成功以后，这个模块会作为一个对象，当作 <code>then</code> 方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">{ export1, export2 }</span>) =&gt;</span> {
  <span class="hljs-comment">// do something</span>
});
</code></pre>
<p>上面代码中，<code>export1</code> 和 <code>export2</code> 都是 <code>module.js</code> 的输出接口，可以解构获得。</p>
<h3>默认模块导入</h3>
<p>如果模块有 <code>default</code> 输出接口，可以用参数直接获得。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>);
});
</code></pre>
<h3>命名模块导入</h3>
<p>上面的代码也可以使用 <strong>具名输</strong> 入的形式。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">{ <span class="hljs-keyword">default</span>: defaultInterface }</span>) =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(defaultInterface);
});
</code></pre>
<h3>并发加载多个模块</h3>
<p>如果想<strong>同时加载多个模块</strong>，可以采用下面的写法。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module1.js&#x27;</span>), <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module2.js&#x27;</span>), <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module3.js&#x27;</span>)]).<span class="hljs-title function_">then</span>(
  <span class="hljs-function">(<span class="hljs-params">[module1, module2, module3]</span>) =&gt;</span> {
    <span class="hljs-comment">// do something</span>
  }
);
</code></pre>
<h3>异步函数的模块导入</h3>
<p><code>import()</code> 也可以用在 <strong>async 函数</strong>之中。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module.js&#x27;</span>);

  <span class="hljs-keyword">const</span> { export1, export2 } = <span class="hljs-keyword">await</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module.js&#x27;</span>);

  <span class="hljs-keyword">const</span> [module1, module2, module3] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([
    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module1.js&#x27;</span>),
    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module2.js&#x27;</span>),
    <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./module3.js&#x27;</span>),
  ]);
}

<span class="hljs-title function_">main</span>();
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

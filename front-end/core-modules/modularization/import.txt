1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d498c84e4ab246b3.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/b9d97b2190475167.css","style"]
:HL["/_next/static/css/851cdee6d90716dd.css","style"]
0:{"P":null,"b":"NFjmtHF2up8B2PpbDjLiS","p":"","c":["","front-end","core-modules","modularization","import"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","core-modules/modularization/import","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d498c84e4ab246b3.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/b9d97b2190475167.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/851cdee6d90716dd.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","core-modules/modularization/import","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","saokYDLEMSD_EsXJgWtBH",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T2335,<h1>模块导入 import</h1>
<p><code>import</code> 命令用于输入其他模块提供的功能。</p>
<h2>导入方式</h2>
<p>ECMAScript 规范中的模块化方案提供了四种引入模块的方式：</p>
<ul>
<li>命名导入（Named Imports）</li>
<li>命名空间导入（Namespace Import）</li>
<li>默认导入（Default Import）</li>
<li>空的导入（Empty Import）</li>
</ul>
<h3>命名导入</h3>
<p>从源模块导入其原始名称的特定项目。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> { originModule } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>

<span class="hljs-comment">// React Hook</span>
<span class="hljs-keyword">import</span> { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>
</code></pre>
<p>从源模块导入特定项，并在导入时指定自定义名称。使用关键字 <code>as</code>，将输入的变量重命名。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> { originMoudle <span class="hljs-keyword">as</span> newMoudleName } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>
</code></pre>
<h3>命名空间导入</h3>
<p>将源模块中的所有内容作为对象导入，将所有源模块的命名导出公开为属性和方法。默认导出被排除在此对象之外。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable language_">module</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>

<span class="hljs-comment">// Node.js `fs` module</span>
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span>
</code></pre>
<p>上述例子中 <code>originModule</code> 将被附加到作为属性的导入对象上，即 <code>module.originModule</code>。</p>
<h3>默认导入</h3>
<p>导入源文件的默认导出。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> <span class="hljs-variable language_">module</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>
</code></pre>
<h3>空的导入</h3>
<p>加载模块代码，但不要创建任何新对象。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>
</code></pre>
<h2>特性规范</h2>
<h3>只读性</h3>
<p><code>import</code> 命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> { foo } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>

foo = { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> }
<span class="hljs-comment">//  Syntax Error : &#x27;a&#x27; is read-only;</span>
</code></pre>
<p>但是，如果输入变量是对象类型，改写该变量是被允许的。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> { bar } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>

bar.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>
<span class="hljs-comment">// Right</span>
</code></pre>
<p>尽管此处修改的对象属性，在其他模块也可以读取改写后的值。不过，这种做法很难查错，因此建议凡是输入的变量，都当作只读变量，轻易不要修改它。</p>
<h3>输入路径</h3>
<p><code>import</code> 后面的 <code>from</code> 指定模块文件的位置，可以是相对路径，也可以是绝对路径，<code>.js</code> 后缀可以省略。</p>
<p>如果只是模块名，不带有路径，那么必须有<strong>配置文件</strong>（通常从引入模块目录下 <code>package.json</code> 中查找），告诉 JavaScript 引擎该模块的位置。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>
</code></pre>
<h3>模块提升</h3>
<p>注意，<code>import</code> 命令具有提升效果，<code>import</code> 命令无论写在文件中的哪一行，都会提升到整个模块的头部，首先执行。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-title function_">foo</span>()

<span class="hljs-keyword">import</span> { foo } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>
</code></pre>
<p>上面的代码不会报错，因为 <code>import</code> 的执行早于 <code>foo</code> 的调用。这种行为的本质是，<code>import</code> 命令是编译阶段执行的，在代码运行之前。</p>
<h3>静态执行</h3>
<p>由于 <code>import</code> 是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-comment">// 报错 - 使用了表达式</span>
<span class="hljs-keyword">import</span> { <span class="hljs-string">&#x27;f&#x27;</span> + <span class="hljs-string">&#x27;oo&#x27;</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;

<span class="hljs-comment">// 报错 - 使用了变量</span>
<span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-string">&#x27;my_module&#x27;</span>;
<span class="hljs-keyword">import</span> { foo } <span class="hljs-keyword">from</span> <span class="hljs-variable language_">module</span>;

<span class="hljs-comment">// 报错 - 使用了判断语句</span>
<span class="hljs-keyword">if</span> (x === <span class="hljs-number">1</span>) {
  <span class="hljs-keyword">import</span> { foo } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;module1&#x27;</span>;
} <span class="hljs-keyword">else</span> {
  <span class="hljs-keyword">import</span> { foo } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;module2&#x27;</span>;
}
</code></pre>
<p>上面三种写法都会报错，因为它们用到了表达式、变量和 <code>if</code> 结构。在静态分析阶段，这些语法都是没法得到值的。</p>
<h3>重复加载</h3>
<p>如果多次重复执行同一句 <code>import</code> 语句，那么<strong>只会执行一次，而不会执行多次</strong>。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;lodash&#x27;</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;lodash&#x27;</span>
</code></pre>
<p>上面代码加载了两次 <code>lodash</code>，但是只会执行一次。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-keyword">import</span> { foo } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;
<span class="hljs-keyword">import</span> { bar } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;

<span class="hljs-comment">// 等同于</span>
<span class="hljs-keyword">import</span> { foo, bar } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;
</code></pre>
<p>上面代码中，虽然 <code>foo</code> 和 <code>bar</code> 在两个语句中加载，但是它们对应的是同一个 <code>my_module</code> 实例。也就是说，<code>import</code> 语句是 Singleton 模式。</p>
<h2>模块化隔离</h2>
<p>目前阶段，通过 Babel 转码，CommonJS 模块的 <code>require</code> 命令和 ES6 模块的 <code>import</code> 命令，可以写在同一个模块里面，但是最好不要这样做。因为 <code>import</code> 在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。</p>
<pre class="hljs language-js"  style=--lang:"js" ><code><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;core-js/modules/es6.symbol&#x27;</span>)

<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;core-js/modules/es6.promise&#x27;</span>)

<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;React&#x27;</span>
</code></pre>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null

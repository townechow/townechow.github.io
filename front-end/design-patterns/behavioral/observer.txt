1:"$Sreact.fragment"
2:I[5244,[],""]
3:I[3866,[],""]
5:I[6213,[],"OutletBoundary"]
7:I[6213,[],"MetadataBoundary"]
9:I[6213,[],"ViewportBoundary"]
b:I[4835,[],""]
:HL["/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/d4dd73d504c89c58.css","style"]
:HL["/_next/static/css/485ff6fe79292a08.css","style"]
:HL["/_next/static/css/0ff121a467c0636f.css","style"]
0:{"P":null,"b":"1zJy3VHENUSg9vzcRvJ6P","p":"","c":["","front-end","design-patterns","behavioral","observer"],"i":false,"f":[[["",{"children":["front-end",{"children":[["slug","design-patterns/behavioral/observer","oc"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d4dd73d504c89c58.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_4d318d __variable_ea5f4b antialiased","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["front-end",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/485ff6fe79292a08.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/0ff121a467c0636f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","main",null,{"children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],{"children":[["slug","design-patterns/behavioral/observer","oc"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","front-end","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L4",null,["$","$L5",null,{"children":"$L6"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","39Ko8CDrCQrXfGFgaOOSu",{"children":[["$","$L7",null,{"children":"$L8"}],["$","$L9",null,{"children":"$La"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}]]}],false]],"m":"$undefined","G":["$b","$undefined"],"s":false,"S":true}
c:T31b8,<h1>观察者模式</h1>
<p><strong>观察者模式（Observer Pattern）</strong>：定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</p>
<p>所谓观察者模式，其实就是为了实现 <strong>松耦合（Loosely Coupled）</strong>。</p>
<p>举个例子，当数据有更新，如 <code>changed</code> 方法被调用，用于更新 <code>state</code> 数据，比如温度、气压等。</p>
<p>这些的问题是，如果向更新更多的信息，比如说湿度，那就要去修改 <code>changed</code> 方法的代码，这就是紧耦合的坏处。</p>
<p>对于观察者模式，我们仅仅维护一个可观察对象即可，即一个 Observable 实例，当有数据变更时，它只需维护一套观察者（Observer）的集合，这些 Observer 实现相同的接口，Subject 只需要指导，通知 Observer 时，需要调用哪个同一方法就好了。</p>
<h2>概述</h2>
<p><strong>解决问题</strong>：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作</p>
<p><strong>应用时机</strong>：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知</p>
<p><strong>如何解决</strong>：使用面向对象技术，可以将这种依赖关系弱化</p>
<p><strong>类比实例</strong>：</p>
<ul>
<li>拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。</li>
<li>面试的时候，结束之后每个面试官都会对我说：“请留下你的联系方式， 有消息我们会通知你”。 在这里“我”是订阅者， 面试官是发布者。所以我不用每天或者每小时都去询问面试结果， 通讯的主动权掌握在了面试官手上。而我只需要提供一个联系方式。</li>
</ul>
<p><strong>优点</strong>：</p>
<ul>
<li>观察者和被观察者是 <strong>抽象耦合</strong> 的</li>
<li>建立一套触发机制</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间</li>
<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃</li>
<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化</li>
</ul>
<h2>结构</h2>
<p>观察者模式包含如下角色：</p>
<ul>
<li>Subject（目标）：知道它的通知对象，事件发生后会通知所有它知道的对象，提供添加删除观察者的接口。</li>
<li>ConcreteSubject（具体目标）：被观察者具体的实例，存储观察者感兴趣的状态。</li>
<li>Observer（观察者）：提供通知后的更新事件。</li>
<li>ConcreteObserver（具体观察者）：被观察者具体的实例，存储观察者感兴趣的状态。</li>
</ul>
<h2>代码实现</h2>
<pre class="hljs"><code class="language-js"><span class="hljs-comment">// 被观察者</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> {
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) {
    <span class="hljs-comment">// 观察者队列</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span> = [];
  }
  <span class="hljs-comment">// 注册观察者到被观察者上</span>
  <span class="hljs-title function_">attach</span>(<span class="hljs-params">observer</span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">push</span>(observer);
  }
  <span class="hljs-comment">// 执行所有观察者的 update 方法</span>
  <span class="hljs-title function_">notify</span>(<span class="hljs-params">nextState</span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">observers</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">o</span>) =&gt;</span> o.<span class="hljs-title function_">update</span>(nextState));
  }
}

<span class="hljs-comment">// 观察者</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> {
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
  }
  <span class="hljs-title function_">update</span>(<span class="hljs-params">nextState</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;通知：被观察已更新&#x27;</span>);
  }
}

<span class="hljs-comment">// 创建被观察者</span>
<span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();
<span class="hljs-comment">// 收到广播时要执行的方法</span>
<span class="hljs-keyword">const</span> <span class="hljs-title function_">update</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;被观察者发出通知&#x27;</span>);
<span class="hljs-comment">// 观察者 1</span>
<span class="hljs-keyword">const</span> obs1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(update);
<span class="hljs-comment">// 观察者 2</span>
<span class="hljs-keyword">const</span> obs2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(update);

<span class="hljs-comment">// 观察者 1 订阅 subject 的通知</span>
subject.<span class="hljs-title function_">attach</span>(obs1);
<span class="hljs-comment">// 观察者 2 订阅 subject 的通知</span>
subject.<span class="hljs-title function_">attach</span>(obs2);

<span class="hljs-comment">// 发出广播，执行所有观察者的 update 方法</span>
subject.<span class="hljs-title function_">notify</span>();
</code></pre>
<h2>订阅发布模式</h2>
<p>订阅发布模式（Pub-Sub Pattern）属于广义上的观察者模式</p>
<p>发布订阅模式是最常用的一种观察者模式的实现，并且从解耦和重用角度来看，更优于典型的观察者模式。</p>
<pre class="hljs"><code class="language-jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;
<span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/design-pattern/observer-pubsub.png&#x27;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> () =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;订阅发布和观察者模式&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{img}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{520}</span> /&gt;</span></span>;
</code></pre>
<ul>
<li>在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应。</li>
<li>在发布订阅模式中，发布者和订阅者之间多了一个发布通道；一方面从发布者接收事件，另一方面向订阅者发布事件；订阅者需要从事件通道订阅事件。</li>
</ul>
<p>以此避免发布者和订阅者之间产生依赖关系。</p>
<pre class="hljs"><code class="language-js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventEmitter</span> {
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) {
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span> = {};
  }

  <span class="hljs-title function_">on</span>(<span class="hljs-params">type, cb, options</span>) {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> type !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> cb !== <span class="hljs-string">&#x27;function&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;

    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type] || [];

    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type].<span class="hljs-title function_">push</span>({
      cb,
      <span class="hljs-attr">priority</span>: options.<span class="hljs-property">priority</span> || <span class="hljs-number">0</span>,
    });

    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">cb</span> !== cb);
    };
  }

  <span class="hljs-title function_">off</span>(<span class="hljs-params">type, cb</span>) {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> type !== <span class="hljs-string">&#x27;string&#x27;</span> || <span class="hljs-keyword">typeof</span> cb !== <span class="hljs-string">&#x27;function&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;

    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type] || <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type].<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type].<span class="hljs-property">length</span>; i++) {
      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type][i] === cb) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type].<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>);
      }
    }
  }

  <span class="hljs-title function_">emit</span>(<span class="hljs-params">type, data</span>) {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> type !== <span class="hljs-string">&#x27;string&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;

    <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type] &amp;&amp;
      <span class="hljs-variable language_">this</span>.<span class="hljs-property">listeners</span>[type]
        .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.<span class="hljs-property">priority</span> - b.<span class="hljs-property">priority</span>)
        .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">cb</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, data));
  }
}
</code></pre>
<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li><a href="https://www.zhihu.com/question/23486749" target="_blank" rel="noopener noreferrer nofollow">观察者模式和发布订阅模式有什么不同？</a></li>
<li><a href="https://segmentfault.com/a/1190000020169229" target="_blank" rel="noopener noreferrer nofollow">订阅发布模式和观察者模式的区别</a></li>
</ul>
4:["$","div",null,{"className":"markdown-body","children":["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}]}]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"front-end"}],["$","meta","2",{"name":"description","content":"front-end knowledge"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
6:null
